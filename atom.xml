<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>XiaoFei🥝</title>
  
  
  <link href="https://www.naste.top:1024/atom.xml" rel="self"/>
  
  <link href="https://www.naste.top:1024/"/>
  <updated>2023-09-25T13:47:24.864Z</updated>
  <id>https://www.naste.top:1024/</id>
  
  <author>
    <name>XiaoFei🥝</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringBoot中判断文件字符集</title>
    <link href="https://www.naste.top:1024/posts/2525108947.html"/>
    <id>https://www.naste.top:1024/posts/2525108947.html</id>
    <published>2023-09-24T13:36:39.000Z</published>
    <updated>2023-09-25T13:47:24.864Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p>[TOC]</p><h1 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.googlecode.juniversalchardet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>juniversalchardet<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.mozilla.universalchardet.UniversalDetector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文件编码工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileEncodingUtils</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检测文件编码</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 文件编码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">detectFileEncoding</span><span class="params">(InputStream inputStream)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">UniversalDetector</span> <span class="variable">detector</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UniversalDetector</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> nread;</span><br><span class="line">        <span class="keyword">while</span> ((nread = inputStream.read(buffer)) &gt; <span class="number">0</span> &amp;&amp; !detector.isDone()) &#123;</span><br><span class="line">            detector.handleData(buffer, <span class="number">0</span>, nread);</span><br><span class="line">        &#125;</span><br><span class="line">        detector.dataEnd();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">detectedCharset</span> <span class="operator">=</span> detector.getDetectedCharset();</span><br><span class="line">        <span class="keyword">if</span> (detectedCharset == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果检测不到编码，则使用默认编码</span></span><br><span class="line">            detectedCharset = <span class="string">&quot;UTF-8&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        detector.reset();</span><br><span class="line">        <span class="keyword">return</span> detectedCharset;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">SpringBoot中判断文件字符集</summary>
    
    
    
    <category term="Java" scheme="https://www.naste.top:1024/categories/Java/"/>
    
    
    <category term="Java" scheme="https://www.naste.top:1024/tags/Java/"/>
    
    <category term="SpringBoot" scheme="https://www.naste.top:1024/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://www.naste.top:1024/posts/3435753282.html"/>
    <id>https://www.naste.top:1024/posts/3435753282.html</id>
    <published>2023-09-12T09:56:16.121Z</published>
    <updated>2023-09-25T13:47:24.859Z</updated>
    
    <content type="html"><![CDATA[<hr><p>title: Java中使用WebSocket<br>tags:</p><ul><li>Java</li><li>SpringBoot</li><li>WebSocket<br>keywords: Java中使用WebSocket<br>description: Java中使用WebSocket<br>cover: <a href="https://www.naste.top:9000/webp/1678672857.webp">https://www.naste.top:9000/webp/1678672857.webp</a><br>mathjax: true<br>date: 2023-09-12 17:56:16<br>categories:<br>—- Java</li></ul><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p>[TOC]</p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;title: Java中使用WebSocket&lt;br&gt;tags:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Java&lt;/li&gt;
&lt;li&gt;SpringBoot&lt;/li&gt;
&lt;li&gt;WebSocket&lt;br&gt;keywords: Java中使用WebSocket&lt;br&gt;descripti</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>SpringBoot前后端分离集成SpringSecurity</title>
    <link href="https://www.naste.top:1024/posts/2824886599.html"/>
    <id>https://www.naste.top:1024/posts/2824886599.html</id>
    <published>2023-09-08T07:52:20.000Z</published>
    <updated>2023-09-08T10:46:51.680Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p>[TOC]</p><p><img src="https://www.naste.top:9000/webp/20230908182843.webp" alt="20230908182843"></p><ul><li>自定义用户认证逻辑类，实现<code>implements UserDetailsService</code><ul><li>当用户登录，请求放行的登录地址，将会被触发</li></ul></li><li>认证失败处理类，实现<code>implements AuthenticationEntryPoint</code><ul><li>当访问没有权限会触发</li></ul></li><li>登录退出处理类，实现<code>implements LogoutSuccessHandler</code>：<ul><li>当用户请求配置的登录退出请求时，会触发</li></ul></li><li>token认证过滤器【可选】</li><li>跨域过滤器【可选】</li><li>允许匿名访问的地址【可选】</li></ul><p>ThreadLocal：通过本地线程锁获取当前线程的上下文信息</p>]]></content>
    
    
    <summary type="html">SpringBoot前后端分离集成SpringSecurity</summary>
    
    
    
    <category term="Java" scheme="https://www.naste.top:1024/categories/Java/"/>
    
    
    <category term="Java" scheme="https://www.naste.top:1024/tags/Java/"/>
    
    <category term="SpringBoot" scheme="https://www.naste.top:1024/tags/SpringBoot/"/>
    
    <category term="SpringSecurity" scheme="https://www.naste.top:1024/tags/SpringSecurity/"/>
    
  </entry>
  
  <entry>
    <title>虚拟机网络模式</title>
    <link href="https://www.naste.top:1024/posts/644582412.html"/>
    <id>https://www.naste.top:1024/posts/644582412.html</id>
    <published>2023-08-20T11:42:18.000Z</published>
    <updated>2023-08-23T14:55:55.333Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p>[TOC]</p><h1 id="网络模式"><a href="#网络模式" class="headerlink" title="网络模式"></a>网络模式</h1><ul><li>NAT</li><li>NAT网络</li><li>桥接</li><li>内部网络</li><li>仅主机</li></ul>]]></content>
    
    
    <summary type="html">虚拟机网络模式</summary>
    
    
    
    <category term="Linux" scheme="https://www.naste.top:1024/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://www.naste.top:1024/tags/Linux/"/>
    
    <category term="network" scheme="https://www.naste.top:1024/tags/network/"/>
    
  </entry>
  
  <entry>
    <title>Docker网络模式Linux</title>
    <link href="https://www.naste.top:1024/posts/411112023.html"/>
    <id>https://www.naste.top:1024/posts/411112023.html</id>
    <published>2023-08-20T10:44:43.000Z</published>
    <updated>2023-08-23T14:54:02.788Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p>[TOC]</p><h1 id="Docker网络"><a href="#Docker网络" class="headerlink" title="Docker网络"></a>Docker网络</h1><ul><li>bridge：会有容器IP网段</li><li>host：和宿主机共用IP，即宿主机IP就是容器IP，如果多个容器使用同一个端口，会出现端口冲突</li><li>none：没有IP，不能联网，容器和外部隔离</li><li>自定义网络：拥有默认bridge的同时，自定义bridge网络，会添加DNS功能，使用同一个自定义bridge</li></ul><div class="table-container"><table><thead><tr><th></th><th>默认bridge</th><th>自定义bridge</th><th>Host</th><th>None</th></tr></thead><tbody><tr><td>优点</td><td>默认使用网络类型</td><td>自动DNS</td><td>网络性能好，不需要NAT</td><td>网络隔离</td></tr><tr><td>缺点</td><td>无自动DNS</td><td>需要NAT</td><td>安全问题，仅Linux能使用</td><td>不能联网</td></tr><tr><td>应用场景</td><td>不建议使用</td><td>单宿主多容器</td><td>单容器多端口</td><td>备份操作</td></tr></tbody></table></div>]]></content>
    
    
    <summary type="html">Docker网络模式Linux</summary>
    
    
    
    <category term="Linux" scheme="https://www.naste.top:1024/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://www.naste.top:1024/tags/Linux/"/>
    
    <category term="Docker" scheme="https://www.naste.top:1024/tags/Docker/"/>
    
    <category term="network" scheme="https://www.naste.top:1024/tags/network/"/>
    
  </entry>
  
  <entry>
    <title>统一认证授权中心</title>
    <link href="https://www.naste.top:1024/posts/3180172769.html"/>
    <id>https://www.naste.top:1024/posts/3180172769.html</id>
    <published>2023-08-17T09:35:28.000Z</published>
    <updated>2023-08-23T14:54:48.157Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p>[TOC]</p><h1 id="统一认证授权中心"><a href="#统一认证授权中心" class="headerlink" title="统一认证授权中心"></a>统一认证授权中心</h1><h2 id="1-背景"><a href="#1-背景" class="headerlink" title="1. 背景"></a>1. 背景</h2><p>一般在一个公司内部可能有多个系统，比如OA，财务系统，CMS，ERP，营销系统，客服中心，项目管理系统，代码管理系统等等。</p><p>这些系统一般都有各自的<code>用户体系</code>，这意味着一些弊端：</p><ul><li>使用者必须维护多个系统的账号密码，并且来回切换登录，非常不方便</li><li>对管理者来说，账号的管理，权限的分配等非常复杂，且不易维护</li></ul><p>这就需要<code>统一认证授权中心</code>，也就是说，用户只需要一次登录，就可以访问各个系统，实现互联互通。</p><h2 id="2-认证授权概念"><a href="#2-认证授权概念" class="headerlink" title="2. 认证授权概念"></a>2. 认证授权概念</h2><h3 id="2-1-认证"><a href="#2-1-认证" class="headerlink" title="2.1 认证"></a>2.1 认证</h3><p>证明身份的合法性。</p><p>比如：</p><ul><li>账号密码</li><li>手机号+短信验证码</li><li>电子邮箱</li><li>身份证</li><li>指纹，人脸等信息</li></ul><p><strong>以企业背景来说，认证就是判断此账号是否属于公司的合法账号</strong></p><h3 id="2-2-授权"><a href="#2-2-授权" class="headerlink" title="2.2 授权"></a>2.2 授权</h3><p>当用户身份合法后，不代表此用户拥有操作系统的权限。</p><p>这时候就需要<code>授权</code>，授权就是将权限赋予用户所拥有的账号/角色。</p><p>授权过后，在用户使用账号进行登录时，需要进行<code>鉴权</code>操作，判断此用户是否具有符合访问某个系统或者访问某个功能的权限，比如一个运营人员是不允许访问财务系统的(<code>运营人员的授权列表中并没有财务系统的授权</code>)。</p><h2 id="3-一些名词"><a href="#3-一些名词" class="headerlink" title="3. 一些名词"></a>3. 一些名词</h2><p><code>IAM(Identity and Access Management )</code> :  身份认证和访问管理。</p><p><code>IDM(Identity Management System)</code>: 身份管理系统。</p><p><code>SSO(SingleSignOn)</code>： 单点登录，用户只需要登录一次就可以访问所有相互信任的应用系统。</p><p><code>RBAC(Role-Based Access Control)</code>: 基于角色的访问控制。是一种权限模型。</p><h2 id="4-常见的认证方案"><a href="#4-常见的认证方案" class="headerlink" title="4. 常见的认证方案"></a>4. 常见的认证方案</h2><h3 id="4-1-JWT"><a href="#4-1-JWT" class="headerlink" title="4.1 JWT"></a>4.1 JWT</h3><p>HTTP协议是无状态的，这意味着我们无法通过HTTP访问来确认用户是否登录，有两种方案：</p><ul><li>session</li><li>token</li></ul><p>其中session方案，需要将session存储在服务端，并且需要cookie的配合，无法适应分布式场景以及客户端是手机端等这些无cookie的场景。</p><p>token方案就是登录成功后，服务端会下发一个令牌（token），客户端将token进行存储，这样访问资源时，将令牌token携带，服务端验证token有效性即可。</p><p><code>JWT</code>是一种用于token生成的加密算法，是目前业界比较成熟的一种方案。</p><p>JWT字符串的组成：</p><blockquote><p>A.B.C，通过<code>.</code>进行相连，其中A部分为Header，B部分为Payload，C部分为Signature </p></blockquote><ul><li><p>Header: header部分一般会包含两部分：</p><ul><li>typ：token类型，这里一般为<code>JWT</code></li><li>alg：签名算法，一般填写<code>HS256</code></li><li>以BASE64加密json字符串，可以解密</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;alg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HS256&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;typ&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JWT&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>Payload：可以添加需要传递的数据，比如用户id，还有几个默认的字段</p><ul><li>iss (issuer)：签发人/发行人</li><li>sub (subject)：主题</li><li>aud (audience)：用户</li><li>exp (expiration time)：过期时间</li><li>nbf (Not Before)：生效时间，在此之前是无效的</li><li>iat (Issued At)：签发时间</li><li>jti (JWT ID)：用于标识该 JWT</li><li>自定义字段</li><li>以base64加密json字符串，可以解密，payload中不建议存放敏感数据</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">//默认字段</span></span><br><span class="line">    <span class="attr">&quot;sub&quot;</span><span class="punctuation">:</span><span class="string">&quot;主题123&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">//自定义字段</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;码神之路www.mszlu.com&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>Signature: 签名，指定一个secret(秘钥)，该secret需要保存起来，不让其他人知道，通过header中指明的加密算法，将上述header和payload进行加密，使用secret加盐，这就是<code>签名</code></p><ul><li>验证时，收到一个<code>Header.Playload.Signature</code>这样的字符串，用secret加密<code>Header.Playload</code>，如果得到的结果和<code>Signature</code>一样，则验证通过</li><li>签名同样是base64加密</li></ul></li></ul><h3 id="4-2-OAuth2"><a href="#4-2-OAuth2" class="headerlink" title="4.2 OAuth2"></a>4.2 OAuth2</h3><p><code>OAuth2</code>也是一种token认证方案，流程如下：</p><p><img src="https://www.naste.top:9000/images/image-20230801231458409.png" alt="image-20230801231458409"></p><ul><li>客户端（比如浏览器，手机APP等）</li><li>资源拥有者（用户）</li><li>认证服务器</li><li>资源服务器</li></ul><p>认证流程：</p><ul><li>（A）用户打开客户端以后，客户端要求用户给予授权。</li><li>（B）用户同意给予客户端授权。</li><li>（C）客户端使用上一步获得的授权，向认证服务器申请令牌。</li><li>（D）授权认证服务器对客户端进行认证以后，确认无误，同意发放令牌。</li><li>（E）客户端使用令牌，向资源服务器申请获取资源。</li><li>（F）资源服务器确认令牌无误，同意向客户端开放资源。</li></ul><p><img src="https://www.naste.top:9000/images/image-20230801231955864.png" alt="image-20230801231955864"></p><p>OAuth 2.0定义了四种授权许可类型：</p><ol><li><p>Authorization Code：授权码</p><p><img src="https://www.naste.top:9000/images/image-20230801232139146.png" alt="image-20230801232139146"></p></li><li><p>Implicit：隐式许可</p><p><img src="https://www.naste.top:9000/images/image-20230801232150239.png" alt="image-20230801232150239"></p></li><li><p>Resource Owner Password Credentials：密码凭证</p><p><img src="https://www.naste.top:9000/images/image-20230801232319057.png" alt="image-20230801232319057"></p></li><li><p>Client Credentials ：客户端凭证</p></li></ol><p>​    <img src="https://www.naste.top:9000/images/image-20230801232337191.png" alt="image-20230801232337191"></p><h2 id="5-SSO协议"><a href="#5-SSO协议" class="headerlink" title="5. SSO协议"></a>5. SSO协议</h2><p>SSO就是单点登录，一次登录，可以访问所有受信应用，<code>JWT</code>和<code>OAuth</code>都可以实现单点登录。</p><h3 id="5-1-OpenID-Connect"><a href="#5-1-OpenID-Connect" class="headerlink" title="5.1 OpenID Connect"></a>5.1 OpenID Connect</h3><p>简称<code>OIDC</code>，是基于OAuth2扩展出来的一个协议。 OIDC 在 OAuth2.0 协议的基础上，提供了用户认证、获取用户信息等的标准实现。<strong>OIDC 是完全兼容 OAuth2.0 的</strong>。</p><ul><li><code>资源持有者（End User）</code> ： 对应 OAuth中的<code>Resource Owner</code></li><li><code>客户端（Relying Party）</code>: 对应OAuth中的<code>Client</code></li><li><code>资源服务器（Resource Server）</code> </li><li><code>认证服务器（OpenID Provider）</code>: 对应OAuth中的<code>Auhtorization Server</code></li></ul><p><img src="https://www.naste.top:9000/images/image-20230802003334390.png" alt="image-20230802003334390"></p><ol><li>RP(client)发送一个认证请求到 OpenID Provider（OP）。</li><li>OP对End User进行认证并获得相应的授权。</li><li>OP返回一个ID Token或者access Token给RP。</li><li>RP使用access token向UserInfo Endpoint请求用户信息。</li><li>UserInfo Endpoint返回相应的用户信息给RP。</li></ol><p><code>ID Token</code>就像是一个用户的身份证，它是以JWT格式存在的，并且由OP进行签名，保证它的安全性。</p><blockquote><p>授权模式：</p></blockquote><p><img src="https://www.naste.top:9000/images/v2-8735e5c0737994d9a7c1290cbefff789_1440w.webp" alt="img"></p><ul><li><p><strong>授权码模式（Authorization Code）</strong></p><p><img src="https://www.naste.top:9000/images/v2-85de92eb3fdf3e55483bc00a72a48f44_1440w.webp" alt="img"></p></li><li><p><strong>授权码 + PKCE 模式（Authorization Code With PKCE）</strong></p><p><img src="https://www.naste.top:9000/images/v2-a4be09b55d716895ff16a95ba0b8ed06_1440w.webp" alt="img"></p></li><li><p><strong>客户端凭证模式（Client Credentials）</strong></p><p><img src="https://www.naste.top:9000/images/v2-7801b0e452b2d98de36c7c0b5fa7284d_1440w.webp" alt="img"></p></li><li><p><strong>隐式模式（Implicit）</strong></p><p><img src="https://www.naste.top:9000/images/v2-b52c5743355754a237d415729f34d0bb_1440w.webp" alt="img"></p></li><li><p><strong>密码模式（Password）</strong></p><p><img src="https://www.naste.top:9000/images/v2-d26c315aa259f67e5d03b35ee6d8e247_1440w.webp" alt="img"></p></li><li><p><strong>设备代码模式（Device Code）</strong></p><p><img src="https://www.naste.top:9000/images/v2-69a098d52e8bd9b190093697786b5fab_1440w-16909080543958.webp" alt="img"></p></li></ul><h3 id="5-2-SAML-2-0"><a href="#5-2-SAML-2-0" class="headerlink" title="5.2 SAML 2.0"></a>5.2 SAML 2.0</h3><p>SAML协议全称为<code>Security Assertion Markup Language</code>，它是一个基于XML的标准协议。SAML标准定义了身份提供者（Identity Provider）和服务提供者（Service Provider）之间，如何通过SAML规范，采用加密和签名的方式来建立互信，从而交换用户身份信息。</p><p><strong>SAML复杂性比较高，并不推荐使用。</strong></p><h3 id="5-3-CAS"><a href="#5-3-CAS" class="headerlink" title="5.3 CAS"></a>5.3 CAS</h3><p>CAS （ <code>Central Authentication Service</code> ） 是 Yale 大学发起的一个企业级的、开源的项目，旨在为 Web 应用系统提供一种可靠的单点登录解决方法。</p><p>CAS 开始于 2001 年， 并在 2004 年 12 月正式成为 JA-SIG 的一个项目。</p><p>角色介绍：</p><ul><li><p>CAS Client</p><p>负责提供资源，当资源受保护时需要用户进行身份认证时，重定向到CAS Server进行认证。</p></li><li><p>CAS Server</p><p>负责对用户的认证。</p></li></ul><p>CAS有不同的版本，比如1.0，2.0，3.0，4.0等，认证流程基本一致，只是不同版本中，Server可以引入不同的认证机制（比如引入SAML，OAuth2等）。</p><p>认证流程大致为: </p><p><img src="https://www.naste.top:9000/images/li4wdumqzo.png" alt="img"></p><ol><li>Client(终端用户)在浏览器里请求访问Web应用example；</li><li>浏览器发起一个GET请求访问example应用的主页<code>https://www.example.com</code>；</li><li>应用example发现当前用户处于未登陆状态，Redirect用户至CAS服务器进行认证；</li><li>用户请求CAS服务器；</li><li>CAS发现当前用户在CAS服务器中处于未登陆状态, 要求用户必须得先登陆；</li><li>CAS服务器返回登陆页面至浏览器；</li><li>用户在登陆界面中输入用户名和密码（或者其他认证方式）；</li><li>用户把用户名和密码通过POST，提交至CAS服务器；</li><li>CAS对用户身份进行认证，若用户名和密码正确，则生成SSO会话,  且把会话ID通过Cookie的方式返回至用户的浏览器端（此时，用户在CAS服务端处于登陆状态）；</li><li>CAS服务器同时也会把用户重定向至CAS Client, 且同时发送一个Service Ticket；</li><li>CAS Client的服务端收到这个Service Ticket以后，请求CAS Server对该ticket进行校验；</li><li>CAS Server把校验结果返回给CAS Client, 校验结果包括该ticket是否合法，以及该ticket中包含对用户信息；</li><li>至此，CAS Client根据Service Ticket得知当前登陆用户的身份，CAS Client处于登陆态。</li></ol><p><strong>CAS同样不推荐使用</strong></p><blockquote><p>虽然SAML和CAS不推荐使用，但做为统一认证授权中心的实现，需要考虑多种场景，同样应该给予实现（只是优先级不高）</p></blockquote><p><strong>目前SSO协议，最为推荐使用的为OIDC，也是目前事实上的SSO通用标准</strong></p><h2 id="6-RBAC"><a href="#6-RBAC" class="headerlink" title="6. RBAC"></a>6. RBAC</h2><p>基于角色的访问控制（<code>Role-based access control</code>），指的是通过用户的角色（Role）授权其相关权限，这实现了更灵活的访问控制，相比直接授予用户权限，要更加简单、高效、可扩展。</p><p>当使用 RBAC 时，通过分析系统用户的实际情况，基于共同的职责和需求，授予他们不同角色。你可以授予给用户一个或多个角色，每个角色具有一个或多个权限，这种 <code>用户-角色</code>、<code>角色-权限</code> 间的关系，让我们可以不用再单独管理单个用户，用户从授予的角色里面继承所需的权限。</p><p>以一个简单的<code>场景</code>（Gitlab 的权限系统）为例，用户系统中有 Admin、Maintainer、Operator 三种角色，这三种角色分别具备不同的权限，比如只有 Admin 具备创建代码仓库、删除代码仓库的权限，其他的角色都不具备。</p><p><img src="https://www.naste.top:9000/images/KX1PzJ94CsSRDwH.png" alt="img"></p>]]></content>
    
    
    <summary type="html">统一认证授权中心</summary>
    
    
    
    <category term="Java" scheme="https://www.naste.top:1024/categories/Java/"/>
    
    
    <category term="Java" scheme="https://www.naste.top:1024/tags/Java/"/>
    
    <category term="SpringBoot" scheme="https://www.naste.top:1024/tags/SpringBoot/"/>
    
    <category term="SpringSecurity" scheme="https://www.naste.top:1024/tags/SpringSecurity/"/>
    
  </entry>
  
  <entry>
    <title>ShardingSphere</title>
    <link href="https://www.naste.top:1024/posts/2343814370.html"/>
    <id>https://www.naste.top:1024/posts/2343814370.html</id>
    <published>2023-08-17T09:35:01.000Z</published>
    <updated>2023-08-23T14:54:48.148Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p>[TOC]</p><h1 id="第01章-高性能架构模式"><a href="#第01章-高性能架构模式" class="headerlink" title="第01章 高性能架构模式"></a>第01章 高性能架构模式</h1><p>互联网业务兴起之后，海量用户加上海量数据的特点，单个数据库服务器已经难以满足业务需要，必须考虑数据库集群的方式来提升性能。高性能数据库集群的<code>第一种方式是“读写分离”</code>，<code>第二种方式是“数据库分片”</code>。</p><h2 id="1、读写分离架构"><a href="#1、读写分离架构" class="headerlink" title="1、读写分离架构"></a>1、读写分离架构</h2><p><strong>读写分离原理：</strong>读写分离的基本原理是将数据库读写操作分散到不同的节点上，下面是其基本架构图：</p><p><img src="https://www.naste.top:9000/images/362d22168bf344687ec0c206aa115807.jpg" alt="img"></p><p><strong>读写分离的基本实现：</strong></p><ul><li><code>主库负责处理事务性的增删改操作，从库负责处理查询操作</code>，能够有效的避免由数据更新导致的行锁，使得整个系统的查询性能得到极大的改善。</li><li>读写分离是<code>根据 SQL 语义的分析</code>，<code>将读操作和写操作分别路由至主库与从库</code>。</li><li>通过<code>一主多从</code>的配置方式，可以将查询请求均匀的分散到多个数据副本，能够进一步的提升系统的处理能力。 </li><li>使用<code>多主多从</code>的方式，不但能够提升系统的吞吐量，还能够提升系统的可用性，可以达到在任何一个数据库宕机，甚至磁盘物理损坏的情况下仍然不影响系统的正常运行。</li></ul><p><strong>下图展示了根据业务需要，将用户表的写操作和读操路由到不同的数据库的方案：</strong></p><p><img src="https://www.naste.top:9000/images/image-20220804223138651.png" alt="image-20220804223138651"></p><p><strong>CAP 理论：</strong></p><p>CAP 定理（CAP theorem）又被称作布鲁尔定理（Brewer’s theorem），是加州大学伯克利分校的计算机科学家埃里克·布鲁尔（Eric Brewer）在 2000 年的 ACM PODC 上提出的一个猜想。<code>对于设计分布式系统的架构师来说，CAP 是必须掌握的理论。</code></p><p>在一个<code>分布式系统中</code>，当涉及读写操作时，只能保证一致性（Consistence）、可用性（Availability）、分区容错性（Partition Tolerance）三者中的两个，另外一个必须被牺牲。</p><ul><li>C 一致性（Consistency）：对某个指定的客户端来说，读操作保证能够返回最新的写操作结果</li><li>A 可用性（Availability）：非故障的节点在合理的时间内返回合理的响应<code>（不是错误和超时的响应）</code></li><li>P 分区容忍性（Partition Tolerance）：当出现网络分区后<code>（可能是丢包，也可能是连接中断，还可能是拥塞）</code>，系统能够继续“履行职责”</li></ul><p><strong>CAP特点：</strong></p><ul><li>在实际设计过程中，每个系统不可能只处理一种数据，而是包含多种类型的数据，<code>有的数据必须选择 CP，有的数据必须选择 AP，分布式系统理论上不可能选择 CA 架构。</code></li></ul><ul><li><p>CP：如下图所示，<code>为了保证一致性</code>，当发生分区现象后，N1 节点上的数据已经更新到 y，但由于 N1 和 N2 之间的复制通道中断，数据 y 无法同步到 N2，N2 节点上的数据还是 x。<code>这时客户端 C 访问 N2 时，N2 需要返回 Error，提示客户端 C“系统现在发生了错误”，</code>这种处理方式<code>违背了可用性</code>（Availability）的要求，因此 CAP 三者只能满足 CP。</p><p><img src="https://www.naste.top:9000/images/6e7d7bd54d7a4eb67918080863d354d7.png" alt="img"></p></li></ul><ul><li>AP：如下图所示，<code>为了保证可用性</code>，当发生分区现象后，N1 节点上的数据已经更新到 y，但由于 N1 和 N2 之间的复制通道中断，数据 y 无法同步到 N2，N2 节点上的数据还是 x。<code>这时客户端 C 访问 N2 时，N2 将当前自己拥有的数据 x 返回给客户端 C 了</code>，而实际上当前最新的数据已经是 y 了，这就<code>不满足一致性</code>（Consistency）的要求了，因此 CAP 三者只能满足 AP。注意：这里 N2 节点返回 x，虽然不是一个“正确”的结果，但是一个“合理”的结果，因为 x 是旧的数据，并不是一个错乱的值，只是不是最新的数据而已。</li></ul><p><img src="https://www.naste.top:9000/images/2ccafe41de9bd7f8dec4658f004310d6.png" alt="img"></p><ul><li><p>CAP 理论中的 <code>C 在实践中是不可能完美实现的</code>，在数据复制的过程中，节点N1 和节点 N2 的数据并不一致（强一致性）。即使无法做到<code>强一致性</code>，但应用可以采用适合的方式达到<code>最终一致性</code>。具有如下特点：</p><ul><li>基本可用（Basically Available）：分布式系统在出现故障时，允许损失部分可用性，即保证核心可用。</li><li>软状态（Soft State）：允许系统存在中间状态，而该中间状态不会影响系统整体可用性。这里的中间状态就是 CAP 理论中的数据不一致。</li><li><code>最终一致性（Eventual Consistency）：系统中的所有数据副本经过一定时间后，最终能够达到一致的状态。</code></li></ul></li></ul><h2 id="2、数据库分片架构"><a href="#2、数据库分片架构" class="headerlink" title="2、数据库分片架构"></a>2、数据库分片架构</h2><p><strong>读写分离的问题：</strong></p><p>读写分离分散了数据库读写操作的压力，但没有分散存储压力，为了满足业务数据存储的需求，就需要<code>将存储分散到多台数据库服务器上</code>。</p><p><strong>数据分片：</strong></p><p>将存放在单一数据库中的数据分散地存放至多个数据库或表中，以达到提升性能瓶颈以及可用性的效果。 数据分片的有效手段是对关系型数据库进行<code>分库和分表</code>。数据分片的拆分方式又分为<code>垂直分片和水平分片</code>。</p><h3 id="2-1、垂直分片"><a href="#2-1、垂直分片" class="headerlink" title="2.1、垂直分片"></a>2.1、垂直分片</h3><p><strong>垂直分库：</strong></p><p><code>按照业务拆分的方式称为垂直分片，又称为纵向拆分</code>，它的核心理念是专库专用。 在拆分之前，一个数据库由多个数据表构成，每个表对应着不同的业务。而拆分之后，则是按照业务将表进行归类，分布到不同的数据库中，从而将压力分散至不同的数据库。 </p><p><img src="https://www.naste.top:9000/images/71f41d46cc5c0405f4d4dc944b4350c9.jpg" alt="img"></p><p>下图展示了根据业务需要，将用户表和订单表垂直分片到不同的数据库的方案：</p><p><img src="https://www.naste.top:9000/images/image-20220804221855449.png" alt="image-20220804221855449"></p><p>垂直拆分可以缓解数据量和访问量带来的问题，但无法根治。<code>如果垂直拆分之后，表中的数据量依然超过单节点所能承载的阈值，则需要水平分片来进一步处理。</code></p><p><strong>垂直分表：</strong></p><p><code>垂直分表适合将表中某些不常用的列，或者是占了大量空间的列拆分出去。</code></p><p>假设我们是一个婚恋网站，用户在筛选其他用户的时候，主要是用 age 和 sex 两个字段进行查询，而 nickname 和 description 两个字段主要用于展示，一般不会在业务查询中用到。description 本身又比较长，因此我们可以将这两个字段独立到另外一张表中，这样在查询 age 和 sex 时，就能带来一定的性能提升。</p><p>垂直分表引入的复杂性主要体现在表操作的数量要增加。例如，原来只要一次查询就可以获取 name、age、sex、nickname、description，现在需要两次查询，一次查询获取 name、age、sex，另外一次查询获取 nickname、description。</p><p><img src="https://www.naste.top:9000/images/136bc2f01919edcb8271df6f7e71af40.jpg" alt="img"></p><p><code>水平分表适合表行数特别大的表，水平分表属于水平分片</code>。</p><h3 id="2-2、水平分片"><a href="#2-2、水平分片" class="headerlink" title="2.2、水平分片"></a>2.2、水平分片</h3><p><code>水平分片又称为横向拆分。</code> 相对于垂直分片，它不再将数据根据业务逻辑分类，而是通过某个字段（或某几个字段），根据某种规则将数据分散至多个库或表中，每个分片仅包含数据的一部分。 例如：根据主键分片，偶数主键的记录放入 0 库（或表），奇数主键的记录放入 1 库（或表），如下图所示。</p><p><img src="https://www.naste.top:9000/images/image-20220804222212087.png" alt="image-20220804222212087"></p><p><code>单表进行切分后，是否将多个表分散在不同的数据库服务器中，可以根据实际的切分效果来确定。</code></p><ul><li><p><strong>水平分表：</strong>单表切分为多表后，新的表即使在同一个数据库服务器中，也可能带来可观的性能提升，如果性能能够满足业务要求，可以不拆分到多台数据库服务器，毕竟业务分库也会引入很多复杂性；</p></li><li><p><strong>水平分库：</strong>如果单表拆分为多表后，单台服务器依然无法满足性能要求，那就需要将多个表分散在不同的数据库服务器中。</p></li></ul><blockquote><p><strong>阿里巴巴Java开发手册：</strong></p><p>【推荐】单表行数超过 500 万行或者单表容量超过 2GB，才推荐进行分库分表。</p><p>说明：如果预计三年后的数据量根本达不到这个级别，<code>请不要在创建表时就分库分表</code>。</p></blockquote><h2 id="3、读写分离和数据分片架构"><a href="#3、读写分离和数据分片架构" class="headerlink" title="3、读写分离和数据分片架构"></a>3、读写分离和数据分片架构</h2><p> 下图展现了将数据分片与读写分离一同使用时，应用程序与数据库集群之间的复杂拓扑关系。</p><p><img src="https://www.naste.top:9000/images/image-20220804223321167.png" alt="image-20220804223321167"></p><h2 id="4、实现方式"><a href="#4、实现方式" class="headerlink" title="4、实现方式"></a>4、实现方式</h2><p>读写分离和数据分片具体的实现方式一般有两种：  <code>程序代码封装</code>和<code>中间件封装</code>。</p><h3 id="4-1、程序代码封装"><a href="#4-1、程序代码封装" class="headerlink" title="4.1、程序代码封装"></a>4.1、程序代码封装</h3><p>程序代码封装指在代码中抽象一个<code>数据访问层（或中间层封装）</code>，实现读写操作分离和数据库服务器连接的管理。</p><p><strong>其基本架构是：</strong>以读写分离为例</p><p><img src="https://www.naste.top:9000/images/f8d538f9201e3ebee37dfdcd1922e9df.jpg" alt="img"></p><h3 id="4-2、中间件封装"><a href="#4-2、中间件封装" class="headerlink" title="4.2、中间件封装"></a>4.2、中间件封装</h3><p>中间件封装指的是<code>独立一套系统出来</code>，实现读写操作分离和数据库服务器连接的管理。对于业务服务器来说，访问中间件和访问数据库没有区别，在业务服务器看来，中间件就是一个数据库服务器。</p><p><strong>基本架构是：</strong>以读写分离为例</p><p><img src="https://www.naste.top:9000/images/2a2dba7f07581fd055d9cd5a3aa8388e.jpg" alt="img"></p><h3 id="4-3、常用解决方案"><a href="#4-3、常用解决方案" class="headerlink" title="4.3、常用解决方案"></a>4.3、常用解决方案</h3><p>Apache ShardingSphere（程序级别和中间件级别）</p><p>MyCat（数据库中间件） </p><h1 id="第02章-ShardingSphere"><a href="#第02章-ShardingSphere" class="headerlink" title="第02章 ShardingSphere"></a>第02章 ShardingSphere</h1><h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><p>官网：<a href="https://shardingsphere.apache.org/index_zh.html">https://shardingsphere.apache.org/index_zh.html</a></p><p>文档：<a href="https://shardingsphere.apache.org/document/5.1.1/cn/overview/">https://shardingsphere.apache.org/document/5.1.1/cn/overview/</a></p><p>Apache ShardingSphere 由 JDBC、Proxy 和 Sidecar（规划中）这 3 款既能够独立部署，又支持混合部署配合使用的产品组成。 </p><h2 id="2、ShardingSphere-JDBC"><a href="#2、ShardingSphere-JDBC" class="headerlink" title="2、ShardingSphere-JDBC"></a>2、ShardingSphere-JDBC</h2><p><strong>程序代码封装</strong></p><p>定位为轻量级 Java 框架，<code>在 Java 的 JDBC 层提供的额外服务</code>。 它使用客户端直连数据库，<code>以 jar 包形式提供服务</code>，无需额外部署和依赖，可理解为增强版的 JDBC 驱动，完全兼容 JDBC 和各种 ORM 框架。</p><p><img src="https://www.naste.top:9000/images/image-20220804195402870.png" alt="image-20220804195402870"></p><h2 id="3、ShardingSphere-Proxy"><a href="#3、ShardingSphere-Proxy" class="headerlink" title="3、ShardingSphere-Proxy"></a>3、ShardingSphere-Proxy</h2><p><strong>中间件封装</strong></p><p>定位为透明化的<code>数据库代理端</code>，提供封装了数据库二进制协议的服务端版本，用于完成对异构语言的支持。 目前提供 MySQL 和 PostgreSQL版本，它可以使用任何兼容 MySQL/PostgreSQL 协议的访问客户端（如：MySQL Command Client, MySQL Workbench, Navicat 等）操作数据，对 DBA 更加友好。</p><p><img src="https://www.naste.top:9000/images/image-20220804195432673.png" alt="image-20220804195432673"></p><h1 id="第03章-MySQL主从同步"><a href="#第03章-MySQL主从同步" class="headerlink" title="第03章 MySQL主从同步"></a>第03章 MySQL主从同步</h1><h2 id="1、MySQL主从同步原理"><a href="#1、MySQL主从同步原理" class="headerlink" title="1、MySQL主从同步原理"></a>1、MySQL主从同步原理</h2><p><img src="https://www.naste.top:9000/images/image-20220714133617856.png" alt="img"></p><p><strong>基本原理：</strong></p><p>slave会从master读取binlog来进行数据同步</p><p><strong>具体步骤：</strong></p><ul><li><code>step1：</code>master将数据改变记录到<code>二进制日志（binary log）</code>中。</li><li><code>step2：</code> 当slave上执行 <code>start slave</code> 命令之后，slave会创建一个 <code>IO 线程</code>用来连接master，请求master中的binlog。</li><li><code>step3：</code>当slave连接master时，master会创建一个 <code>log dump 线程</code>，用于发送 binlog 的内容。在读取 binlog 的内容的操作中，会对主节点上的 binlog 加锁，当读取完成并发送给从服务器后解锁。</li><li><code>step4：</code>IO 线程接收主节点 binlog dump 进程发来的更新之后，保存到 <code>中继日志（relay log）</code> 中。</li><li><code>step5：</code>slave的<code>SQL线程</code>，读取relay log日志，并解析成具体操作，从而实现主从操作一致，最终数据一致。</li></ul><h2 id="2、一主多从配置"><a href="#2、一主多从配置" class="headerlink" title="2、一主多从配置"></a>2、一主多从配置</h2><p>服务器规划：使用<code>docker</code>方式创建，<code>主从服务器IP一致，端口号不一致</code></p><p><img src="https://www.naste.top:9000/images/image-20220807183231101.png" alt="image-20220807183231101"></p><ul><li>主服务器：容器名<code>xiaofei-mysql-master</code>，端口<code>3306</code></li><li>从服务器：容器名<code>xiaofei-mysql-slave1</code>，端口<code>3307</code></li><li>从服务器：容器名<code>xiaofei-mysql-slave2</code>，端口<code>3308</code></li></ul><p><strong>注意：</strong>如果此时防火墙是开启的，<code>则先关闭防火墙，并重启docker</code>，否则后续安装的MySQL无法启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">关闭docker</span></span><br><span class="line">systemctl stop docker</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">关闭防火墙</span></span><br><span class="line">systemctl stop firewalld</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">启动docker</span></span><br><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><h3 id="2-1、准备主服务器"><a href="#2-1、准备主服务器" class="headerlink" title="2.1、准备主服务器"></a>2.1、准备主服务器</h3><ul><li><strong>step1：在docker中创建并启动MySQL主服务器：</strong><code>端口3306</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">-p 3306:3306 \</span><br><span class="line">-v /xiaofei/mysql/master/conf:/etc/mysql/conf.d \</span><br><span class="line">-v /xiaofei/mysql/master/data:/var/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123456 \</span><br><span class="line">--name xiaofei-mysql-master \</span><br><span class="line">mysql:8.0.29</span><br></pre></td></tr></table></figure><ul><li><strong>step2：创建MySQL主服务器配置文件：</strong> </li></ul><p>默认情况下MySQL的binlog日志是自动开启的，可以通过如下配置定义一些可选配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /xiaofei/mysql/master/conf/my.cnf</span><br></pre></td></tr></table></figure><p>配置如下内容</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">[mysqld]</span></span><br><span class="line"><span class="comment"># 服务器唯一id，默认值1</span></span><br><span class="line"><span class="attr">server-id</span>=<span class="string">1</span></span><br><span class="line"><span class="comment"># 设置日志格式，默认值ROW</span></span><br><span class="line"><span class="attr">binlog_format</span>=<span class="string">STATEMENT</span></span><br><span class="line"><span class="comment"># 二进制日志名，默认binlog</span></span><br><span class="line"><span class="comment"># log-bin=binlog</span></span><br><span class="line"><span class="comment"># 设置需要复制的数据库，默认复制全部数据库</span></span><br><span class="line"><span class="comment">#binlog-do-db=mytestdb</span></span><br><span class="line"><span class="comment"># 设置不需要复制的数据库</span></span><br><span class="line"><span class="comment">#binlog-ignore-db=mysql</span></span><br><span class="line"><span class="comment">#binlog-ignore-db=infomation_schema</span></span><br></pre></td></tr></table></figure><p>重启MySQL容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart xiaofei-mysql-master</span><br></pre></td></tr></table></figure><p><code>binlog格式说明：</code></p><ul><li>binlog_format=STATEMENT：日志记录的是主机数据库的<code>写指令</code>，性能高，但是now()之类的函数以及获取系统参数的操作会出现主从数据不同步的问题。</li><li>binlog_format=ROW（默认）：日志记录的是主机数据库的<code>写后的数据</code>，批量操作时性能较差，解决now()或者  user()或者  @@hostname 等操作在主从机器上不一致的问题。</li><li>binlog_format=MIXED：是以上两种level的混合使用，有函数用ROW，没函数用STATEMENT，但是无法识别系统变量</li></ul><p><code>binlog-ignore-db和binlog-do-db的优先级问题：</code></p><p><img src="https://www.naste.top:9000/images/0.08703112216569037.png" alt="img"></p><ul><li><strong>step3：使用命令行登录MySQL主服务器：</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">进入容器：<span class="built_in">env</span> LANG=C.UTF-8 避免容器中显示中文乱码</span></span><br><span class="line">docker exec -it xiaofei-mysql-master env LANG=C.UTF-8 /bin/bash</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">进入容器内的mysql命令行</span></span><br><span class="line">mysql -uroot -p</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">修改默认密码校验方式</span></span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;123456&#x27;;</span><br></pre></td></tr></table></figure><ul><li><strong>step4：主机中创建slave用户：</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建slave用户</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;xiaofei_slave&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line"><span class="comment">-- 设置密码</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;xiaofei_slave&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"><span class="comment">-- 授予复制权限</span></span><br><span class="line"><span class="keyword">GRANT</span> REPLICATION SLAVE <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;xiaofei_slave&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line"><span class="comment">-- 刷新权限</span></span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><ul><li><strong>step5：主机中查询master状态：</strong></li></ul><p>执行完此步骤后<code>不要再操作主服务器MYSQL</code>，防止主服务器状态值变化</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> MASTER STATUS;</span><br></pre></td></tr></table></figure><p>记下<code>File</code>和<code>Position</code>的值。执行完此步骤后不要再操作主服务器MYSQL，防止主服务器状态值变化。</p><p><img src="https://www.naste.top:9000/images/image-20220804191852164.png" alt="image-20220804191852164"></p><h3 id="2-2、准备从服务器"><a href="#2-2、准备从服务器" class="headerlink" title="2.2、准备从服务器"></a>2.2、准备从服务器</h3><p>可以配置多台从机slave1、slave2…，这里以配置slave1为例</p><ul><li><strong>step1：在docker中创建并启动MySQL从服务器：</strong><code>端口3307</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">-p 3307:3306 \</span><br><span class="line">-v /xiaofei/mysql/slave1/conf:/etc/mysql/conf.d \</span><br><span class="line">-v /xiaofei/mysql/slave1/data:/var/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123456 \</span><br><span class="line">--name xiaofei-mysql-slave1 \</span><br><span class="line">mysql:8.0.29</span><br></pre></td></tr></table></figure><ul><li><strong>step2：创建MySQL从服务器配置文件：</strong> </li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /xiaofei/mysql/slave1/conf/my.cnf</span><br></pre></td></tr></table></figure><p>配置如下内容：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">[mysqld]</span></span><br><span class="line"><span class="comment"># 服务器唯一id，每台服务器的id必须不同，如果配置其他从机，注意修改id</span></span><br><span class="line"><span class="attr">server-id</span>=<span class="string">2</span></span><br><span class="line"><span class="comment"># 中继日志名，默认xxxxxxxxxxxx-relay-bin</span></span><br><span class="line"><span class="comment">#relay-log=relay-bin</span></span><br></pre></td></tr></table></figure><p>重启MySQL容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart xiaofei-mysql-slave1</span><br></pre></td></tr></table></figure><ul><li><strong>step3：使用命令行登录MySQL从服务器：</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">进入容器：</span></span><br><span class="line">docker exec -it xiaofei-mysql-slave1 env LANG=C.UTF-8 /bin/bash</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">进入容器内的mysql命令行</span></span><br><span class="line">mysql -uroot -p</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">修改默认密码校验方式</span></span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;123456&#x27;;</span><br></pre></td></tr></table></figure><ul><li><strong>step4：在从机上配置主从关系：</strong></li></ul><p>在<strong>从机</strong>上执行以下SQL操作</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CHANGE MASTER <span class="keyword">TO</span> MASTER_HOST<span class="operator">=</span><span class="string">&#x27;192.168.100.201&#x27;</span>, </span><br><span class="line">MASTER_USER<span class="operator">=</span><span class="string">&#x27;xiaofei_slave&#x27;</span>,MASTER_PASSWORD<span class="operator">=</span><span class="string">&#x27;123456&#x27;</span>, MASTER_PORT<span class="operator">=</span><span class="number">3306</span>,</span><br><span class="line">MASTER_LOG_FILE<span class="operator">=</span><span class="string">&#x27;binlog.000003&#x27;</span>,MASTER_LOG_POS<span class="operator">=</span><span class="number">1357</span>; </span><br></pre></td></tr></table></figure><h3 id="2-3、启动主从同步"><a href="#2-3、启动主从同步" class="headerlink" title="2.3、启动主从同步"></a>2.3、启动主从同步</h3><p>启动从机的复制功能，执行SQL：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">START</span> SLAVE;</span><br><span class="line"><span class="comment">-- 查看状态（不需要分号）</span></span><br><span class="line"><span class="keyword">SHOW</span> SLAVE STATUS\G</span><br></pre></td></tr></table></figure><p><strong>两个关键进程：</strong>下面两个参数都是Yes，则说明主从配置成功！</p><p><img src="https://www.naste.top:9000/images/image-20220715000533951.png" alt="img"></p><h3 id="2-4、实现主从同步"><a href="#2-4、实现主从同步" class="headerlink" title="2.4、实现主从同步"></a>2.4、实现主从同步</h3><p>在主机中执行以下SQL，在从机中查看数据库、表和数据是否已经被同步</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE db_user;</span><br><span class="line">USE db_user;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_user (</span><br><span class="line"> id <span class="type">BIGINT</span> AUTO_INCREMENT,</span><br><span class="line"> uname <span class="type">VARCHAR</span>(<span class="number">30</span>),</span><br><span class="line"> <span class="keyword">PRIMARY</span> KEY (id)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_user(uname) <span class="keyword">VALUES</span>(<span class="string">&#x27;zhang3&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_user(uname) <span class="keyword">VALUES</span>(@<span class="variable">@hostname</span>);</span><br></pre></td></tr></table></figure><h3 id="2-5、停止和重置"><a href="#2-5、停止和重置" class="headerlink" title="2.5、停止和重置"></a>2.5、停止和重置</h3><p>需要的时候，可以使用如下SQL语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 在从机上执行。功能说明：停止I/O 线程和SQL线程的操作。</span></span><br><span class="line">stop slave; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 在从机上执行。功能说明：用于删除SLAVE数据库的relaylog日志文件，并重新启用新的relaylog文件。</span></span><br><span class="line">reset slave;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 在主机上执行。功能说明：删除所有的binglog日志文件，并将日志索引文件清空，重新开始所有新的日志文件。</span></span><br><span class="line"><span class="comment">-- 用于第一次进行搭建主从库时，进行主库binlog初始化工作；</span></span><br><span class="line">reset master;</span><br></pre></td></tr></table></figure><h3 id="2-6、常见问题"><a href="#2-6、常见问题" class="headerlink" title="2.6、常见问题"></a><strong>2.6、常见问题</strong></h3><h4 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h4><p>启动主从同步后，常见错误是<code>Slave_IO_Running： No 或者 Connecting</code> 的情况，此时查看下方的 <code>Last_IO_ERROR</code>错误日志，根据日志中显示的错误信息在网上搜索解决方案即可</p><p><img src="https://www.naste.top:9000/images/image-20220714235426120.png" alt="img"></p><p><strong>典型的错误例如：</strong><code>Last_IO_Error: Got fatal error 1236 from master when reading data from binary log: &#39;Client requested master to start replication from position &gt; file size&#39;</code></p><p><strong>解决方案：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 在从机停止slave</span></span><br><span class="line">SLAVE STOP;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 在主机查看mater状态</span></span><br><span class="line"><span class="keyword">SHOW</span> MASTER STATUS;</span><br><span class="line"><span class="comment">-- 在主机刷新日志</span></span><br><span class="line">FLUSH LOGS;</span><br><span class="line"><span class="comment">-- 再次在主机查看mater状态（会发现File和Position发生了变化）</span></span><br><span class="line"><span class="keyword">SHOW</span> MASTER STATUS;</span><br><span class="line"><span class="comment">-- 修改从机连接主机的SQL，并重新连接即可</span></span><br></pre></td></tr></table></figure><h4 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h4><p>启动docker容器后提示 <code>WARNING: IPv4 forwarding is disabled. Networking will not work.</code></p><p><img src="https://www.naste.top:9000/images/image-20220715004850504.png" alt="img"></p><p>此错误，虽然不影响主从同步的搭建，但是如果想从远程客户端通过以下方式连接docker中的MySQL则没法连接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\administrator&gt;mysql -h 192.168.100.201 -P 3306 -u root -p</span><br></pre></td></tr></table></figure><p><strong>解决方案：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">修改配置文件：</span></span><br><span class="line">vim /usr/lib/sysctl.d/00-system.conf</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">追加</span></span><br><span class="line">net.ipv4.ip_forward=1</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">接着重启网络</span></span><br><span class="line">systemctl restart network</span><br></pre></td></tr></table></figure><h1 id="第04章-ShardingSphere-JDBC读写分离"><a href="#第04章-ShardingSphere-JDBC读写分离" class="headerlink" title="第04章 ShardingSphere-JDBC读写分离"></a>第04章 ShardingSphere-JDBC读写分离</h1><h2 id="1、创建SpringBoot程序"><a href="#1、创建SpringBoot程序" class="headerlink" title="1、创建SpringBoot程序"></a>1、创建SpringBoot程序</h2><h3 id="1-1、创建项目"><a href="#1-1、创建项目" class="headerlink" title="1.1、创建项目"></a>1.1、创建项目</h3><p>项目类型：Spring Initializr</p><p>SpringBoot脚手架：<a href="http://start.aliyun.com">http://start.aliyun.com</a></p><p>项目名：sharding-jdbc-demo</p><p>SpringBoot版本：2.3.7.RELEASE</p><h3 id="1-2、添加依赖"><a href="#1-2、添加依赖" class="headerlink" title="1.2、添加依赖"></a>1.2、添加依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shardingsphere<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shardingsphere-jdbc-core-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-3、创建实体类"><a href="#1-3、创建实体类" class="headerlink" title="1.3、创建实体类"></a>1.3、创建实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaofei.shardingjdbcdemo.entity;</span><br><span class="line"></span><br><span class="line"><span class="meta">@TableName(&quot;t_user&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@TableId(type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String uname;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4、创建Mapper"><a href="#1-4、创建Mapper" class="headerlink" title="1.4、创建Mapper"></a>1.4、创建Mapper</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaofei.shardingjdbcdemo.mapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-5、配置读写分离"><a href="#1-5、配置读写分离" class="headerlink" title="1.5、配置读写分离"></a>1.5、配置读写分离</h3><p>application.properties：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 应用名称</span></span><br><span class="line"><span class="attr">spring.application.name</span>=<span class="string">sharging-jdbc-demo</span></span><br><span class="line"><span class="comment"># 开发环境设置</span></span><br><span class="line"><span class="attr">spring.profiles.active</span>=<span class="string">dev</span></span><br><span class="line"><span class="comment"># 内存模式</span></span><br><span class="line"><span class="attr">spring.shardingsphere.mode.type</span>=<span class="string">Memory</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 配置真实数据源</span></span><br><span class="line"><span class="attr">spring.shardingsphere.datasource.names</span>=<span class="string">master,slave1,slave2</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 配置第 1 个数据源</span></span><br><span class="line"><span class="attr">spring.shardingsphere.datasource.master.type</span>=<span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line"><span class="attr">spring.shardingsphere.datasource.master.driver-class-name</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">spring.shardingsphere.datasource.master.jdbc-url</span>=<span class="string">jdbc:mysql://192.168.100.201:3306/db_user</span></span><br><span class="line"><span class="attr">spring.shardingsphere.datasource.master.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.shardingsphere.datasource.master.password</span>=<span class="string">123456</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 配置第 2 个数据源</span></span><br><span class="line"><span class="attr">spring.shardingsphere.datasource.slave1.type</span>=<span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line"><span class="attr">spring.shardingsphere.datasource.slave1.driver-class-name</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">spring.shardingsphere.datasource.slave1.jdbc-url</span>=<span class="string">jdbc:mysql://192.168.100.201:3307/db_user</span></span><br><span class="line"><span class="attr">spring.shardingsphere.datasource.slave1.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.shardingsphere.datasource.slave1.password</span>=<span class="string">123456</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 配置第 3 个数据源</span></span><br><span class="line"><span class="attr">spring.shardingsphere.datasource.slave2.type</span>=<span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line"><span class="attr">spring.shardingsphere.datasource.slave2.driver-class-name</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">spring.shardingsphere.datasource.slave2.jdbc-url</span>=<span class="string">jdbc:mysql://192.168.100.201:3308/db_user</span></span><br><span class="line"><span class="attr">spring.shardingsphere.datasource.slave2.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.shardingsphere.datasource.slave2.password</span>=<span class="string">123456</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 读写分离类型，如: Static，Dynamic</span></span><br><span class="line"><span class="attr">spring.shardingsphere.rules.readwrite-splitting.data-sources.myds.type</span>=<span class="string">Static</span></span><br><span class="line"><span class="comment"># 写数据源名称</span></span><br><span class="line"><span class="attr">spring.shardingsphere.rules.readwrite-splitting.data-sources.myds.props.write-data-source-name</span>=<span class="string">master</span></span><br><span class="line"><span class="comment"># 读数据源名称，多个从数据源用逗号分隔</span></span><br><span class="line"><span class="attr">spring.shardingsphere.rules.readwrite-splitting.data-sources.myds.props.read-data-source-names</span>=<span class="string">slave1,slave2</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 负载均衡算法名称</span></span><br><span class="line"><span class="attr">spring.shardingsphere.rules.readwrite-splitting.data-sources.myds.load-balancer-name</span>=<span class="string">alg_round</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 负载均衡算法配置</span></span><br><span class="line"><span class="comment"># 负载均衡算法类型</span></span><br><span class="line"><span class="attr">spring.shardingsphere.rules.readwrite-splitting.load-balancers.alg_round.type</span>=<span class="string">ROUND_ROBIN</span></span><br><span class="line"><span class="attr">spring.shardingsphere.rules.readwrite-splitting.load-balancers.alg_random.type</span>=<span class="string">RANDOM</span></span><br><span class="line"><span class="attr">spring.shardingsphere.rules.readwrite-splitting.load-balancers.alg_weight.type</span>=<span class="string">WEIGHT</span></span><br><span class="line"><span class="attr">spring.shardingsphere.rules.readwrite-splitting.load-balancers.alg_weight.props.slave1</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">spring.shardingsphere.rules.readwrite-splitting.load-balancers.alg_weight.props.slave2</span>=<span class="string">2</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 打印SQl</span></span><br><span class="line"><span class="attr">spring.shardingsphere.props.sql-show</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><h2 id="2、测试"><a href="#2、测试" class="headerlink" title="2、测试"></a>2、测试</h2><h3 id="2-1、读写分离测试"><a href="#2-1、读写分离测试" class="headerlink" title="2.1、读写分离测试"></a>2.1、读写分离测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaofei.shardingjdbcdemo;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ReadwriteTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 写入数据的测试</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsert</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setUname(<span class="string">&quot;张三丰&quot;</span>);</span><br><span class="line">        userMapper.insert(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2、事务测试"><a href="#2-2、事务测试" class="headerlink" title="2.2、事务测试"></a>2.2、事务测试</h3><p>为了保证主从库间的事务一致性，避免跨服务的分布式事务，ShardingSphere-JDBC的<code>主从模型中，事务中的数据读写均用主库</code>。</p><ul><li>不添加@Transactional：insert对主库操作，select对从库操作</li><li>添加@Transactional：则insert和select均对主库操作</li><li><strong>注意：</strong>在JUnit环境下的@Transactional注解，默认情况下就会对事务进行回滚（即使在没加注解@Rollback，也会对事务回滚）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 事务测试</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Transactional</span><span class="comment">//开启事务</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTrans</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setUname(<span class="string">&quot;铁锤&quot;</span>);</span><br><span class="line">    userMapper.insert(user);</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; users = userMapper.selectList(<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3、负载均衡测试"><a href="#2-3、负载均衡测试" class="headerlink" title="2.3、负载均衡测试"></a>2.3、负载均衡测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读数据测试</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectAll</span><span class="params">()</span>&#123;</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectList(<span class="literal">null</span>);</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectList(<span class="literal">null</span>);<span class="comment">//执行第二次测试负载均衡</span></span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>也可以在web请求中测试负载均衡</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaofei.shardingjdbcdemo.controller;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/userController&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试负载均衡策略</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;selectAll&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectAll</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;User&gt; users = userMapper.selectList(<span class="literal">null</span>);</span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第05章-ShardingSphere-JDBC垂直分片"><a href="#第05章-ShardingSphere-JDBC垂直分片" class="headerlink" title="第05章 ShardingSphere-JDBC垂直分片"></a>第05章 ShardingSphere-JDBC垂直分片</h1><h2 id="1、准备服务器"><a href="#1、准备服务器" class="headerlink" title="1、准备服务器"></a>1、准备服务器</h2><p>服务器规划：使用<code>docker</code>方式创建如下容器</p><p><img src="https://www.naste.top:9000/images/image-20220807232456342.png" alt="image-20220807232456342"></p><ul><li><p>服务器：容器名<code>server-user</code>，端口<code>3301</code></p></li><li><p>服务器：容器名<code>server-order</code>，端口<code>3302</code></p></li></ul><h3 id="1-1、创建server-user容器"><a href="#1-1、创建server-user容器" class="headerlink" title="1.1、创建server-user容器"></a>1.1、创建server-user容器</h3><ul><li><strong>step1：创建容器：</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">-p 3301:3306 \</span><br><span class="line">-v /xiaofei/server/user/conf:/etc/mysql/conf.d \</span><br><span class="line">-v /xiaofei/server/user/data:/var/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123456 \</span><br><span class="line">--name server-user \</span><br><span class="line">mysql:8.0.29</span><br></pre></td></tr></table></figure><ul><li><strong>step2：登录MySQL服务器：</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">进入容器：</span></span><br><span class="line">docker exec -it server-user env LANG=C.UTF-8 /bin/bash</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">进入容器内的mysql命令行</span></span><br><span class="line">mysql -uroot -p</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">修改默认密码插件</span></span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;123456&#x27;;</span><br></pre></td></tr></table></figure><ul><li><strong>step3：创建数据库：</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE db_user;</span><br><span class="line">USE db_user;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_user (</span><br><span class="line"> id <span class="type">BIGINT</span> AUTO_INCREMENT,</span><br><span class="line"> uname <span class="type">VARCHAR</span>(<span class="number">30</span>),</span><br><span class="line"> <span class="keyword">PRIMARY</span> KEY (id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="1-2、创建server-order容器"><a href="#1-2、创建server-order容器" class="headerlink" title="1.2、创建server-order容器"></a>1.2、创建server-order容器</h3><ul><li><strong>step1：创建容器：</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">-p 3302:3306 \</span><br><span class="line">-v /xiaofei/server/order/conf:/etc/mysql/conf.d \</span><br><span class="line">-v /xiaofei/server/order/data:/var/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123456 \</span><br><span class="line">--name server-order \</span><br><span class="line">mysql:8.0.29</span><br></pre></td></tr></table></figure><ul><li><strong>step2：登录MySQL服务器：</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">进入容器：</span></span><br><span class="line">docker exec -it server-order env LANG=C.UTF-8 /bin/bash</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">进入容器内的mysql命令行</span></span><br><span class="line">mysql -uroot -p</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">修改默认密码插件</span></span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;123456&#x27;;</span><br></pre></td></tr></table></figure><ul><li><strong>step3：创建数据库：</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE db_order;</span><br><span class="line">USE db_order;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_order (</span><br><span class="line">  id <span class="type">BIGINT</span> AUTO_INCREMENT,</span><br><span class="line">  order_no <span class="type">VARCHAR</span>(<span class="number">30</span>),</span><br><span class="line">  user_id <span class="type">BIGINT</span>,</span><br><span class="line">  amount <span class="type">DECIMAL</span>(<span class="number">10</span>,<span class="number">2</span>),</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY(id) </span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="2、程序实现"><a href="#2、程序实现" class="headerlink" title="2、程序实现"></a>2、程序实现</h2><h3 id="2-1、创建实体类"><a href="#2-1、创建实体类" class="headerlink" title="2.1、创建实体类"></a>2.1、创建实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaofei.shardingjdbcdemo.entity;</span><br><span class="line"></span><br><span class="line"><span class="meta">@TableName(&quot;t_order&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Order</span> &#123;</span><br><span class="line">    <span class="meta">@TableId(type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String orderNo;</span><br><span class="line">    <span class="keyword">private</span> Long userId;</span><br><span class="line">    <span class="keyword">private</span> BigDecimal amount;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2、创建Mapper"><a href="#2-2、创建Mapper" class="headerlink" title="2.2、创建Mapper"></a>2.2、创建Mapper</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaofei.shardingjdbcdemo.mapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OrderMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Order&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3、配置垂直分片"><a href="#2-3、配置垂直分片" class="headerlink" title="2.3、配置垂直分片"></a>2.3、配置垂直分片</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 应用名称</span></span><br><span class="line"><span class="attr">spring.application.name</span>=<span class="string">sharding-jdbc-demo</span></span><br><span class="line"><span class="comment"># 环境设置</span></span><br><span class="line"><span class="attr">spring.profiles.active</span>=<span class="string">dev</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 配置真实数据源</span></span><br><span class="line"><span class="attr">spring.shardingsphere.datasource.names</span>=<span class="string">server-user,server-order</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 配置第 1 个数据源</span></span><br><span class="line"><span class="attr">spring.shardingsphere.datasource.server-user.type</span>=<span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line"><span class="attr">spring.shardingsphere.datasource.server-user.driver-class-name</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">spring.shardingsphere.datasource.server-user.jdbc-url</span>=<span class="string">jdbc:mysql://192.168.100.201:3301/db_user</span></span><br><span class="line"><span class="attr">spring.shardingsphere.datasource.server-user.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.shardingsphere.datasource.server-user.password</span>=<span class="string">123456</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 配置第 2 个数据源</span></span><br><span class="line"><span class="attr">spring.shardingsphere.datasource.server-order.type</span>=<span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line"><span class="attr">spring.shardingsphere.datasource.server-order.driver-class-name</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">spring.shardingsphere.datasource.server-order.jdbc-url</span>=<span class="string">jdbc:mysql://192.168.100.201:3302/db_order</span></span><br><span class="line"><span class="attr">spring.shardingsphere.datasource.server-order.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.shardingsphere.datasource.server-order.password</span>=<span class="string">123456</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 标准分片表配置（数据节点）</span></span><br><span class="line"><span class="comment"># spring.shardingsphere.rules.sharding.tables.&lt;table-name&gt;.actual-data-nodes=值</span></span><br><span class="line"><span class="comment"># 值由数据源名 + 表名组成，以小数点分隔。</span></span><br><span class="line"><span class="comment"># &lt;table-name&gt;：逻辑表名</span></span><br><span class="line"><span class="attr">spring.shardingsphere.rules.sharding.tables.t_user.actual-data-nodes</span>=<span class="string">server-user.t_user</span></span><br><span class="line"><span class="attr">spring.shardingsphere.rules.sharding.tables.t_order.actual-data-nodes</span>=<span class="string">server-order.t_order</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 打印SQL</span></span><br><span class="line"><span class="attr">spring.shardingsphere.props.sql-show</span>=<span class="string">true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3、测试垂直分片"><a href="#3、测试垂直分片" class="headerlink" title="3、测试垂直分片"></a>3、测试垂直分片</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaofei.shardingjdbcdemo;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShardingTest</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderMapper orderMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 垂直分片：插入数据测试</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsertOrderAndUser</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setUname(<span class="string">&quot;强哥&quot;</span>);</span><br><span class="line">        userMapper.insert(user);</span><br><span class="line"></span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Order</span>();</span><br><span class="line">        order.setOrderNo(<span class="string">&quot;xiaofei001&quot;</span>);</span><br><span class="line">        order.setUserId(user.getId());</span><br><span class="line">        order.setAmount(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="number">100</span>));</span><br><span class="line">        orderMapper.insert(order);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 垂直分片：查询数据测试</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectFromOrderAndUser</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectById(<span class="number">1L</span>);</span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> orderMapper.selectById(<span class="number">1L</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h3><p><img src="https://www.naste.top:9000/images/image-20220810163534068.png" alt="image-20220810163534068"></p><p>ShardingSphere-JDBC远程连接的方式默认的密码加密规则是：mysql_native_password</p><p>因此需要在服务器端修改服务器的密码加密规则，如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;123456&#x27;</span>;</span><br></pre></td></tr></table></figure><h1 id="第06章-ShardingSphere-JDBC水平分片"><a href="#第06章-ShardingSphere-JDBC水平分片" class="headerlink" title="第06章 ShardingSphere-JDBC水平分片"></a>第06章 ShardingSphere-JDBC水平分片</h1><h2 id="1、准备服务器-1"><a href="#1、准备服务器-1" class="headerlink" title="1、准备服务器"></a>1、准备服务器</h2><p>服务器规划：使用<code>docker</code>方式创建如下容器</p><p><img src="https://www.naste.top:9000/images/image-20220808033239206.png" alt="image-20220808033239206"></p><ul><li><p>服务器：容器名<code>server-order0</code>，端口<code>3310</code></p></li><li><p>服务器：容器名<code>server-order1</code>，端口<code>3311</code></p></li></ul><h3 id="1-1、创建server-order0容器"><a href="#1-1、创建server-order0容器" class="headerlink" title="1.1、创建server-order0容器"></a>1.1、创建server-order0容器</h3><ul><li><strong>step1：创建容器：</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">-p 3310:3306 \</span><br><span class="line">-v /xiaofei/server/order0/conf:/etc/mysql/conf.d \</span><br><span class="line">-v /xiaofei/server/order0/data:/var/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123456 \</span><br><span class="line">--name server-order0 \</span><br><span class="line">mysql:8.0.29</span><br></pre></td></tr></table></figure><ul><li><strong>step2：登录MySQL服务器：</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">进入容器：</span></span><br><span class="line">docker exec -it server-order0 env LANG=C.UTF-8 /bin/bash</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">进入容器内的mysql命令行</span></span><br><span class="line">mysql -uroot -p</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">修改默认密码插件</span></span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;123456&#x27;;</span><br></pre></td></tr></table></figure><ul><li><strong>step3：创建数据库：</strong></li></ul><p><code>注意：</code>水平分片的id需要在业务层实现，<code>不能依赖数据库的主键自增</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE db_order;</span><br><span class="line">USE db_order;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_order0 (</span><br><span class="line">  id <span class="type">BIGINT</span>,</span><br><span class="line">  order_no <span class="type">VARCHAR</span>(<span class="number">30</span>),</span><br><span class="line">  user_id <span class="type">BIGINT</span>,</span><br><span class="line">  amount <span class="type">DECIMAL</span>(<span class="number">10</span>,<span class="number">2</span>),</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY(id) </span><br><span class="line">);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_order1 (</span><br><span class="line">  id <span class="type">BIGINT</span>,</span><br><span class="line">  order_no <span class="type">VARCHAR</span>(<span class="number">30</span>),</span><br><span class="line">  user_id <span class="type">BIGINT</span>,</span><br><span class="line">  amount <span class="type">DECIMAL</span>(<span class="number">10</span>,<span class="number">2</span>),</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY(id) </span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="1-2、创建server-order1容器"><a href="#1-2、创建server-order1容器" class="headerlink" title="1.2、创建server-order1容器"></a>1.2、创建server-order1容器</h3><ul><li><strong>step1：创建容器：</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">-p 3311:3306 \</span><br><span class="line">-v /xiaofei/server/order1/conf:/etc/mysql/conf.d \</span><br><span class="line">-v /xiaofei/server/order1/data:/var/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123456 \</span><br><span class="line">--name server-order1 \</span><br><span class="line">mysql:8.0.29</span><br></pre></td></tr></table></figure><ul><li><strong>step2：登录MySQL服务器：</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">进入容器：</span></span><br><span class="line">docker exec -it server-order1 env LANG=C.UTF-8 /bin/bash</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">进入容器内的mysql命令行</span></span><br><span class="line">mysql -uroot -p</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">修改默认密码插件</span></span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;123456&#x27;;</span><br></pre></td></tr></table></figure><ul><li><strong>step3：创建数据库：</strong>和server-order0相同</li></ul><p><code>注意：</code>水平分片的id需要在业务层实现，不能依赖数据库的主键自增</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE db_order;</span><br><span class="line">USE db_order;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_order0 (</span><br><span class="line">  id <span class="type">BIGINT</span>,</span><br><span class="line">  order_no <span class="type">VARCHAR</span>(<span class="number">30</span>),</span><br><span class="line">  user_id <span class="type">BIGINT</span>,</span><br><span class="line">  amount <span class="type">DECIMAL</span>(<span class="number">10</span>,<span class="number">2</span>),</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY(id) </span><br><span class="line">);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_order1 (</span><br><span class="line">  id <span class="type">BIGINT</span>,</span><br><span class="line">  order_no <span class="type">VARCHAR</span>(<span class="number">30</span>),</span><br><span class="line">  user_id <span class="type">BIGINT</span>,</span><br><span class="line">  amount <span class="type">DECIMAL</span>(<span class="number">10</span>,<span class="number">2</span>),</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY(id) </span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="2、基本水平分片"><a href="#2、基本水平分片" class="headerlink" title="2、基本水平分片"></a>2、基本水平分片</h2><h3 id="2-1、基本配置"><a href="#2-1、基本配置" class="headerlink" title="2.1、基本配置"></a>2.1、基本配置</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#========================基本配置</span></span><br><span class="line"><span class="comment"># 应用名称</span></span><br><span class="line"><span class="attr">spring.application.name</span>=<span class="string">sharging-jdbc-demo</span></span><br><span class="line"><span class="comment"># 开发环境设置</span></span><br><span class="line"><span class="attr">spring.profiles.active</span>=<span class="string">dev</span></span><br><span class="line"><span class="comment"># 内存模式</span></span><br><span class="line"><span class="attr">spring.shardingsphere.mode.type</span>=<span class="string">Memory</span></span><br><span class="line"><span class="comment"># 打印SQl</span></span><br><span class="line"><span class="attr">spring.shardingsphere.props.sql-show</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><h3 id="2-2、数据源配置"><a href="#2-2、数据源配置" class="headerlink" title="2.2、数据源配置"></a>2.2、数据源配置</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#========================数据源配置</span></span><br><span class="line"><span class="comment"># 配置真实数据源</span></span><br><span class="line"><span class="attr">spring.shardingsphere.datasource.names</span>=<span class="string">server-user,server-order0,server-order1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 配置第 1 个数据源</span></span><br><span class="line"><span class="attr">spring.shardingsphere.datasource.server-user.type</span>=<span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line"><span class="attr">spring.shardingsphere.datasource.server-user.driver-class-name</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">spring.shardingsphere.datasource.server-user.jdbc-url</span>=<span class="string">jdbc:mysql://192.168.100.201:3301/db_user</span></span><br><span class="line"><span class="attr">spring.shardingsphere.datasource.server-user.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.shardingsphere.datasource.server-user.password</span>=<span class="string">123456</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 配置第 2 个数据源</span></span><br><span class="line"><span class="attr">spring.shardingsphere.datasource.server-order.type</span>=<span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line"><span class="attr">spring.shardingsphere.datasource.server-order.driver-class-name</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">spring.shardingsphere.datasource.server-order.jdbc-url</span>=<span class="string">jdbc:mysql://192.168.100.201:3310/db_order</span></span><br><span class="line"><span class="attr">spring.shardingsphere.datasource.server-order.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.shardingsphere.datasource.server-order.password</span>=<span class="string">123456</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 配置第 3 个数据源</span></span><br><span class="line"><span class="attr">spring.shardingsphere.datasource.server-order.type</span>=<span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line"><span class="attr">spring.shardingsphere.datasource.server-order.driver-class-name</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">spring.shardingsphere.datasource.server-order.jdbc-url</span>=<span class="string">jdbc:mysql://192.168.100.201:3311/db_order</span></span><br><span class="line"><span class="attr">spring.shardingsphere.datasource.server-order.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.shardingsphere.datasource.server-order.password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure><h3 id="2-3、标椎分片表配置"><a href="#2-3、标椎分片表配置" class="headerlink" title="2.3、标椎分片表配置"></a>2.3、标椎分片表配置</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#========================标准分片表配置（数据节点配置）</span></span><br><span class="line"><span class="comment"># spring.shardingsphere.rules.sharding.tables.&lt;table-name&gt;.actual-data-nodes=值</span></span><br><span class="line"><span class="comment"># 值由数据源名 + 表名组成，以小数点分隔。多个表以逗号分隔，支持 inline 表达式。</span></span><br><span class="line"><span class="comment"># &lt;table-name&gt;：逻辑表名</span></span><br><span class="line"><span class="attr">spring.shardingsphere.rules.sharding.tables.t_user.actual-data-nodes</span>=<span class="string">server-user.t_user</span></span><br><span class="line"><span class="attr">spring.shardingsphere.rules.sharding.tables.t_order.actual-data-nodes</span>=<span class="string">server-order0.t_order0,server-order0.t_order1,server-order1.t_order0,server-order1.t_order1</span></span><br></pre></td></tr></table></figure><p>修改Order实体类的主键策略：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@TableId(type = IdType.AUTO)//依赖数据库的主键自增策略</span></span><br><span class="line"><span class="meta">@TableId(type = IdType.ASSIGN_ID)</span><span class="comment">//分布式id</span></span><br></pre></td></tr></table></figure><p>测试：保留上面配置中的一个分片表节点分别进行测试，检查每个分片节点是否可用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 水平分片：插入数据测试</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsertOrder</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Order</span>();</span><br><span class="line">    order.setOrderNo(<span class="string">&quot;xiaofei001&quot;</span>);</span><br><span class="line">    order.setUserId(<span class="number">1L</span>);</span><br><span class="line">    order.setAmount(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="number">100</span>));</span><br><span class="line">    orderMapper.insert(order);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4、行表达式"><a href="#2-4、行表达式" class="headerlink" title="2.4、行表达式"></a>2.4、行表达式</h3><p>优化上一步的分片表配置</p><p><a href="https://shardingsphere.apache.org/document/5.1.1/cn/features/sharding/concept/inline-expression/">https://shardingsphere.apache.org/document/5.1.1/cn/features/sharding/concept/inline-expression/</a></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#========================标准分片表配置（数据节点配置）</span></span><br><span class="line"><span class="comment"># spring.shardingsphere.rules.sharding.tables.&lt;table-name&gt;.actual-data-nodes=值</span></span><br><span class="line"><span class="comment"># 值由数据源名 + 表名组成，以小数点分隔。多个表以逗号分隔，支持 inline 表达式。</span></span><br><span class="line"><span class="comment"># &lt;table-name&gt;：逻辑表名</span></span><br><span class="line"><span class="attr">spring.shardingsphere.rules.sharding.tables.t_user.actual-data-nodes</span>=<span class="string">server-user.t_user</span></span><br><span class="line"><span class="attr">spring.shardingsphere.rules.sharding.tables.t_order.actual-data-nodes</span>=<span class="string">server-order$-&gt;&#123;0..1&#125;.t_order$-&gt;&#123;0..1&#125;</span></span><br></pre></td></tr></table></figure><h3 id="2-5、分片算法配置"><a href="#2-5、分片算法配置" class="headerlink" title="2.5、分片算法配置"></a>2.5、分片算法配置</h3><p><strong>水平分库：</strong></p><p>分片规则：order表中<code>user_id</code>为偶数时，数据插入<code>server-order0服务器</code>，<code>user_id</code>为奇数时，数据插入<code>server-order1服务器</code>。这样分片的好处是，同一个用户的订单数据，一定会被插入到同一台服务器上，查询一个用户的订单时效率较高。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#------------------------分库策略</span></span><br><span class="line"><span class="comment"># 分片列名称</span></span><br><span class="line"><span class="attr">spring.shardingsphere.rules.sharding.tables.t_order.database-strategy.standard.sharding-column</span>=<span class="string">user_id</span></span><br><span class="line"><span class="comment"># 分片算法名称</span></span><br><span class="line"><span class="attr">spring.shardingsphere.rules.sharding.tables.t_order.database-strategy.standard.sharding-algorithm-name</span>=<span class="string">alg_inline_userid</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#------------------------分片算法配置</span></span><br><span class="line"><span class="comment"># 行表达式分片算法</span></span><br><span class="line"><span class="comment"># 分片算法类型</span></span><br><span class="line"><span class="attr">spring.shardingsphere.rules.sharding.sharding-algorithms.alg_inline_userid.type</span>=<span class="string">INLINE</span></span><br><span class="line"><span class="comment"># 分片算法属性配置</span></span><br><span class="line"><span class="attr">spring.shardingsphere.rules.sharding.sharding-algorithms.alg_inline_userid.props.algorithm-expression</span>=<span class="string">server-order$-&gt;&#123;user_id % 2&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 取模分片算法</span></span><br><span class="line"><span class="comment"># 分片算法类型</span></span><br><span class="line"><span class="attr">spring.shardingsphere.rules.sharding.sharding-algorithms.alg_mod.type</span>=<span class="string">MOD</span></span><br><span class="line"><span class="comment"># 分片算法属性配置</span></span><br><span class="line"><span class="attr">spring.shardingsphere.rules.sharding.sharding-algorithms.alg_mod.props.sharding-count</span>=<span class="string">2</span></span><br></pre></td></tr></table></figure><p>为了方便测试，先设置只在 <code>t_order0</code>表上进行测试</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">xxx.actual-data-nodes</span>=<span class="string">server-order$-&gt;&#123;0..1&#125;.t_order0</span></span><br></pre></td></tr></table></figure><p>测试：可以分别测试行表达式分片算法和取模分片算法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 水平分片：分库插入数据测试</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsertOrderDatabaseStrategy</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">long</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Order</span>();</span><br><span class="line">        order.setOrderNo(<span class="string">&quot;xiaofei001&quot;</span>);</span><br><span class="line">        order.setUserId(i + <span class="number">1</span>);</span><br><span class="line">        order.setAmount(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="number">100</span>));</span><br><span class="line">        orderMapper.insert(order);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>水平分表：</strong></p><p>分片规则：order表中<code>order_no的哈希值为偶数时</code>，数据插入对应服务器的<code>t_order0表</code>，<code>order_no的哈希值为奇数时</code>，数据插入对应服务器的<code>t_order1表</code>。因为order_no是字符串形式，因此不能直接取模。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#------------------------分表策略</span></span><br><span class="line"><span class="comment"># 分片列名称</span></span><br><span class="line"><span class="attr">spring.shardingsphere.rules.sharding.tables.t_order.table-strategy.standard.sharding-column</span>=<span class="string">order_no</span></span><br><span class="line"><span class="comment"># 分片算法名称</span></span><br><span class="line"><span class="attr">spring.shardingsphere.rules.sharding.tables.t_order.table-strategy.standard.sharding-algorithm-name</span>=<span class="string">alg_hash_mod</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#------------------------分片算法配置</span></span><br><span class="line"><span class="comment"># 哈希取模分片算法</span></span><br><span class="line"><span class="comment"># 分片算法类型</span></span><br><span class="line"><span class="attr">spring.shardingsphere.rules.sharding.sharding-algorithms.alg_hash_mod.type</span>=<span class="string">HASH_MOD</span></span><br><span class="line"><span class="comment"># 分片算法属性配置</span></span><br><span class="line"><span class="attr">spring.shardingsphere.rules.sharding.sharding-algorithms.alg_hash_mod.props.sharding-count</span>=<span class="string">2</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>测试前不要忘记将如下节点改回原来的状态</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">xxx.actual-data-nodes</span>=<span class="string">server-order$-&gt;&#123;0..1&#125;.t_order$-&gt;&#123;0..1&#125;</span></span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 水平分片：分表插入数据测试</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsertOrderTableStrategy</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">long</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Order</span>();</span><br><span class="line">        order.setOrderNo(<span class="string">&quot;xiaofei&quot;</span> + i);</span><br><span class="line">        order.setUserId(<span class="number">1L</span>);</span><br><span class="line">        order.setAmount(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="number">100</span>));</span><br><span class="line">        orderMapper.insert(order);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">long</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">5</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Order</span>();</span><br><span class="line">        order.setOrderNo(<span class="string">&quot;xiaofei&quot;</span> + i);</span><br><span class="line">        order.setUserId(<span class="number">2L</span>);</span><br><span class="line">        order.setAmount(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="number">100</span>));</span><br><span class="line">        orderMapper.insert(order);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试哈希取模</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testHash</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注意hash取模的结果是整个字符串hash后再取模，和数值后缀是奇数还是偶数无关</span></span><br><span class="line">    System.out.println(<span class="string">&quot;xiaofei001&quot;</span>.hashCode() % <span class="number">2</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;xiaofei0011&quot;</span>.hashCode() % <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>查询测试：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 水平分片：查询所有记录</span></span><br><span class="line"><span class="comment">     * 查询了两个数据源，每个数据源中使用UNION ALL连接两个表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testShardingSelectAll</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    List&lt;Order&gt; orders = orderMapper.selectList(<span class="literal">null</span>);</span><br><span class="line">    orders.forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 水平分片：根据user_id查询记录</span></span><br><span class="line"><span class="comment">     * 查询了一个数据源，每个数据源中使用UNION ALL连接两个表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testShardingSelectByUserId</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    QueryWrapper&lt;Order&gt; orderQueryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    orderQueryWrapper.eq(<span class="string">&quot;user_id&quot;</span>, <span class="number">1L</span>);</span><br><span class="line">    List&lt;Order&gt; orders = orderMapper.selectList(orderQueryWrapper);</span><br><span class="line">    orders.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-6、分布式序列算法"><a href="#2-6、分布式序列算法" class="headerlink" title="2.6、分布式序列算法"></a>2.6、分布式序列算法</h3><p><strong>雪花算法：</strong></p><p><a href="https://shardingsphere.apache.org/document/5.1.1/cn/features/sharding/concept/key-generator/">https://shardingsphere.apache.org/document/5.1.1/cn/features/sharding/concept/key-generator/</a></p><p>水平分片需要关注全局序列，因为不能简单的使用基于数据库的主键自增。</p><p>这里有两种方案：一种是基于MyBatisPlus的id策略；一种是ShardingSphere-JDBC的全局序列配置。</p><p><code>基于MyBatisPlus的id策略：</code>将Order类的id设置成如下形式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableId(type = IdType.ASSIGN_ID)</span></span><br><span class="line"><span class="keyword">private</span> Long id;</span><br></pre></td></tr></table></figure><p><code>基于ShardingSphere-JDBC的全局序列配置</code>：和前面的MyBatisPlus的策略二选一</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#------------------------分布式序列策略配置</span></span><br><span class="line"><span class="comment"># 分布式序列列名称</span></span><br><span class="line"><span class="attr">spring.shardingsphere.rules.sharding.tables.t_order.key-generate-strategy.column</span>=<span class="string">id</span></span><br><span class="line"><span class="comment"># 分布式序列算法名称</span></span><br><span class="line"><span class="attr">spring.shardingsphere.rules.sharding.tables.t_order.key-generate-strategy.key-generator-name</span>=<span class="string">alg_snowflake</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 分布式序列算法配置</span></span><br><span class="line"><span class="comment"># 分布式序列算法类型</span></span><br><span class="line"><span class="attr">spring.shardingsphere.rules.sharding.key-generators.alg_snowflake.type</span>=<span class="string">SNOWFLAKE</span></span><br><span class="line"><span class="comment"># 分布式序列算法属性配置</span></span><br><span class="line"><span class="comment">#spring.shardingsphere.rules.sharding.key-generators.alg_snowflake.props.xxx=</span></span><br></pre></td></tr></table></figure><p>此时，需要将实体类中的id策略修改成以下形式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当配置了shardingsphere-jdbc的分布式序列时，自动使用shardingsphere-jdbc的分布式序列</span></span><br><span class="line"><span class="comment">//当没有配置shardingsphere-jdbc的分布式序列时，自动依赖数据库的主键自增策略</span></span><br><span class="line"><span class="meta">@TableId(type = IdType.AUTO)</span></span><br></pre></td></tr></table></figure><h2 id="3、多表关联"><a href="#3、多表关联" class="headerlink" title="3、多表关联"></a>3、多表关联</h2><h3 id="3-1、创建关联表"><a href="#3-1、创建关联表" class="headerlink" title="3.1、创建关联表"></a>3.1、创建关联表</h3><p>在<code>server-order0、server-order1</code>服务器中分别创建两张订单详情表<code>t_order_item0、t_order_item1</code></p><p>我们希望<code>同一个用户的订单表和订单详情表中的数据都在同一个数据源中，避免跨库关联</code>，因此这两张表我们使用相同的分片策略。</p><p>那么在<code>t_order_item</code>中我们也需要创建<code>order_no</code>和<code>user_id</code>这两个分片键</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_order_item0(</span><br><span class="line">    id <span class="type">BIGINT</span>,</span><br><span class="line">    order_no <span class="type">VARCHAR</span>(<span class="number">30</span>),</span><br><span class="line">    user_id <span class="type">BIGINT</span>,</span><br><span class="line">    price <span class="type">DECIMAL</span>(<span class="number">10</span>,<span class="number">2</span>),</span><br><span class="line">    `count` <span class="type">INT</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY(id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_order_item1(</span><br><span class="line">    id <span class="type">BIGINT</span>,</span><br><span class="line">    order_no <span class="type">VARCHAR</span>(<span class="number">30</span>),</span><br><span class="line">    user_id <span class="type">BIGINT</span>,</span><br><span class="line">    price <span class="type">DECIMAL</span>(<span class="number">10</span>,<span class="number">2</span>),</span><br><span class="line">    `count` <span class="type">INT</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY(id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="3-2、创建实体类"><a href="#3-2、创建实体类" class="headerlink" title="3.2、创建实体类"></a>3.2、创建实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaofei.shardingjdbcdemo.entity;</span><br><span class="line"></span><br><span class="line"><span class="meta">@TableName(&quot;t_order_item&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderItem</span> &#123;</span><br><span class="line">    <span class="comment">//当配置了shardingsphere-jdbc的分布式序列时，自动使用shardingsphere-jdbc的分布式序列</span></span><br><span class="line">    <span class="meta">@TableId(type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String orderNo;</span><br><span class="line">    <span class="keyword">private</span> Long userId;</span><br><span class="line">    <span class="keyword">private</span> BigDecimal price;</span><br><span class="line">    <span class="keyword">private</span> Integer count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3、创建Mapper"><a href="#3-3、创建Mapper" class="headerlink" title="3.3、创建Mapper"></a>3.3、创建Mapper</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaofei.shargingjdbcdemo.mapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OrderItemMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;OrderItem&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4、配置关联表"><a href="#3-4、配置关联表" class="headerlink" title="3.4、配置关联表"></a>3.4、配置关联表</h3><p>t_order_item的分片表、分片策略、分布式序列策略和t_order一致</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#------------------------标准分片表配置（数据节点配置）</span></span><br><span class="line"><span class="attr">spring.shardingsphere.rules.sharding.tables.t_order_item.actual-data-nodes</span>=<span class="string">server-order$-&gt;&#123;0..1&#125;.t_order_item$-&gt;&#123;0..1&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#------------------------分库策略</span></span><br><span class="line"><span class="comment"># 分片列名称</span></span><br><span class="line"><span class="attr">spring.shardingsphere.rules.sharding.tables.t_order_item.database-strategy.standard.sharding-column</span>=<span class="string">user_id</span></span><br><span class="line"><span class="comment"># 分片算法名称</span></span><br><span class="line"><span class="attr">spring.shardingsphere.rules.sharding.tables.t_order_item.database-strategy.standard.sharding-algorithm-name</span>=<span class="string">alg_mod</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#------------------------分表策略</span></span><br><span class="line"><span class="comment"># 分片列名称</span></span><br><span class="line"><span class="attr">spring.shardingsphere.rules.sharding.tables.t_order_item.table-strategy.standard.sharding-column</span>=<span class="string">order_no</span></span><br><span class="line"><span class="comment"># 分片算法名称</span></span><br><span class="line"><span class="attr">spring.shardingsphere.rules.sharding.tables.t_order_item.table-strategy.standard.sharding-algorithm-name</span>=<span class="string">alg_hash_mod</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#------------------------分布式序列策略配置</span></span><br><span class="line"><span class="comment"># 分布式序列列名称</span></span><br><span class="line"><span class="attr">spring.shardingsphere.rules.sharding.tables.t_order_item.key-generate-strategy.column</span>=<span class="string">id</span></span><br><span class="line"><span class="comment"># 分布式序列算法名称</span></span><br><span class="line"><span class="attr">spring.shardingsphere.rules.sharding.tables.t_order_item.key-generate-strategy.key-generator-name</span>=<span class="string">alg_snowflake</span></span><br></pre></td></tr></table></figure><h3 id="3-5、测试插入数据"><a href="#3-5、测试插入数据" class="headerlink" title="3.5、测试插入数据"></a>3.5、测试插入数据</h3><p>同一个用户的订单表和订单详情表中的数据都在同一个数据源中，避免跨库关联</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试关联表插入</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsertOrderAndOrderItem</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">long</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Order</span>();</span><br><span class="line">        order.setOrderNo(<span class="string">&quot;xiaofei&quot;</span> + i);</span><br><span class="line">        order.setUserId(<span class="number">1L</span>);</span><br><span class="line">        orderMapper.insert(order);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">long</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">            <span class="type">OrderItem</span> <span class="variable">orderItem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrderItem</span>();</span><br><span class="line">            orderItem.setOrderNo(<span class="string">&quot;xiaofei&quot;</span> + i);</span><br><span class="line">            orderItem.setUserId(<span class="number">1L</span>);</span><br><span class="line">            orderItem.setPrice(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="number">10</span>));</span><br><span class="line">            orderItem.setCount(<span class="number">2</span>);</span><br><span class="line">            orderItemMapper.insert(orderItem);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">long</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">5</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Order</span>();</span><br><span class="line">        order.setOrderNo(<span class="string">&quot;xiaofei&quot;</span> + i);</span><br><span class="line">        order.setUserId(<span class="number">2L</span>);</span><br><span class="line">        orderMapper.insert(order);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">long</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">            <span class="type">OrderItem</span> <span class="variable">orderItem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrderItem</span>();</span><br><span class="line">            orderItem.setOrderNo(<span class="string">&quot;xiaofei&quot;</span> + i);</span><br><span class="line">            orderItem.setUserId(<span class="number">2L</span>);</span><br><span class="line">            orderItem.setPrice(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="number">1</span>));</span><br><span class="line">            orderItem.setCount(<span class="number">3</span>);</span><br><span class="line">            orderItemMapper.insert(orderItem);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、绑定表"><a href="#4、绑定表" class="headerlink" title="4、绑定表"></a>4、绑定表</h2><p><strong>需求：</strong>查询每个订单的订单号和总订单金额</p><h3 id="4-1、创建VO对象"><a href="#4-1、创建VO对象" class="headerlink" title="4.1、创建VO对象"></a>4.1、创建VO对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaofei.shardingjdbcdemo.entity;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderVo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String orderNo;</span><br><span class="line">    <span class="keyword">private</span> BigDecimal amount;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2、添加Mapper方法"><a href="#4-2、添加Mapper方法" class="headerlink" title="4.2、添加Mapper方法"></a>4.2、添加Mapper方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaofei.shardingjdbcdemo.mapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OrderMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Order&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&#123;&quot;SELECT o.order_no, SUM(i.price * i.count) AS amount&quot;,</span></span><br><span class="line"><span class="meta">            &quot;FROM t_order o JOIN t_order_item i ON o.order_no = i.order_no&quot;,</span></span><br><span class="line"><span class="meta">            &quot;GROUP BY o.order_no&quot;&#125;)</span></span><br><span class="line">    List&lt;OrderVo&gt; <span class="title function_">getOrderAmount</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3、测试关联查询"><a href="#4-3、测试关联查询" class="headerlink" title="4.3、测试关联查询"></a>4.3、测试关联查询</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试关联表查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetOrderAmount</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    List&lt;OrderVo&gt; orderAmountList = orderMapper.getOrderAmount();</span><br><span class="line">    orderAmountList.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4、配置绑定表"><a href="#4-4、配置绑定表" class="headerlink" title="4.4、配置绑定表"></a>4.4、配置绑定表</h3><p>在原来水平分片配置的基础上添加如下配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#------------------------绑定表</span></span><br><span class="line"><span class="attr">spring.shardingsphere.rules.sharding.binding-tables[0]</span>=<span class="string">t_order,t_order_item</span></span><br></pre></td></tr></table></figure><p>配置完绑定表后再次进行关联查询的测试：</p><ul><li><p><strong>如果不配置绑定表：测试的结果为8个SQL。</strong>多表关联查询会出现笛卡尔积关联。</p></li><li><p><strong>如果配置绑定表：测试的结果为4个SQL。</strong> 多表关联查询不会出现笛卡尔积关联，关联查询效率将大大提升。</p></li></ul><p><code>绑定表：</code>指分片规则一致的一组分片表。 使用绑定表进行多表关联查询时，必须使用分片键进行关联，否则会出现笛卡尔积关联或跨库关联，从而影响查询效率。</p><h2 id="5、广播表"><a href="#5、广播表" class="headerlink" title="5、广播表"></a>5、广播表</h2><h3 id="4-1、什么是广播表"><a href="#4-1、什么是广播表" class="headerlink" title="4.1、什么是广播表"></a>4.1、什么是广播表</h3><p>指所有的分片数据源中都存在的表，表结构及其数据在每个数据库中均完全一致。 适用于数据量不大且需要与海量数据的表进行关联查询的场景，例如：字典表。</p><p>广播具有以下特性：</p><p>（1）插入、更新操作会实时在所有节点上执行，保持各个分片的数据一致性</p><p>（2）查询操作，只从一个节点获取</p><p>（3）可以跟任何一个表进行 JOIN 操作</p><h3 id="4-2、创建广播表"><a href="#4-2、创建广播表" class="headerlink" title="4.2、创建广播表"></a>4.2、创建广播表</h3><p>在server-order0、server-order1和server-user服务器中分别创建t_dict表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_dict(</span><br><span class="line">    id <span class="type">BIGINT</span>,</span><br><span class="line">    dict_type <span class="type">VARCHAR</span>(<span class="number">200</span>),</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY(id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="4-3、程序实现"><a href="#4-3、程序实现" class="headerlink" title="4.3、程序实现"></a>4.3、程序实现</h3><h4 id="4-3-1、创建实体类"><a href="#4-3-1、创建实体类" class="headerlink" title="4.3.1、创建实体类"></a>4.3.1、创建实体类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaofei.shardingjdbcdemo.entity;</span><br><span class="line"></span><br><span class="line"><span class="meta">@TableName(&quot;t_dict&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dict</span> &#123;</span><br><span class="line">    <span class="comment">//可以使用MyBatisPlus的雪花算法</span></span><br><span class="line">    <span class="meta">@TableId(type = IdType.ASSIGN_ID)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String dictType;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-3-2、创建Mapper"><a href="#4-3-2、创建Mapper" class="headerlink" title="4.3.2、创建Mapper"></a>4.3.2、创建Mapper</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaofei.shardingjdbcdemo.mapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DictMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Dict&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-3-3、配置广播表"><a href="#4-3-3、配置广播表" class="headerlink" title="4.3.3、配置广播表"></a>4.3.3、配置广播表</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#数据节点可不配置，默认情况下，向所有数据源广播</span></span><br><span class="line"><span class="attr">spring.shardingsphere.rules.sharding.tables.t_dict.actual-data-nodes</span>=<span class="string">server-user.t_dict,server-order$-&gt;&#123;0..1&#125;.t_dict</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 广播表</span></span><br><span class="line"><span class="attr">spring.shardingsphere.rules.sharding.broadcast-tables[0]</span>=<span class="string">t_dict</span></span><br></pre></td></tr></table></figure><h3 id="4-4、测试广播表"><a href="#4-4、测试广播表" class="headerlink" title="4.4、测试广播表"></a>4.4、测试广播表</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> DictMapper dictMapper;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 广播表：每个服务器中的t_dict同时添加了新数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testBroadcast</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">Dict</span> <span class="variable">dict</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dict</span>();</span><br><span class="line">    dict.setDictType(<span class="string">&quot;type1&quot;</span>);</span><br><span class="line">    dictMapper.insert(dict);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询操作，只从一个节点获取数据</span></span><br><span class="line"><span class="comment">     * 随机负载均衡规则</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectBroadcast</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    List&lt;Dict&gt; dicts = dictMapper.selectList(<span class="literal">null</span>);</span><br><span class="line">    dicts.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第07章-启动ShardingSphere-Proxy"><a href="#第07章-启动ShardingSphere-Proxy" class="headerlink" title="第07章 启动ShardingSphere-Proxy"></a>第07章 启动ShardingSphere-Proxy</h1><h2 id="1、获取"><a href="#1、获取" class="headerlink" title="1、获取"></a>1、获取</h2><p>目前 ShardingSphere-Proxy 提供了 3 种获取方式：</p><ul><li><a href="https://shardingsphere.apache.org/document/5.1.1/cn/user-manual/shardingsphere-proxy/startup/bin/">二进制发布包</a></li><li><a href="https://shardingsphere.apache.org/document/5.1.1/cn/user-manual/shardingsphere-proxy/startup/docker/">Docker</a></li><li><a href="https://shardingsphere.apache.org/document/5.1.1/cn/user-manual/shardingsphere-proxy/startup/helm/">Helm</a></li></ul><h2 id="2、使用二进制发布包安装"><a href="#2、使用二进制发布包安装" class="headerlink" title="2、使用二进制发布包安装"></a>2、使用二进制发布包安装</h2><p>二进制包既可以Linux系统运行，又可以在windows系统运行</p><p><strong>step1：解压二进制包</strong></p><p><code>apache-shardingsphere-5.1.1-shardingsphere-proxy-bin.tar.gz</code></p><p>windows：使用解压软件解压文件</p><p>Linux：将文件上传至/opt目录，并解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf apache-shardingsphere-5.1.1-shardingsphere-proxy-bin.tar.gz</span><br></pre></td></tr></table></figure><p><strong>step2：MySQL驱动</strong></p><p><code>mysql-connector-java-8.0.22.jar</code></p><p>将MySQl驱动放至解压目录中的<code>ext-lib</code>目录</p><p><strong>spte3：修改配置conf/server.yaml</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="type">!AUTHORITY</span></span><br><span class="line">    <span class="attr">users:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">root@%:root</span></span><br><span class="line">    <span class="attr">provider:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">ALL_PRIVILEGES_PERMITTED</span></span><br><span class="line"></span><br><span class="line"><span class="attr">props:</span></span><br><span class="line">  <span class="attr">sql-show:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><strong>spte4：启动ShardingSphere-Proxy</strong></p><p>Linux 操作系统请运行 <code>bin/start.sh</code></p><p>Windows 操作系统请运行 <code>bin/start.bat</code> </p><p>指定端口号和配置文件目录：<code>bin/start.bat $&#123;proxy_port&#125; $&#123;proxy_conf_directory&#125;</code> </p><p><strong>step5：远程连接ShardingSphere-Proxy</strong></p><p>远程访问</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -h192.168.100.1 -P3307 -uroot -p</span><br></pre></td></tr></table></figure><p><strong>step6：访问测试</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> databases;</span><br></pre></td></tr></table></figure><p><img src="https://www.naste.top:9000/images/image-20220819152009158.png" alt="image-20220819152009158"></p><h2 id="3、使用Docker安装"><a href="#3、使用Docker安装" class="headerlink" title="3、使用Docker安装"></a>3、使用Docker安装</h2><p><strong>step1：启动Docker容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">-v /xiaofei/server/proxy-a/conf:/opt/shardingsphere-proxy/conf \</span><br><span class="line">-v /xiaofei/server/proxy-a/ext-lib:/opt/shardingsphere-proxy/ext-lib \</span><br><span class="line">-e ES_JAVA_OPTS=&quot;-Xmx256m -Xms256m -Xmn128m&quot; \</span><br><span class="line">-p 3321:3307 \</span><br><span class="line">--name server-proxy-a \</span><br><span class="line">apache/shardingsphere-proxy:5.1.1</span><br></pre></td></tr></table></figure><p><strong>step2：上传MySQL驱动</strong></p><p>将MySQl驱动上传至<code>/xiaofei/server/proxy-a/ext-lib</code>目录</p><p><strong>spte3：修改配置server.yaml</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="type">!AUTHORITY</span></span><br><span class="line">    <span class="attr">users:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">root@%:root</span></span><br><span class="line">    <span class="attr">provider:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">ALL_PRIVILEGES_PERMITTED</span></span><br><span class="line"></span><br><span class="line"><span class="attr">props:</span></span><br><span class="line">  <span class="attr">sql-show:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>将配置文件上传至<code>/xiaofei/server/proxy-a/conf</code>目录</p><p><strong>spte4：重启容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart server-proxy-a</span><br></pre></td></tr></table></figure><p><strong>step5：远程连接ShardingSphere-Proxy</strong></p><p>ShardingSphere-Proxy容器中默认情况下没有mysql命令行客户端的安装，因此需要远程访问</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -h192.168.100.201 -P3321 -uroot -p</span><br></pre></td></tr></table></figure><p><strong>step6：访问测试</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> databases;</span><br></pre></td></tr></table></figure><p><img src="https://www.naste.top:9000/images/image-20220819152009158.png" alt="image-20220819152009158"></p><p><strong>常见问题：docker容器无法远程连接</strong></p><p>容器可以成功的创建并启动，但是无法远程连接。排除防火墙和网络等问题后，看看是不是因为容器内存不足导致。</p><p><code>原因：</code>容器可分配内存不足</p><p><code>查看办法：</code>进入容器后查看ShardingSphere-Proxy的日志，如有有<code>cannot allocate memory</code>，则说明容器内存不足</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it server-proxy-a env LANG=C.UTF-8 /bin/bash</span><br><span class="line">cd /opt/shardingsphere-proxy/logs</span><br><span class="line">tail stdout.log </span><br></pre></td></tr></table></figure><p><img src="https://www.naste.top:9000/images/image-20220819151154763.png" alt="image-20220819151154763"></p><p><code>解决方案：</code>创建容器的时候使用JVM参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-e ES_JAVA_OPTS=&quot;-Xmx256m -Xms256m -Xmn128m&quot;</span><br></pre></td></tr></table></figure><h1 id="第08章-ShardingSphere-Proxy读写分离"><a href="#第08章-ShardingSphere-Proxy读写分离" class="headerlink" title="第08章 ShardingSphere-Proxy读写分离"></a>第08章 ShardingSphere-Proxy读写分离</h1><h2 id="1、修改配置文件"><a href="#1、修改配置文件" class="headerlink" title="1、修改配置文件"></a>1、修改配置文件</h2><p><strong>修改配置config-readwrite-splitting.yaml</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">schemaName:</span> <span class="string">readwrite_splitting_db</span></span><br><span class="line"></span><br><span class="line"><span class="attr">dataSources:</span></span><br><span class="line">  <span class="attr">write_ds:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.100.201:3306/db_user?serverTimezone=UTC&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">connectionTimeoutMilliseconds:</span> <span class="number">30000</span></span><br><span class="line">    <span class="attr">idleTimeoutMilliseconds:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">maxLifetimeMilliseconds:</span> <span class="number">1800000</span></span><br><span class="line">    <span class="attr">maxPoolSize:</span> <span class="number">50</span></span><br><span class="line">    <span class="attr">minPoolSize:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">read_ds_0:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.100.201:3307/db_user?serverTimezone=UTC&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">connectionTimeoutMilliseconds:</span> <span class="number">30000</span></span><br><span class="line">    <span class="attr">idleTimeoutMilliseconds:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">maxLifetimeMilliseconds:</span> <span class="number">1800000</span></span><br><span class="line">    <span class="attr">maxPoolSize:</span> <span class="number">50</span></span><br><span class="line">    <span class="attr">minPoolSize:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">read_ds_1:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.100.201:3308/db_user?serverTimezone=UTC&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">connectionTimeoutMilliseconds:</span> <span class="number">30000</span></span><br><span class="line">    <span class="attr">idleTimeoutMilliseconds:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">maxLifetimeMilliseconds:</span> <span class="number">1800000</span></span><br><span class="line">    <span class="attr">maxPoolSize:</span> <span class="number">50</span></span><br><span class="line">    <span class="attr">minPoolSize:</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line"><span class="bullet">-</span> <span class="type">!READWRITE_SPLITTING</span></span><br><span class="line">  <span class="attr">dataSources:</span></span><br><span class="line">    <span class="attr">readwrite_ds:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">Static</span></span><br><span class="line">      <span class="attr">props:</span></span><br><span class="line">        <span class="attr">write-data-source-name:</span> <span class="string">write_ds</span></span><br><span class="line">        <span class="attr">read-data-source-names:</span> <span class="string">read_ds_0,read_ds_1</span></span><br></pre></td></tr></table></figure><p>将配置文件上传至<code>/xiaofei/server/proxy-a/conf</code>目录</p><p><strong>重启容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart server-proxy-a</span><br></pre></td></tr></table></figure><h2 id="2、实时查看日志"><a href="#2、实时查看日志" class="headerlink" title="2、实时查看日志"></a>2、实时查看日志</h2><p>可以通过这种方式查看服务器中输出的SQL语句</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it server-proxy-a env LANG=C.UTF-8 /bin/bash</span><br><span class="line">tail -f /opt/shardingsphere-proxy/logs/stdout.log </span><br></pre></td></tr></table></figure><h2 id="3、远程访问测试"><a href="#3、远程访问测试" class="headerlink" title="3、远程访问测试"></a>3、远程访问测试</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> databases;</span><br><span class="line">mysql<span class="operator">&gt;</span> use readwrite_splitting_db;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> tables;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> t_user(uname) <span class="keyword">values</span>(<span class="string">&#x27;wang5&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="4、应用程序访问Proxy"><a href="#4、应用程序访问Proxy" class="headerlink" title="4、应用程序访问Proxy"></a>4、应用程序访问Proxy</h2><h3 id="4-1、创建项目"><a href="#4-1、创建项目" class="headerlink" title="4.1、创建项目"></a>4.1、创建项目</h3><p>项目类型：Spring Initializr</p><p>SpringBoot脚手架：<a href="http://start.aliyun.com">http://start.aliyun.com</a></p><p>项目名：sharding-proxy-demo</p><p>SpringBoot版本：2.3.7.RELEASE</p><h3 id="4-2、添加依赖"><a href="#4-2、添加依赖" class="headerlink" title="4.2、添加依赖"></a>4.2、添加依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-3、创建实体类"><a href="#4-3、创建实体类" class="headerlink" title="4.3、创建实体类"></a>4.3、创建实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaofei.shardingproxydemo.entity;</span><br><span class="line"></span><br><span class="line"><span class="meta">@TableName(&quot;t_user&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@TableId(type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String uname;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-4、创建Mapper"><a href="#4-4、创建Mapper" class="headerlink" title="4.4、创建Mapper"></a>4.4、创建Mapper</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaofei.shardingproxydemo.mapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-5、配置数据源"><a href="#4-5、配置数据源" class="headerlink" title="4.5、配置数据源"></a>4.5、配置数据源</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 应用名称</span></span><br><span class="line"><span class="attr">spring.application.name</span>=<span class="string">sharding-proxy-demo</span></span><br><span class="line"><span class="comment"># 开发环境设置</span></span><br><span class="line"><span class="attr">spring.profiles.active</span>=<span class="string">dev</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#mysql数据库连接（proxy）</span></span><br><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://192.168.100.201:3321/readwrite_splitting_db?serverTimezone=GMT%2B8&amp;useSSL=false</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">root</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#mybatis日志</span></span><br><span class="line"><span class="attr">mybatis-plus.configuration.log-impl</span>=<span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure><h3 id="4-6、测试"><a href="#4-6、测试" class="headerlink" title="4.6、测试"></a>4.6、测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaofei.shardingproxydemo;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ShardingProxyDemoApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读数据测试</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectAll</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;User&gt; users = userMapper.selectList(<span class="literal">null</span>);</span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第09章-ShardingSphere-Proxy垂直分片"><a href="#第09章-ShardingSphere-Proxy垂直分片" class="headerlink" title="第09章 ShardingSphere-Proxy垂直分片"></a>第09章 ShardingSphere-Proxy垂直分片</h1><h2 id="1、修改配置文件-1"><a href="#1、修改配置文件-1" class="headerlink" title="1、修改配置文件"></a>1、修改配置文件</h2><p><strong>修改配置config-sharding.yaml</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">schemaName:</span> <span class="string">sharding_db</span></span><br><span class="line"></span><br><span class="line"><span class="attr">dataSources:</span></span><br><span class="line">  <span class="attr">ds_0:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.100.201:3301/db_user?serverTimezone=UTC&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">connectionTimeoutMilliseconds:</span> <span class="number">30000</span></span><br><span class="line">    <span class="attr">idleTimeoutMilliseconds:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">maxLifetimeMilliseconds:</span> <span class="number">1800000</span></span><br><span class="line">    <span class="attr">maxPoolSize:</span> <span class="number">50</span></span><br><span class="line">    <span class="attr">minPoolSize:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">ds_1:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.100.201:3302/db_order?serverTimezone=UTC&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">connectionTimeoutMilliseconds:</span> <span class="number">30000</span></span><br><span class="line">    <span class="attr">idleTimeoutMilliseconds:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">maxLifetimeMilliseconds:</span> <span class="number">1800000</span></span><br><span class="line">    <span class="attr">maxPoolSize:</span> <span class="number">50</span></span><br><span class="line">    <span class="attr">minPoolSize:</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line"><span class="bullet">-</span> <span class="type">!SHARDING</span></span><br><span class="line">  <span class="attr">tables:</span></span><br><span class="line">    <span class="attr">t_user:</span></span><br><span class="line">      <span class="attr">actualDataNodes:</span> <span class="string">ds_0.t_user</span></span><br><span class="line">    <span class="attr">t_order:</span></span><br><span class="line">      <span class="attr">actualDataNodes:</span> <span class="string">ds_1.t_order</span></span><br></pre></td></tr></table></figure><h2 id="2、实时查看日志-1"><a href="#2、实时查看日志-1" class="headerlink" title="2、实时查看日志"></a>2、实时查看日志</h2><p>可以通过这种方式查看服务器中输出的SQL语句</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it server-proxy-a env LANG=C.UTF-8 /bin/bash</span><br><span class="line">tail -f /opt/shardingsphere-proxy/logs/stdout.log </span><br></pre></td></tr></table></figure><h2 id="3、远程访问测试-1"><a href="#3、远程访问测试-1" class="headerlink" title="3、远程访问测试"></a>3、远程访问测试</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> databases;</span><br><span class="line">mysql<span class="operator">&gt;</span> use sharding_db;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> tables;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_order;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user;</span><br></pre></td></tr></table></figure><h1 id="第10章-ShardingSphere-Proxy水平分片"><a href="#第10章-ShardingSphere-Proxy水平分片" class="headerlink" title="第10章 ShardingSphere-Proxy水平分片"></a>第10章 ShardingSphere-Proxy水平分片</h1><h2 id="1、修改配置文件-2"><a href="#1、修改配置文件-2" class="headerlink" title="1、修改配置文件"></a>1、修改配置文件</h2><p><strong>修改配置config-sharding.yaml</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">schemaName:</span> <span class="string">sharding_db</span></span><br><span class="line"></span><br><span class="line"><span class="attr">dataSources:</span></span><br><span class="line">  <span class="attr">ds_user:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.100.201:3301/db_user?serverTimezone=UTC&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">connectionTimeoutMilliseconds:</span> <span class="number">30000</span></span><br><span class="line">    <span class="attr">idleTimeoutMilliseconds:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">maxLifetimeMilliseconds:</span> <span class="number">1800000</span></span><br><span class="line">    <span class="attr">maxPoolSize:</span> <span class="number">50</span></span><br><span class="line">    <span class="attr">minPoolSize:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">ds_order0:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.100.201:3310/db_order?serverTimezone=UTC&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">connectionTimeoutMilliseconds:</span> <span class="number">30000</span></span><br><span class="line">    <span class="attr">idleTimeoutMilliseconds:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">maxLifetimeMilliseconds:</span> <span class="number">1800000</span></span><br><span class="line">    <span class="attr">maxPoolSize:</span> <span class="number">50</span></span><br><span class="line">    <span class="attr">minPoolSize:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">ds_order1:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.100.201:3311/db_order?serverTimezone=UTC&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">connectionTimeoutMilliseconds:</span> <span class="number">30000</span></span><br><span class="line">    <span class="attr">idleTimeoutMilliseconds:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">maxLifetimeMilliseconds:</span> <span class="number">1800000</span></span><br><span class="line">    <span class="attr">maxPoolSize:</span> <span class="number">50</span></span><br><span class="line">    <span class="attr">minPoolSize:</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line"><span class="bullet">-</span> <span class="type">!SHARDING</span></span><br><span class="line">  <span class="attr">tables:</span></span><br><span class="line">    <span class="attr">t_user:</span></span><br><span class="line">      <span class="attr">actualDataNodes:</span> <span class="string">ds_user.t_user</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">t_order:</span></span><br><span class="line">      <span class="attr">actualDataNodes:</span> <span class="string">ds_order$&#123;0..1&#125;.t_order$&#123;0..1&#125;</span></span><br><span class="line">      <span class="attr">databaseStrategy:</span></span><br><span class="line">        <span class="attr">standard:</span></span><br><span class="line">          <span class="attr">shardingColumn:</span> <span class="string">user_id</span></span><br><span class="line">          <span class="attr">shardingAlgorithmName:</span> <span class="string">alg_mod</span></span><br><span class="line">      <span class="attr">tableStrategy:</span></span><br><span class="line">        <span class="attr">standard:</span></span><br><span class="line">          <span class="attr">shardingColumn:</span> <span class="string">order_no</span></span><br><span class="line">          <span class="attr">shardingAlgorithmName:</span> <span class="string">alg_hash_mod</span></span><br><span class="line">      <span class="attr">keyGenerateStrategy:</span></span><br><span class="line">        <span class="attr">column:</span> <span class="string">id</span></span><br><span class="line">        <span class="attr">keyGeneratorName:</span> <span class="string">snowflake</span></span><br><span class="line">    <span class="attr">t_order_item:</span></span><br><span class="line">      <span class="attr">actualDataNodes:</span> <span class="string">ds_order$&#123;0..1&#125;.t_order_item$&#123;0..1&#125;</span></span><br><span class="line">      <span class="attr">databaseStrategy:</span></span><br><span class="line">        <span class="attr">standard:</span></span><br><span class="line">          <span class="attr">shardingColumn:</span> <span class="string">user_id</span></span><br><span class="line">          <span class="attr">shardingAlgorithmName:</span> <span class="string">alg_mod</span></span><br><span class="line">      <span class="attr">tableStrategy:</span></span><br><span class="line">        <span class="attr">standard:</span></span><br><span class="line">          <span class="attr">shardingColumn:</span> <span class="string">order_no</span></span><br><span class="line">          <span class="attr">shardingAlgorithmName:</span> <span class="string">alg_hash_mod</span></span><br><span class="line">      <span class="attr">keyGenerateStrategy:</span></span><br><span class="line">        <span class="attr">column:</span> <span class="string">id</span></span><br><span class="line">        <span class="attr">keyGeneratorName:</span> <span class="string">snowflake</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">bindingTables:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">t_order,t_order_item</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="attr">broadcastTables:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">t_dict</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">shardingAlgorithms:</span></span><br><span class="line">    <span class="attr">alg_inline_userid:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">INLINE</span></span><br><span class="line">      <span class="attr">props:</span></span><br><span class="line">        <span class="attr">algorithm-expression:</span> <span class="string">server-order$-&gt;&#123;user_id</span> <span class="string">%</span> <span class="number">2</span><span class="string">&#125;</span></span><br><span class="line">    <span class="attr">alg_mod:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">MOD</span></span><br><span class="line">      <span class="attr">props:</span></span><br><span class="line">        <span class="attr">sharding-count:</span> <span class="number">2</span></span><br><span class="line">    <span class="attr">alg_hash_mod:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">HASH_MOD</span></span><br><span class="line">      <span class="attr">props:</span></span><br><span class="line">        <span class="attr">sharding-count:</span> <span class="number">2</span></span><br><span class="line">  </span><br><span class="line">  <span class="attr">keyGenerators:</span></span><br><span class="line">    <span class="attr">snowflake:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">SNOWFLAKE</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2、实时查看日志-2"><a href="#2、实时查看日志-2" class="headerlink" title="2、实时查看日志"></a>2、实时查看日志</h2><p>可以通过这种方式查看服务器中输出的SQL语句</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it server-proxy-a env LANG=C.UTF-8 /bin/bash</span><br><span class="line">tail -f /opt/shardingsphere-proxy/logs/stdout.log </span><br></pre></td></tr></table></figure><h2 id="3、远程访问测试-2"><a href="#3、远程访问测试-2" class="headerlink" title="3、远程访问测试"></a>3、远程访问测试</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> databases;</span><br><span class="line">mysql<span class="operator">&gt;</span> use sharding_db;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> tables;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_order; <span class="comment">--测试水平分片</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_dict; <span class="comment">--测试广播表</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">ShardingSphere</summary>
    
    
    
    <category term="Java" scheme="https://www.naste.top:1024/categories/Java/"/>
    
    
    <category term="Java" scheme="https://www.naste.top:1024/tags/Java/"/>
    
    <category term="MySQL" scheme="https://www.naste.top:1024/tags/MySQL/"/>
    
    <category term="SpringBoot" scheme="https://www.naste.top:1024/tags/SpringBoot/"/>
    
    <category term="ShardingSphere" scheme="https://www.naste.top:1024/tags/ShardingSphere/"/>
    
  </entry>
  
  <entry>
    <title>Hutool实现数据脱敏</title>
    <link href="https://www.naste.top:1024/posts/3224676358.html"/>
    <id>https://www.naste.top:1024/posts/3224676358.html</id>
    <published>2023-08-15T11:06:11.000Z</published>
    <updated>2023-08-23T14:54:48.152Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p>[TOC]</p><h1 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h1><blockquote><p><strong>Hutool 5.x支持JDK8+， 如果你的项目使用JDK7，请使用Hutool 4.x版本。本文使用的数据脱敏工具类只有在5.6+版本以上才提供。</strong></p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--hutool工具类--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.8.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Hutool支持的脱敏数据类型"><a href="#Hutool支持的脱敏数据类型" class="headerlink" title="Hutool支持的脱敏数据类型"></a>Hutool支持的脱敏数据类型</h1><ul><li><p>用户id</p></li><li><p>中文名</p></li><li><p>身份证号</p></li><li><p>座机号</p></li><li><p>手机号</p></li><li><p>地址</p></li><li><p>电子邮件</p></li><li><p>密码</p></li><li><p>中国大陆车牌，包含普通车辆、新能源车辆</p></li><li><p>银行卡</p></li><li><p>IPv4地址</p></li><li><p>IPv6地址</p></li><li><p>定义了一个first_mask的规则，只显示第一个字符。</p></li></ul><h1 id="Hutool数据脱敏实操"><a href="#Hutool数据脱敏实操" class="headerlink" title="Hutool数据脱敏实操"></a>Hutool数据脱敏实操</h1><h2 id="创建注解类"><a href="#创建注解类" class="headerlink" title="创建注解类"></a>创建注解类</h2><blockquote><p><strong>在实体类需要脱敏的字段上，使用该注解标注和指定脱敏的类型，数据则会在序列化的时候进行脱敏处理</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.hutool.core.util.DesensitizedUtil;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JacksonAnnotationsInside;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.annotation.JsonSerialize;</span><br><span class="line"><span class="keyword">import</span> com.xiaofei.encryption.config.DesensitizationSerialize;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数据脱敏使用注解，在需要脱敏的字段上添加该注解，然后配合自定义序列化，将数据进行脱敏</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(ElementType.FIELD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@JacksonAnnotationsInside</span></span><br><span class="line"><span class="meta">@JsonSerialize(using = DesensitizationSerialize.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Desensitization &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 脱敏数据类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    DesensitizedUtil.DesensitizedType <span class="title function_">type</span><span class="params">()</span> <span class="keyword">default</span> DesensitizedUtil.DesensitizedType.FIRST_MASK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建序列化配置类"><a href="#创建序列化配置类" class="headerlink" title="创建序列化配置类"></a>创建序列化配置类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.hutool.core.util.DesensitizedUtil;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonGenerator;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.BeanProperty;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.JsonMappingException;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.JsonSerializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.SerializerProvider;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ser.ContextualSerializer;</span><br><span class="line"><span class="keyword">import</span> com.xiaofei.encryption.annotation.Desensitization;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数据脱敏自定义序列化类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DesensitizationSerialize</span> <span class="keyword">extends</span> <span class="title class_">JsonSerializer</span>&lt;String&gt; <span class="keyword">implements</span> <span class="title class_">ContextualSerializer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> DesensitizedUtil.DesensitizedType type;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(String str, JsonGenerator jsonGenerator, SerializerProvider serializerProvider)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(str)) &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 匹配不同脱敏类型，对数据做不同的脱敏操作</span></span><br><span class="line">            <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">                <span class="keyword">case</span> USER_ID:</span><br><span class="line">                    str = String.valueOf(DesensitizedUtil.userId());</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> CHINESE_NAME:</span><br><span class="line">                    str = DesensitizedUtil.chineseName(str);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> ID_CARD:</span><br><span class="line">                    str = DesensitizedUtil.idCardNum(str, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> FIXED_PHONE:</span><br><span class="line">                    str = DesensitizedUtil.fixedPhone(str);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> MOBILE_PHONE:</span><br><span class="line">                    str = DesensitizedUtil.mobilePhone(str);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> ADDRESS:</span><br><span class="line">                    str = DesensitizedUtil.address(str, <span class="number">8</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> EMAIL:</span><br><span class="line">                    str = DesensitizedUtil.email(str);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> PASSWORD:</span><br><span class="line">                    str = DesensitizedUtil.password(str);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> CAR_LICENSE:</span><br><span class="line">                    str = DesensitizedUtil.carLicense(str);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> BANK_CARD:</span><br><span class="line">                    str = DesensitizedUtil.bankCard(str);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> IPV4:</span><br><span class="line">                    str = DesensitizedUtil.ipv4(str);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> IPV6:</span><br><span class="line">                    str = DesensitizedUtil.ipv6(str);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> FIRST_MASK:</span><br><span class="line">                    str = DesensitizedUtil.firstMask(str);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">            &#125;</span><br><span class="line">            jsonGenerator.writeString(str);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> JsonSerializer&lt;?&gt; createContextual(SerializerProvider serializerProvider, BeanProperty beanProperty) <span class="keyword">throws</span> JsonMappingException &#123;</span><br><span class="line">        <span class="keyword">if</span> (beanProperty != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 判断数据类型是否为String类型</span></span><br><span class="line">            <span class="keyword">if</span> (Objects.equals(beanProperty.getType().getRawClass(), String.class)) &#123;</span><br><span class="line">                <span class="comment">// 获取定义的注解</span></span><br><span class="line">                <span class="type">Desensitization</span> <span class="variable">desensitization</span> <span class="operator">=</span> beanProperty.getAnnotation(Desensitization.class);</span><br><span class="line">                <span class="comment">// 为null</span></span><br><span class="line">                <span class="keyword">if</span> (desensitization == <span class="literal">null</span>) &#123;</span><br><span class="line">                    desensitization = beanProperty.getContextAnnotation(Desensitization.class);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 不为null</span></span><br><span class="line">                <span class="keyword">if</span> (desensitization != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 创建定义的序列化类的实例并且返回，入参为注解定义的type,开始位置，结束位置。</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DesensitizationSerialize</span>(desensitization.type());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> serializerProvider.findValueSerializer(beanProperty.getType(), beanProperty);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> serializerProvider.findNullValueSerializer(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.hutool.core.util.DesensitizedUtil;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.annotation.ExcelProperty;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;</span><br><span class="line"><span class="keyword">import</span> com.xiaofei.encryption.annotation.Desensitization;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModel;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModelProperty;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.EqualsAndHashCode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = true)</span></span><br><span class="line"><span class="meta">@ApiModel(&quot;用户表&quot;)</span></span><br><span class="line"><span class="meta">@TableName(value = &quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserEntity</span> <span class="keyword">extends</span> <span class="title class_">BaseEntity</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;密码，加密存储&quot;)</span></span><br><span class="line">    <span class="meta">@Desensitization(type = DesensitizedUtil.DesensitizedType.PASSWORD)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;手机号&quot;)</span></span><br><span class="line">    <span class="meta">@Desensitization(type = DesensitizedUtil.DesensitizedType.MOBILE_PHONE)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><blockquote><p><strong>通过图片可以查看到，返回的数据已经进行脱敏处理了，后续只需要在实体类上使用自定义注解<code>Desensitization</code>，然后再指定需要脱敏的类型，即可对数据针对性的脱敏</strong></p></blockquote><p><img src="https://www.naste.top:9000/images/image-20230815224500111.png" alt="image-20230815224500111"></p>]]></content>
    
    
    <summary type="html">Hutool实现数据脱敏</summary>
    
    
    
    <category term="Java" scheme="https://www.naste.top:1024/categories/Java/"/>
    
    
    <category term="Java" scheme="https://www.naste.top:1024/tags/Java/"/>
    
    <category term="Hutool" scheme="https://www.naste.top:1024/tags/Hutool/"/>
    
    <category term="SpringBoot" scheme="https://www.naste.top:1024/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>EasyExcel使用</title>
    <link href="https://www.naste.top:1024/posts/869019539.html"/>
    <id>https://www.naste.top:1024/posts/869019539.html</id>
    <published>2023-08-12T13:56:11.000Z</published>
    <updated>2023-08-23T14:54:48.160Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p>[TOC]</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.bilibili.com/video/BV1mG4y1f7jr/">https://www.bilibili.com/video/BV1mG4y1f7jr/</a></p><h1 id="EasyExcel注解"><a href="#EasyExcel注解" class="headerlink" title="EasyExcel注解"></a>EasyExcel注解</h1><div class="table-container"><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table></div><h1 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--EasyExcel--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>easyexcel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `<span class="keyword">user</span>`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` (</span><br><span class="line">  `id` <span class="type">bigint</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;自增id&#x27;</span>,</span><br><span class="line">  `nickname` <span class="type">varchar</span>(<span class="number">32</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户昵称&#x27;</span>,</span><br><span class="line">  `avatar` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户头像链接&#x27;</span>,</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">32</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">  `password` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;密码，加密存储&#x27;</span>,</span><br><span class="line">  `salt` <span class="type">varchar</span>(<span class="number">32</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;密码盐值&#x27;</span>,</span><br><span class="line">  `gender` tinyint(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;性别，0表示未知，1表示男性，2表示女性&#x27;</span>,</span><br><span class="line">  `birthday` <span class="type">date</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;生日&#x27;</span>,</span><br><span class="line">  `email` <span class="type">varchar</span>(<span class="number">64</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line">  `phone` <span class="type">varchar</span>(<span class="number">11</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;手机号&#x27;</span>,</span><br><span class="line">  `qq` <span class="type">varchar</span>(<span class="number">16</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;QQ号码&#x27;</span>,</span><br><span class="line">  `wechat` <span class="type">varchar</span>(<span class="number">32</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;微信号&#x27;</span>,</span><br><span class="line">  `weibo` <span class="type">varchar</span>(<span class="number">64</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;微博账号&#x27;</span>,</span><br><span class="line">  `github` <span class="type">varchar</span>(<span class="number">64</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;GitHub账号&#x27;</span>,</span><br><span class="line">  `linkedin` <span class="type">varchar</span>(<span class="number">64</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;LinkedIn账号&#x27;</span>,</span><br><span class="line">  `country_code` <span class="type">varchar</span>(<span class="number">5</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;国家代码&#x27;</span>,</span><br><span class="line">  `province` <span class="type">varchar</span>(<span class="number">16</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;省份&#x27;</span>,</span><br><span class="line">  `city` <span class="type">varchar</span>(<span class="number">16</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;城市&#x27;</span>,</span><br><span class="line">  `address` <span class="type">varchar</span>(<span class="number">128</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;地址&#x27;</span>,</span><br><span class="line">  `post_code` <span class="type">varchar</span>(<span class="number">6</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;邮编&#x27;</span>,</span><br><span class="line">  `last_login_time` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;最近一次登录时间&#x27;</span>,</span><br><span class="line">  `last_login_ip` <span class="type">varchar</span>(<span class="number">15</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;最近一次登录IP地址&#x27;</span>,</span><br><span class="line">  `status` tinyint(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;1&#x27;</span> COMMENT <span class="string">&#x27;用户状态，0表示禁用，1表示启用&#x27;</span>,</span><br><span class="line">  `create_time` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `update_time` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  `remark1` <span class="type">varchar</span>(<span class="number">64</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;自定义字段1&#x27;</span>,</span><br><span class="line">  `remark2` <span class="type">varchar</span>(<span class="number">64</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;自定义字段2&#x27;</span>,</span><br><span class="line">  `remark3` <span class="type">varchar</span>(<span class="number">64</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;自定义字段3&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE,</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `idx_username` (`username`) <span class="keyword">USING</span> BTREE COMMENT <span class="string">&#x27;唯一索引，保证用户名唯一&#x27;</span></span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">1</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_0900_ai_ci ROW_FORMAT<span class="operator">=</span><span class="keyword">DYNAMIC</span> COMMENT<span class="operator">=</span><span class="string">&#x27;用户表&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.excel.annotation.ExcelProperty;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户信息excel映射类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserExcelEntity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;编号&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;昵称&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String nickname;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;用户名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;密码&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="文件导入"><a href="#文件导入" class="headerlink" title="文件导入"></a>文件导入</h1><h2 id="基本方式导入"><a href="#基本方式导入" class="headerlink" title="基本方式导入"></a>基本方式导入</h2><blockquote><p><strong>基本方式导入，程序中获取到的数据为<code>Map</code>类型</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.excel.EasyExcel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1、基本方式导入</span></span><br><span class="line"><span class="comment"> * Date: 2023/8/12</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> XiaoFei</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseImport</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;C:\\Users\\19030\\Desktop\\tmp\\user.xlsx&quot;</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;Object&gt; list = EasyExcel.read(file).sheet(<span class="number">0</span>).doReadSync();</span><br><span class="line"></span><br><span class="line">        list.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://www.naste.top:9000/images/image-20230812232426105.png" alt="image-20230812232426105"></p><h2 id="模型映射导入"><a href="#模型映射导入" class="headerlink" title="模型映射导入"></a>模型映射导入</h2><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><ul><li><p>关联映射</p><ul><li><p>@ExcelProperty(index = 0)</p></li><li><p>@ExcelProperty(value = “列名”)</p></li><li><p>@ExcelProperty(value = {“主标题”, “副标题”})</p></li></ul></li><li><p>格式转换，注解都是属于<code>com.alibaba.excel.annotation</code>下的</p><ul><li>@DateTimeFormat(value = “yyyy年MM月dd日 HH时mm分ss秒”)</li><li>@NumberFormat(value = “#.##%”)</li><li>@ExcelProperty(converter = 自定义格式转换.class)</li></ul></li><li>相关方法<ul><li>EasyExcel.read(inputStream).head(映射模型.class).xxx</li></ul></li></ul><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.excel.EasyExcel;</span><br><span class="line"><span class="keyword">import</span> com.xiaofei.excel.entity.excel.UserExcelEntity;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1、文件导入</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileImport</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模型映导入</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">modelMapImport</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;C:\\Users\\19030\\Desktop\\tmp\\user.xlsx&quot;</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;UserExcelEntity&gt; list = EasyExcel.read(file).head(UserExcelEntity.class).sheet(<span class="number">0</span>).doReadSync();</span><br><span class="line"></span><br><span class="line">        list.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://www.naste.top:9000/images/image-20230813100133627.png" alt="image-20230813100133627"></p><h2 id="导入的监昕器"><a href="#导入的监昕器" class="headerlink" title="导入的监昕器"></a>导入的监昕器</h2><h3 id="使用EasyExcel自带监听器"><a href="#使用EasyExcel自带监听器" class="headerlink" title="使用EasyExcel自带监听器"></a>使用EasyExcel自带监听器</h3><p><img src="https://www.naste.top:9000/images/image-20230813110435387.png" alt="image-20230813110435387"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.excel.EasyExcel;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.read.listener.PageReadListener;</span><br><span class="line"><span class="keyword">import</span> com.xiaofei.excel.entity.excel.UserExcelEntity;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1、文件导入</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileImport</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 导入监听器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">listenerImport</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;C:\\Users\\19030\\Desktop\\tmp\\user.xlsx&quot;</span>);</span><br><span class="line"></span><br><span class="line">        EasyExcel.read(inputStream, UserExcelEntity.class, <span class="keyword">new</span> <span class="title class_">PageReadListener</span>&lt;&gt;(<span class="built_in">this</span>::consumerMethod)).sheet(<span class="number">0</span>).doRead();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消费函数，监听器会自动调用该函数，对数据进行消费</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">consumerMethod</span><span class="params">(List&lt;UserExcelEntity&gt; list)</span> &#123;</span><br><span class="line">        list.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="使用自定义监听器"><a href="#使用自定义监听器" class="headerlink" title="使用自定义监听器"></a>使用自定义监听器</h3><blockquote><p><strong>创建一个类，实现<code>ReadListener</code>接口</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.excel.context.AnalysisContext;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.read.listener.ReadListener;</span><br><span class="line"><span class="keyword">import</span> com.xiaofei.excel.entity.excel.UserExcelEntity;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户信息excel导入监听器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserListener</span> <span class="keyword">implements</span> <span class="title class_">ReadListener</span>&lt;UserExcelEntity&gt; &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取每一行数据和</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(UserExcelEntity userExcelEntity, AnalysisContext analysisContext)</span> &#123;</span><br><span class="line">        System.out.println(userExcelEntity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doAfterAllAnalysed</span><span class="params">(AnalysisContext analysisContext)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.excel.EasyExcel;</span><br><span class="line"><span class="keyword">import</span> com.xiaofei.excel.entity.excel.UserExcelEntity;</span><br><span class="line"><span class="keyword">import</span> com.xiaofei.excel.listener.UserListener;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1、文件导入</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileImport</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 监听器导入</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">listenerImport</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;C:\\Users\\19030\\Desktop\\tmp\\user.xlsx&quot;</span>);</span><br><span class="line"></span><br><span class="line">        EasyExcel.read(inputStream, UserExcelEntity.class, <span class="keyword">new</span> <span class="title class_">UserListener</span>()).sheet(<span class="number">0</span>).doRead();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="指定表头导入"><a href="#指定表头导入" class="headerlink" title="指定表头导入"></a>指定表头导入</h2><p><img src="https://www.naste.top:9000/images/image-20230813111609120.png" alt="image-20230813111609120"></p><blockquote><p><strong>如图所示，由于表头所在行数不是第一行，EasyExcel默认是指定第一行为表头，这个时候需要<code>EasyExcel.read().headRowNumber(表头所在行数)</code>指定表头所在行</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.excel.EasyExcel;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.read.listener.PageReadListener;</span><br><span class="line"><span class="keyword">import</span> com.xiaofei.excel.entity.excel.UserExcelEntity;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1、文件导入</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileImport</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 导入监听器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">listenerImport</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;C:\\Users\\19030\\Desktop\\tmp\\user.xlsx&quot;</span>);</span><br><span class="line"></span><br><span class="line">        EasyExcel.read(inputStream, UserExcelEntity.class, <span class="keyword">new</span> <span class="title class_">PageReadListener</span>&lt;&gt;(<span class="built_in">this</span>::consumerMethod))</span><br><span class="line">                .headRowNumber(<span class="number">3</span>)</span><br><span class="line">                .sheet(<span class="number">0</span>).doRead();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消费函数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">consumerMethod</span><span class="params">(List&lt;UserExcelEntity&gt; list)</span> &#123;</span><br><span class="line">        list.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="导入异常处理"><a href="#导入异常处理" class="headerlink" title="导入异常处理"></a>导入异常处理</h2><blockquote><p><strong><code>ReadListener</code>接口中的<code>onException</code>为出现异常时会执行的方法</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.excel.context.AnalysisContext;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.read.listener.ReadListener;</span><br><span class="line"><span class="keyword">import</span> com.xiaofei.excel.entity.excel.UserExcelEntity;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户信息excel导入监听器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserListener</span> <span class="keyword">implements</span> <span class="title class_">ReadListener</span>&lt;UserExcelEntity&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(UserExcelEntity userExcelEntity, AnalysisContext analysisContext)</span> &#123;</span><br><span class="line">        System.out.println(userExcelEntity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doAfterAllAnalysed</span><span class="params">(AnalysisContext analysisContext)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当出现异常时，该方法会执行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onException</span><span class="params">(Exception exception, AnalysisContext context)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        log.error(<span class="string">&quot;Excel导入报错&quot;</span>);</span><br><span class="line">        ReadListener.<span class="built_in">super</span>.onException(exception, context);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="文件上传导入"><a href="#文件上传导入" class="headerlink" title="文件上传导入"></a>文件上传导入</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文件上传</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> file 上传的文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> true：上传成功。false：上传失败</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ApiOperation(value = &quot;文件上传&quot;, httpMethod = &quot;POST&quot;, response = ResponseUtils.class, produces = &quot;application/json&quot;)</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseUtils&lt;Boolean&gt; <span class="title function_">uploadFile</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span> MultipartFile file)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">Boolean</span> <span class="variable">isSuccess</span> <span class="operator">=</span> userService.uploadFile(file);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseUtils</span>&lt;Boolean&gt;().success(isSuccess ? <span class="string">&quot;上传成功&quot;</span> : <span class="string">&quot;上传失败&quot;</span>, isSuccess);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文件上传</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> file 上传的文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> true：上传成功。false：上传失败</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Boolean <span class="title function_">uploadFile</span><span class="params">(MultipartFile file)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (file == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;上传的文件不能为空&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取file的文件流</span></span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> file.getInputStream();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//EasyExcel读取inputStream里面的数据，批量插入数据库中</span></span><br><span class="line">    EasyExcel.read(inputStream, UserEntity.class, <span class="keyword">new</span> <span class="title class_">PageReadListener</span>&lt;&gt;(<span class="built_in">this</span>::addBatch)).headRowNumber(<span class="number">3</span>).sheet().doRead();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回处理结果</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 批量添加数据</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> userEntityList 数据集合</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> true：添加成功。false：添加失败</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@CacheEvict(cacheNames = RedisConstant.BASE_CACHE_KEY + &quot;user&quot;, allEntries = true)</span></span><br><span class="line"><span class="keyword">public</span> Boolean <span class="title function_">addBatch</span><span class="params">(List&lt;UserEntity&gt; userEntityList)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.saveBatch(userEntityList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="文件导出"><a href="#文件导出" class="headerlink" title="文件导出"></a>文件导出</h1><h2 id="基本方式导出"><a href="#基本方式导出" class="headerlink" title="基本方式导出"></a>基本方式导出</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">baseImport</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;C:\\Users\\19030\\Desktop\\tmp\\userExport.xlsx&quot;</span>;</span><br><span class="line">    List&lt;UserEntity&gt; userEntities = userService.selectList();</span><br><span class="line"></span><br><span class="line">    EasyExcel.write(filePath).sheet(<span class="string">&quot;导出数据&quot;</span>).head(UserEntity.class).doWrite(userEntities);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="模型映射导出"><a href="#模型映射导出" class="headerlink" title="模型映射导出"></a>模型映射导出</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.excel.EasyExcel;</span><br><span class="line"><span class="keyword">import</span> com.xiaofei.excel.entity.UserEntity;</span><br><span class="line"><span class="keyword">import</span> com.xiaofei.excel.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EasyExcelApplicationTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 基础导入</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">baseImport</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从数据库中查询数据</span></span><br><span class="line">        List&lt;UserEntity&gt; userEntities = userService.selectList();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 将查询出来的数据导入Excel表格中</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;C:\\Users\\19030\\Desktop\\tmp\\userExport.xlsx&quot;</span>;</span><br><span class="line">        EasyExcel.write(filePath).sheet(<span class="string">&quot;导出数据&quot;</span>).head(UserEntity.class).doWrite(userEntities);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="导出行高列宽"><a href="#导出行高列宽" class="headerlink" title="导出行高列宽"></a>导出行高列宽</h2><blockquote><p><strong>在实体类的字段或类上，添加对应的注解</strong></p></blockquote><p><img src="https://www.naste.top:9000/images/image-20230813162000907.png" alt="image-20230813162000907"></p><blockquote><p><strong>EasyExcel.write(filePath).sheet(“导出数据”).registerWriteHandler对应的策略，也可以写一个类继承<code>AbstractColumnWidthStyleStrategy</code></strong></p></blockquote><p><img src="https://www.naste.top:9000/images/image-20230813162104164.png" alt="image-20230813162104164"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.excel.EasyExcel;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.write.style.column.SimpleColumnWidthStyleStrategy;</span><br><span class="line"><span class="keyword">import</span> com.xiaofei.excel.entity.UserEntity;</span><br><span class="line"><span class="keyword">import</span> com.xiaofei.excel.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EasyExcelApplicationTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 基础导入</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">baseImport</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从数据库中查询数据</span></span><br><span class="line">        List&lt;UserEntity&gt; userEntities = userService.selectList();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 将查询出来的数据导入Excel表格中</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;C:\\Users\\19030\\Desktop\\tmp\\userExport.xlsx&quot;</span>;</span><br><span class="line">        EasyExcel</span><br><span class="line">                .write(filePath)</span><br><span class="line">                .sheet(<span class="string">&quot;导出数据&quot;</span>).head(UserEntity.class)</span><br><span class="line">                .registerWriteHandler(<span class="keyword">new</span> <span class="title class_">SimpleColumnWidthStyleStrategy</span>(<span class="number">30</span>))</span><br><span class="line">                .doWrite(userEntities);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>也可以写一个类，继承<code>AbstractCellStyleStrategy</code>并且实现<code>CellWriteHandler</code>，编写一个EasyExcel的自定义拦截器</strong></p></blockquote><h2 id="合并单元格导出"><a href="#合并单元格导出" class="headerlink" title="合并单元格导出"></a>合并单元格导出</h2><h2 id="导出动态表头"><a href="#导出动态表头" class="headerlink" title="导出动态表头"></a>导出动态表头</h2><h2 id="导出链接批注公式"><a href="#导出链接批注公式" class="headerlink" title="导出链接批注公式"></a>导出链接批注公式</h2><h2 id="导出图片内容"><a href="#导出图片内容" class="headerlink" title="导出图片内容"></a>导出图片内容</h2><h1 id="填充模板"><a href="#填充模板" class="headerlink" title="填充模板"></a>填充模板</h1><h2 id="模板填充对象"><a href="#模板填充对象" class="headerlink" title="模板填充对象"></a>模板填充对象</h2><h2 id="模板填充列表"><a href="#模板填充列表" class="headerlink" title="模板填充列表"></a>模板填充列表</h2><h2 id="模板组合填充"><a href="#模板组合填充" class="headerlink" title="模板组合填充"></a>模板组合填充</h2><h2 id="导出文件下载"><a href="#导出文件下载" class="headerlink" title="导出文件下载"></a>导出文件下载</h2><h1 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.excel.enums.CellDataTypeEnum;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.metadata.Head;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.metadata.data.WriteCellData;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.util.MapUtils;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.write.metadata.holder.WriteSheetHolder;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.write.style.column.AbstractColumnWidthStyleStrategy;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.CollectionUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.Cell;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Excel导出自定义列宽策略设置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ColumnWidthStyleStrategy</span> <span class="keyword">extends</span> <span class="title class_">AbstractColumnWidthStyleStrategy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_COLUMN_WIDTH</span> <span class="operator">=</span> <span class="number">255</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Integer, Map&lt;Integer, Integer&gt;&gt; cache = MapUtils.newHashMapWithExpectedSize(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置列宽度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">setColumnWidth</span><span class="params">(WriteSheetHolder writeSheetHolder, List&lt;WriteCellData&lt;?&gt;&gt; cellDataList, Cell cell, Head head, Integer relativeRowIndex, Boolean isHead)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">needSetWidth</span> <span class="operator">=</span> isHead || !CollectionUtils.isEmpty(cellDataList);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 是否需要设置宽度</span></span><br><span class="line">        <span class="keyword">if</span> (needSetWidth) &#123;</span><br><span class="line">            Map&lt;Integer, Integer&gt; maxColumnWidthMap = <span class="built_in">this</span>.cache.computeIfAbsent(writeSheetHolder.getSheetNo(), (key) -&gt; <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(<span class="number">16</span>));</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">columnWidth</span> <span class="operator">=</span> <span class="built_in">this</span>.dataLength(cellDataList, cell, isHead);</span><br><span class="line">            <span class="comment">// 列宽判断</span></span><br><span class="line">            <span class="keyword">if</span> (columnWidth &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (columnWidth &gt; MAX_COLUMN_WIDTH) &#123;</span><br><span class="line">                    columnWidth = MAX_COLUMN_WIDTH;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="type">Integer</span> <span class="variable">maxColumnWidth</span> <span class="operator">=</span> maxColumnWidthMap.get(cell.getColumnIndex());</span><br><span class="line">                <span class="keyword">if</span> (maxColumnWidth == <span class="literal">null</span> || columnWidth &gt; maxColumnWidth) &#123;</span><br><span class="line">                    maxColumnWidthMap.put(cell.getColumnIndex(), columnWidth);</span><br><span class="line">                    writeSheetHolder.getSheet().setColumnWidth(cell.getColumnIndex(), (columnWidth + <span class="number">15</span>) * MAX_COLUMN_WIDTH);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据长度获取</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer <span class="title function_">dataLength</span><span class="params">(List&lt;WriteCellData&lt;?&gt;&gt; cellDataList, Cell cell, Boolean isHead)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isHead) &#123;</span><br><span class="line">            <span class="keyword">return</span> cell.getStringCellValue().getBytes().length;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            WriteCellData&lt;?&gt; cellData = cellDataList.get(<span class="number">0</span>);</span><br><span class="line">            <span class="type">CellDataTypeEnum</span> <span class="variable">type</span> <span class="operator">=</span> cellData.getType();</span><br><span class="line">            <span class="keyword">if</span> (type == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">                    <span class="keyword">case</span> STRING:</span><br><span class="line">                        <span class="keyword">return</span> cellData.getStringValue().getBytes().length;</span><br><span class="line">                    <span class="keyword">case</span> BOOLEAN:</span><br><span class="line">                        <span class="keyword">return</span> cellData.getBooleanValue().toString().getBytes().length;</span><br><span class="line">                    <span class="keyword">case</span> NUMBER:</span><br><span class="line">                        <span class="keyword">return</span> cellData.getNumberValue().toString().getBytes().length;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.excel.EasyExcel;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.enums.BooleanEnum;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.event.SyncReadListener;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.read.listener.PageReadListener;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.support.ExcelTypeEnum;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.write.metadata.style.WriteCellStyle;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.write.metadata.style.WriteFont;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.write.style.HorizontalCellStyleStrategy;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.write.style.row.SimpleRowHeightStyleStrategy;</span><br><span class="line"><span class="keyword">import</span> com.xiaofei.excel.strategy.ColumnWidthStyleStrategy;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.URLEncoder;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Consumer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * EasyExcel工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EasyExcelUtils</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取指定的文件中的指定的sheet并且指定Consumer对数据进行消费</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputStream 文件流</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head        读取的数据要转换成哪个类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> consumer    用于消费数据方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetName   sheetName名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">readFile</span><span class="params">(InputStream inputStream, Class&lt;T&gt; head, Consumer&lt;List&lt;T&gt;&gt; consumer, String sheetName, Integer headRowNumber)</span> &#123;</span><br><span class="line">        EasyExcel.read(inputStream, head, <span class="keyword">new</span> <span class="title class_">PageReadListener</span>&lt;&gt;(consumer))</span><br><span class="line">                .autoCloseStream(<span class="literal">false</span>) <span class="comment">// 不要自动关闭，交给 Servlet 自己处理</span></span><br><span class="line">                .headRowNumber(headRowNumber == <span class="literal">null</span> ? <span class="number">1</span> : headRowNumber)</span><br><span class="line">                .sheet(sheetName)</span><br><span class="line">                .doReadSync();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取指定的文件中的指定的sheet并且指定Consumer对数据进行消费</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputStream 文件流</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head        读取的数据要转换成哪个类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> consumer    用于消费数据方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">readFile</span><span class="params">(InputStream inputStream, Class&lt;T&gt; head, Consumer&lt;List&lt;T&gt;&gt; consumer, Integer headRowNumber)</span> &#123;</span><br><span class="line">        EasyExcel.read(inputStream, head, <span class="keyword">new</span> <span class="title class_">PageReadListener</span>&lt;T&gt;(consumer))</span><br><span class="line">                .autoCloseStream(<span class="literal">false</span>) <span class="comment">// 不要自动关闭，交给 Servlet 自己处理</span></span><br><span class="line">                .headRowNumber(headRowNumber == <span class="literal">null</span> ? <span class="number">1</span> : headRowNumber)</span><br><span class="line">                .doReadAllSync();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取指定的文件中的指定的sheet并且指定Consumer对数据进行消费</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputStream   文件流</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head          读取的数据要转换成哪个类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetName     sheetName名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headRowNumber 表头在哪一行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">readFile</span><span class="params">(InputStream inputStream, Class&lt;T&gt; head, String sheetName, Integer headRowNumber)</span> &#123;</span><br><span class="line">        <span class="type">SyncReadListener</span> <span class="variable">syncReadListener</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SyncReadListener</span>();</span><br><span class="line">        EasyExcel.read(inputStream, head, syncReadListener)</span><br><span class="line">                .autoCloseStream(<span class="literal">false</span>) <span class="comment">// 不要自动关闭，交给 Servlet 自己处理</span></span><br><span class="line">                .headRowNumber(headRowNumber == <span class="literal">null</span> ? <span class="number">1</span> : headRowNumber)</span><br><span class="line">                .sheet(sheetName)</span><br><span class="line">                .doReadSync();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断获取到的数据是否为空</span></span><br><span class="line">        <span class="keyword">if</span> (syncReadListener.getList() != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> (List&lt;T&gt;) syncReadListener.getList();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取指定的文件中的指定的sheet并且指定Consumer对数据进行消费</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputStream 文件流</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head        读取的数据要转换成哪个类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">readFile</span><span class="params">(InputStream inputStream, Class&lt;T&gt; head, Integer headRowNumber)</span> &#123;</span><br><span class="line">        <span class="type">SyncReadListener</span> <span class="variable">syncReadListener</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SyncReadListener</span>();</span><br><span class="line"></span><br><span class="line">        EasyExcel.read(inputStream, head, syncReadListener)</span><br><span class="line">                .autoCloseStream(<span class="literal">false</span>) <span class="comment">// 不要自动关闭，交给 Servlet 自己处理</span></span><br><span class="line">                .headRowNumber(headRowNumber == <span class="literal">null</span> ? <span class="number">1</span> : headRowNumber)</span><br><span class="line">                .doReadAllSync();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断获取到的数据是否为空</span></span><br><span class="line">        <span class="keyword">if</span> (syncReadListener.getList() != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> (List&lt;T&gt;) syncReadListener.getList();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将数据写入Excel中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">writeFile</span><span class="params">(HttpServletResponse response, String filename, String sheetName, Class&lt;T&gt; head, List&lt;T&gt; data)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置 header 和 contentType。写在最后的原因是，避免报错时，响应 contentType 已经被修改了</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里URLEncoder.encode可以防止中文乱码</span></span><br><span class="line">        filename = URLEncoder.encode(filename, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + filename + <span class="string">&quot;_&quot;</span> + System.currentTimeMillis() + ExcelTypeEnum.XLSX.getValue());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 头样式策略</span></span><br><span class="line">        <span class="type">HorizontalCellStyleStrategy</span> <span class="variable">horizontalCellStyleStrategy</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">HorizontalCellStyleStrategy</span>(headWriteCellStyle(), contentWriteCellStyle());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 内容样式策略</span></span><br><span class="line">        EasyExcel</span><br><span class="line">                .write(response.getOutputStream(), head)</span><br><span class="line">                .autoCloseStream(<span class="literal">false</span>) <span class="comment">// 不要自动关闭，交给 Servlet 自己处理</span></span><br><span class="line">                .registerWriteHandler(<span class="keyword">new</span> <span class="title class_">ColumnWidthStyleStrategy</span>()) <span class="comment">// 自动适配宽度策略</span></span><br><span class="line">                .registerWriteHandler(<span class="keyword">new</span> <span class="title class_">SimpleRowHeightStyleStrategy</span>((<span class="type">short</span>) <span class="number">30</span>, (<span class="type">short</span>) <span class="number">25</span>))<span class="comment">//设置表头行高和内容行高</span></span><br><span class="line">                .registerWriteHandler(horizontalCellStyleStrategy) <span class="comment">// 设置自定义样式</span></span><br><span class="line">                .sheet(sheetName)</span><br><span class="line">                .doWrite(data);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Excel表头样式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> WriteCellStyle <span class="title function_">headWriteCellStyle</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 头的策略</span></span><br><span class="line">        <span class="type">WriteCellStyle</span> <span class="variable">headWriteCellStyle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WriteCellStyle</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 字体</span></span><br><span class="line">        <span class="type">WriteFont</span> <span class="variable">headWriteFont</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WriteFont</span>();</span><br><span class="line">        headWriteFont.setFontName(<span class="string">&quot;仿宋&quot;</span>);<span class="comment">//设置字体名字</span></span><br><span class="line">        headWriteFont.setFontHeightInPoints((<span class="type">short</span>) <span class="number">16</span>);<span class="comment">//设置字体大小</span></span><br><span class="line">        headWriteFont.setBold(BooleanEnum.TRUE.getBooleanValue());<span class="comment">//字体是否加粗</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 样式</span></span><br><span class="line">        headWriteCellStyle.setWriteFont(headWriteFont); <span class="comment">//在样式用应用设置的字体样式;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 背景</span></span><br><span class="line">        headWriteCellStyle.setFillForegroundColor(IndexedColors.PALE_BLUE.index);<span class="comment">//背景颜色</span></span><br><span class="line">        headWriteCellStyle.setFillPatternType(FillPatternType.SOLID_FOREGROUND);<span class="comment">//背景颜色填充类型</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//边框</span></span><br><span class="line">        headWriteCellStyle.setBorderBottom(BorderStyle.THIN);<span class="comment">//设置底边框;</span></span><br><span class="line">        headWriteCellStyle.setBottomBorderColor((IndexedColors.BLACK1.index));<span class="comment">//设置底边框颜色;</span></span><br><span class="line">        headWriteCellStyle.setBorderLeft(BorderStyle.THIN);  <span class="comment">//设置左边框;</span></span><br><span class="line">        headWriteCellStyle.setLeftBorderColor(IndexedColors.BLACK1.index);<span class="comment">//设置左边框颜色;</span></span><br><span class="line">        headWriteCellStyle.setBorderRight(BorderStyle.THIN);<span class="comment">//设置右边框;</span></span><br><span class="line">        headWriteCellStyle.setRightBorderColor(IndexedColors.BLACK1.index);<span class="comment">//设置右边框颜色;</span></span><br><span class="line">        headWriteCellStyle.setBorderTop(BorderStyle.THIN);<span class="comment">//设置顶边框;</span></span><br><span class="line">        headWriteCellStyle.setTopBorderColor(IndexedColors.BLACK1.index); <span class="comment">//设置顶边框颜色;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 其他</span></span><br><span class="line">        headWriteCellStyle.setWrapped(BooleanEnum.FALSE.getBooleanValue());  <span class="comment">//设置自动换行;</span></span><br><span class="line">        headWriteCellStyle.setHorizontalAlignment(HorizontalAlignment.CENTER);<span class="comment">//设置水平对齐的样式为居中对齐;</span></span><br><span class="line">        headWriteCellStyle.setVerticalAlignment(VerticalAlignment.CENTER);  <span class="comment">//设置垂直对齐的样式为居中对齐;</span></span><br><span class="line">        headWriteCellStyle.setShrinkToFit(BooleanEnum.FALSE.getBooleanValue());<span class="comment">//设置文本收缩至合适</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> headWriteCellStyle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Excel内容样式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> WriteCellStyle <span class="title function_">contentWriteCellStyle</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 头的策略</span></span><br><span class="line">        <span class="type">WriteCellStyle</span> <span class="variable">headWriteCellStyle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WriteCellStyle</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 字体</span></span><br><span class="line">        <span class="type">WriteFont</span> <span class="variable">headWriteFont</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WriteFont</span>();</span><br><span class="line">        headWriteFont.setFontName(<span class="string">&quot;仿宋&quot;</span>);<span class="comment">//设置字体名字</span></span><br><span class="line">        headWriteFont.setFontHeightInPoints((<span class="type">short</span>) <span class="number">14</span>);<span class="comment">//设置字体大小</span></span><br><span class="line">        headWriteFont.setBold(BooleanEnum.FALSE.getBooleanValue());<span class="comment">//字体是否加粗</span></span><br><span class="line">        headWriteFont.setColor(IndexedColors.BLACK.index);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 样式</span></span><br><span class="line">        headWriteCellStyle.setWriteFont(headWriteFont); <span class="comment">//在样式用应用设置的字体样式;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 背景</span></span><br><span class="line">        headWriteCellStyle.setFillForegroundColor(IndexedColors.WHITE.index);<span class="comment">//背景颜色</span></span><br><span class="line">        headWriteCellStyle.setFillPatternType(FillPatternType.SOLID_FOREGROUND);<span class="comment">//背景颜色填充类型</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//边框</span></span><br><span class="line">        headWriteCellStyle.setBorderBottom(BorderStyle.THIN);<span class="comment">//设置底边框;</span></span><br><span class="line">        headWriteCellStyle.setBottomBorderColor((IndexedColors.BLACK1.index));<span class="comment">//设置底边框颜色;</span></span><br><span class="line">        headWriteCellStyle.setBorderLeft(BorderStyle.THIN);  <span class="comment">//设置左边框;</span></span><br><span class="line">        headWriteCellStyle.setLeftBorderColor(IndexedColors.BLACK1.index);<span class="comment">//设置左边框颜色;</span></span><br><span class="line">        headWriteCellStyle.setBorderRight(BorderStyle.THIN);<span class="comment">//设置右边框;</span></span><br><span class="line">        headWriteCellStyle.setRightBorderColor(IndexedColors.BLACK1.index);<span class="comment">//设置右边框颜色;</span></span><br><span class="line">        headWriteCellStyle.setBorderTop(BorderStyle.THIN);<span class="comment">//设置顶边框;</span></span><br><span class="line">        headWriteCellStyle.setTopBorderColor(IndexedColors.BLACK1.index); <span class="comment">//设置顶边框颜色;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 其他</span></span><br><span class="line">        headWriteCellStyle.setWrapped(BooleanEnum.FALSE.getBooleanValue());  <span class="comment">//设置自动换行;</span></span><br><span class="line">        headWriteCellStyle.setShrinkToFit(BooleanEnum.FALSE.getBooleanValue());<span class="comment">//设置文本收缩至合适</span></span><br><span class="line">        headWriteCellStyle.setHorizontalAlignment(HorizontalAlignment.CENTER);<span class="comment">//设置水平对齐的样式为居中对齐;</span></span><br><span class="line">        headWriteCellStyle.setVerticalAlignment(VerticalAlignment.CENTER);  <span class="comment">//设置垂直对齐的样式为居中对齐;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> headWriteCellStyle;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">EasyExcel使用</summary>
    
    
    
    <category term="Java" scheme="https://www.naste.top:1024/categories/Java/"/>
    
    
    <category term="Java" scheme="https://www.naste.top:1024/tags/Java/"/>
    
    <category term="SpringBoot" scheme="https://www.naste.top:1024/tags/SpringBoot/"/>
    
    <category term="EasyExcel" scheme="https://www.naste.top:1024/tags/EasyExcel/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-外观模式</title>
    <link href="https://www.naste.top:1024/posts/1868115705.html"/>
    <id>https://www.naste.top:1024/posts/1868115705.html</id>
    <published>2023-06-17T09:48:16.000Z</published>
    <updated>2023-06-27T09:51:15.049Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p>[TOC]</p><h1 id="什么是外观模式"><a href="#什么是外观模式" class="headerlink" title="什么是外观模式"></a>什么是外观模式</h1><p>外观模式又叫门面模式</p><p>外观模式也叫门面模式，在创建型模式、结构型模式和行为型模式分类中，外观模式归属于结构型模式</p><p>在我们实际的工作中，外观模式是最常用的一种设计模式之一</p><p>比如，我们把几个方法中共用的逻辑抽象成一个独立的方法，那么这个方法就可以理解成外观模式</p><p>外观模式是通过引入一个外观角色来简化调用者与各个子系统之间的交互，为复杂的子系统调用提供一个统一的入口，降低子系统与调用者的耦合度，使得扩展更加方便</p><p><img src="https://www.naste.top:9000/images/v2-70762a5b963aba1dc35447fb3ec87407_1440w.webp" alt="img"></p><p>外观模式实现步骤：</p><ol><li>抽象各个子系统的业务逻辑</li><li>将抽象过的业务逻辑封装到门面类中</li><li>调用者使用门面类中的方法完成自己的逻辑</li></ol><h1 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h1><ol><li>需要为一个复杂的子系统提供一系列逻辑支持的时候，可以考虑使用外观模式，比如，上文中提到的案例。中台系统需要给业务系统提供多个方法支持，可以用外观模式</li><li>当调用者需要调用多个子系统来完成自己的逻辑时，可以考虑使用外观模式，比如日志处理框架 <code>SLF4J</code>，它对调用者提供接口。<code>logback</code>、<code>log4j</code>等各种日志框架作为子系统去实现这些接口，业务系统需要记录日志时，调用<code>SLF4J</code>门面类即可，而不必关心具体使用的是哪一个框架</li></ol><h1 id="图文解释"><a href="#图文解释" class="headerlink" title="图文解释"></a>图文解释</h1><p>假如我们有一个中台系统，系统中有5个接口供业务系统调用</p><p><img src="https://www.naste.top:9000/images/image-20230627164824991.png" alt="image-20230627164824991"></p><p>业务系统A需要调用中台系统的前三个接口完成自己的业务逻辑</p><p>业务系统B需要调用中台系统的后两个接口来完成业务系统B自己的逻辑</p><p><img src="https://www.naste.top:9000/images/image-20230627164950400.png" alt="image-20230627164950400"></p><p>接着是业务系统C、D、E、F等等，他们都和业务系统A或B的需求一样：希望调用中台系统的前三个接口或后两个接口去实现自己系统的业务逻辑</p><p>我们会发现，这些业务系统在调用中台系统时存在几个问题</p><ul><li>业务系统需要足够了解中台系统的每个接口逻辑，才能决定自己到底该调用哪些接口</li><li>业务系统在调用中台系统接口时，需要调用多个接口，非常麻烦</li><li>多个业务系统存在相同的代码，导致整体工作量增加</li></ul><p>我们可以这样对中台系统进行改造，让业务系统调用更简单</p><p><img src="https://www.naste.top:9000/images/image-20230627165113360.png" alt="image-20230627165113360"></p><p>在中台系统中增加<strong>接口A</strong> ，在接口A里面分别分别调用接口1、2、3。业务系统A可以直接调用接口A来完成自己的业务</p><p>同样的，中台系统中增加<strong>接口B</strong>，在接口B中分别调用接口4、5。业务系统B可以直接调用接口B来完成自己的业务</p><p>这样我们就解决了刚才所说的3个问题</p><ul><li>业务系统不需要了解中台系统具体的接口逻辑，只需要调用对应的接口即可</li><li>业务系统调用中台系统时不再是多个接口，只需要调用一个接口</li><li>原来的多个业务系统中相同的代码被封装在了接口A或接口B中，业务系统相应的工作量会减少</li></ul><p>这种实现方式就是在中台系统中使用了<strong>外观模式</strong>，接口A和接口B就是中台系统的门面（外观模式也叫门面模式）</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>首先是中台系统的5个接口，这里用5个方法代表接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Center</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span>&#123;&#125; <span class="comment">// 模拟接口1</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span>&#123;&#125; <span class="comment">// 模拟接口2</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method3</span><span class="params">()</span>&#123;&#125; <span class="comment">// 模拟接口3</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method4</span><span class="params">()</span>&#123;&#125; <span class="comment">// 模拟接口4</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method5</span><span class="params">()</span>&#123;&#125; <span class="comment">// 模拟接口5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来是中台系统中的外观类，里面包含了接口A和接口B。同样用两个方法来代表接口</p><p>在接口A中调用了中台系统的前3个方法；在接口B中调用了中台系统中的后两个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CenterFacade</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Center</span> <span class="variable">center</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Center</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 模拟接口A</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">centerA</span><span class="params">()</span> &#123;</span><br><span class="line">        center.method1();</span><br><span class="line">        center.method2();</span><br><span class="line">        center.method3();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 模拟接口B</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">centerB</span><span class="params">()</span> &#123;</span><br><span class="line">        center.method4();</span><br><span class="line">        center.method5();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>业务系统A在调用时，使用外观类中的接口A即可实现自己的业务逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">CenterFacade</span> <span class="variable">centerFacade</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CenterFacade</span>();</span><br><span class="line">centerFacade.centerA();</span><br></pre></td></tr></table></figure><p>业务系统B在调用时，使用外观类中的接口B即可实现自己的业务逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">CenterFacade</span> <span class="variable">centerFacade</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CenterFacade</span>();</span><br><span class="line">centerFacade.centerB();</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li><p>优点</p><ul><li>外观模式给各个子系统提供统一的入口，调用者使用起来很简单</li><li>外观模式把各个子系统和调用者解耦，扩展性会更好。比如，想要增加一个子系统时，只需要按照外观模式的规范进行开发，调用者和外观类都不用修改</li></ul></li><li><p>缺点</p><ul><li>如果设计不合理，增加新的子系统时可能需要修改外观类或调用者的源代码，违背了“开闭原则”</li></ul></li></ul>]]></content>
    
    
    <summary type="html">设计模式-外观模式</summary>
    
    
    
    <category term="Java" scheme="https://www.naste.top:1024/categories/Java/"/>
    
    
    <category term="Java" scheme="https://www.naste.top:1024/tags/Java/"/>
    
    <category term="设计模式" scheme="https://www.naste.top:1024/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="外观模式" scheme="https://www.naste.top:1024/tags/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-观察者模式</title>
    <link href="https://www.naste.top:1024/posts/1324173671.html"/>
    <id>https://www.naste.top:1024/posts/1324173671.html</id>
    <published>2023-06-17T09:48:08.000Z</published>
    <updated>2023-06-23T12:24:03.830Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p>[TOC]</p><h1 id="什么是观察者模式"><a href="#什么是观察者模式" class="headerlink" title="什么是观察者模式"></a>什么是观察者模式</h1><p>观察者模式也叫发布订阅模式</p><p>观察者模式（Observer Pattern）是一种设计模式，它定义了一种一对多的依赖关系，当一个对象的状态发生改变时，它的所有依赖者都会收到通知并自动更新</p><p>当多个人都关注了一个公众号时，这个公众号一发布新的文章，所有关注的账号都会收到消息</p><p>观察者模式的核心思想是将观察者对象注册到主题对象中，当主题对象的状态发生改变时，通知所有的观察者对象进行更新。这种设计模式可以帮助我们实现松耦合的对象间交互，从而提高系统的可维护性和可扩展性</p><p>观察者模式包含以下几个角色：</p><ol><li>抽象主题（Subject）：定义了一种抽象接口，用于添加、删除和通知观察者对象。</li><li>具体主题（ConcreteSubject）：实现了抽象主题接口，维护了一组观察者对象，并在状态发生改变时通知它们。</li><li>抽象观察者（Observer）：定义了一种抽象接口，用于接收主题对象的通知。</li><li>具体观察者（ConcreteObserver）：实现了抽象观察者接口，存储主题对象的引用，并在收到通知时更新自己的状态。</li></ol><h1 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h1><p><img src="https://www.naste.top:9000/images/f6dae790229e48a0ac4bd507dab3f455.png" alt="img"><img src="https://www.naste.top:9000/images/228ff4ace242424ab67c3453870e549b.png" alt="img"></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p><img src="https://www.naste.top:9000/images/observer.jpg" alt="img"></p><h1 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h1><h2 id="被观察者，或者叫订阅主题"><a href="#被观察者，或者叫订阅主题" class="headerlink" title="被观察者，或者叫订阅主题"></a>被观察者，或者叫订阅主题</h2><p>首先是上官无雪这个绿茶婊的类</p><p>先定义一个接口，很简单，包含一个用来订阅的方法<code>add</code>和取消订阅的方法<code>remove</code>。还有一个当状态发生改变时，用来通知其观察者的方法<code>notifyState</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">GreenTeaBitchSubject</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(TianDogObserver observer)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(TianDogObserver observer)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">notifyState</span><span class="params">(String state)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来是其实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShangGuanSubject</span> <span class="keyword">implements</span> <span class="title class_">GreenTeaBitchSubject</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;TianDogObserver&gt; tianDogs = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(TianDogObserver observer)</span> &#123;</span><br><span class="line">        tianDogs.add(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(TianDogObserver observer)</span> &#123;</span><br><span class="line">        tianDogs.remove(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">notifyState</span><span class="params">(String state)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (TianDogObserver tianDog : tianDogs) &#123;</span><br><span class="line">            tianDog.update(state);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也非常简单，其持有一个对其感兴趣的观察者集合，当状态发生改变时就循环通知每个观察者。</p><h2 id="观察者，或者叫订阅者"><a href="#观察者，或者叫订阅者" class="headerlink" title="观察者，或者叫订阅者"></a>观察者，或者叫订阅者</h2><p>先定义一个观察者接口，里面只有一个方法，观察者就是在这个方法里面接收被观察者发送的状态改变通知。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TianDogObserver</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(String message)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们实现一个舔狗王二狗类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog2WangObserver</span> <span class="keyword">implements</span> <span class="title class_">TianDogObserver</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;肚子好饿&quot;</span>.equals(message))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;二狗：半夜起来，翻墙出去步行2公里买女神最爱吃的小笼包... 上官：二狗，你真是个好人&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;心情不好&quot;</span>.equals(message))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;二狗：官哭着述说渣男怎么欺负的她...整整3个小时，全程安慰... 上官：二狗，你真是个好人&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;随叫随到...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，在update方法中，接收到女神的通知后，根据不同的状态做出了相应的动作。</p><p>西门淫荡类差不多，就省略了，可以从文章最后的源码查看…</p><h2 id="客户端使用"><a href="#客户端使用" class="headerlink" title="客户端使用"></a>客户端使用</h2><p>客户端调用时，先给被观察者通过<code>add</code>添加观察者，也就是让二狗和西门订阅上官的状态，以便于上官状态改变时可以得到通知。最后使用<code>notifyState</code>来通知观察者状态改变了。如果某个观察者不再对被观察者感兴趣，直接使用<code>remove</code>方法取消订阅即可。最后王二狗被绿茶婊上官伤透了心，和牛翠华走到了一起，从此二狗就不再关心上官的状态了，直接使用<code>remove</code>方法取消订阅。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObserverClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendThink</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">GreenTeaBitchSubject</span> <span class="variable">subject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShangGuanSubject</span>();</span><br><span class="line">        <span class="type">Dog2WangObserver</span> <span class="variable">dog2WangObserver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog2WangObserver</span>();</span><br><span class="line">        subject.add(dog2WangObserver);</span><br><span class="line">        subject.add(<span class="keyword">new</span> <span class="title class_">YinDangObserver</span>());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;------午夜12点，肚子好饿，找个人来买东西吃------&quot;</span>);</span><br><span class="line">        subject.notifyState(<span class="string">&quot;肚子好饿&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;------又被渣男甩了，有点小难过，找个人来安慰一下------&quot;</span>);</span><br><span class="line">        subject.notifyState(<span class="string">&quot;心情不好&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;------二狗终于看透了上官这个绿茶婊，和牛翠花走到了一起------&quot;</span>);</span><br><span class="line">        subject.remove(dog2WangObserver);</span><br><span class="line">        System.out.println(<span class="string">&quot;------上官又被渣男甩了，想找个人来安慰一下，却不见了那个好人的身影------&quot;</span>);</span><br><span class="line">        subject.notifyState(<span class="string">&quot;心情不好&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">------午夜<span class="number">12</span>点，肚子好饿，找个人来买东西吃------</span><br><span class="line">二狗：半夜起来，翻墙出去步行<span class="number">2</span>公里买女神最爱吃的小笼包... 上官：二狗，你真是个好人</span><br><span class="line">西门：是吗？那我下面给你吃啊？上官：讨厌拉...</span><br><span class="line">------又被渣男甩了，有点小难过，找个人来安慰一下------</span><br><span class="line">二狗：官哭着述说渣男怎么欺负的她...整整<span class="number">3</span>个小时，全程安慰... 上官：二狗，你真是个好人</span><br><span class="line">西门：南门那边新开了一家酒吧，晚上带你去放松一下吧... 上官：好嗨吆，感觉人生达到了高峰..</span><br><span class="line">------二狗终于看透了上官这个绿茶婊，和牛翠花走到了一起------</span><br><span class="line">------上官又被渣男甩了，想找个人来安慰一下，却不见了那个好人的身影------</span><br><span class="line">西门：南门那边新开了一家酒吧，晚上带你去放松一下吧... 上官：好嗨吆，感觉人生达到了高峰..</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>观察者模式的应用非常广泛，例如在各种消息中间件中，如kafka、rabitmq等，例如RxJava 等等。其实Java从1.0就对观察者模式进行了支持，提供了两个类型<code>java.util.Observable</code> 和<code>java.util.Observer</code> 但其在Java9时候被标记为废弃状态，所以我们这里也就不提了，感兴趣的小伙伴可以去看看</p><p>当前由于各种框架和第三方开源库的使用，程序设计的要求被降的很低，大部分人终日都在写胶水代码和业务代码，什么设计模式，压根不知道，不知道也照样写代码…。这个是IT产业化不可逆转的趋势，不然为什么IT从业人员被划归为新型民工的行列了呢？就是因为我们正在变成工地上按照设计图纸一块一块垒砖的农民工的样子。不过我们也不应该妄自菲薄，搬砖是为了生活，不断探寻是为了梦想…</p>]]></content>
    
    
    <summary type="html">设计模式-观察者模式</summary>
    
    
    
    <category term="Java" scheme="https://www.naste.top:1024/categories/Java/"/>
    
    
    <category term="Java" scheme="https://www.naste.top:1024/tags/Java/"/>
    
    <category term="设计模式" scheme="https://www.naste.top:1024/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="观察者模式" scheme="https://www.naste.top:1024/tags/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-适配器模式</title>
    <link href="https://www.naste.top:1024/posts/554442395.html"/>
    <id>https://www.naste.top:1024/posts/554442395.html</id>
    <published>2023-06-17T09:47:59.000Z</published>
    <updated>2023-06-23T12:24:19.589Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p>[TOC]</p><h1 id="什么是适配器模式"><a href="#什么是适配器模式" class="headerlink" title="什么是适配器模式"></a>什么是适配器模式</h1><p>适配器模式是一种结构型设计模式。它的思想是：把一个类的接口变换成客户端所期待的另一种接口，从而使原本因接口不匹配而无法在一起工作的两个类能够在一起工作。</p><p>在适配器模式中，我们通过增加一个新的适配器类来解决接口兼容问题。这个新的适配器类会持有一个或多个目标对象，并且将这些目标对象转换成客户端所期望的另一种接口。</p><h1 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h1><ul><li>当需要使用一个现存的类，但它提供的接口与我们系统的接口不兼容，而我们还不能修改它时</li><li>当多个团队独立开发系统的各功能模块，然后组合在一起，但由于某些原因事先不能确定接口时</li></ul><h1 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h1><p>适配器模式只有3个角色</p><ul><li>Target</li></ul><p>是一个接口，它是我们客户端使用的目标接口</p><ul><li>Adaptee</li></ul><p>我们想要使用的接口与<code>Target</code>不兼容的类，它可以是一个接口，也可以是一个类。</p><ul><li>Adapter</li></ul><p>适配器类，此模式的核心。它需要实现目标接口<code>Target</code>，而且必须要引用<code>Adaptee</code>，因为我们要在此类中包装<code>Adaptee</code>的功能</p><p><img src="https://www.naste.top:9000/images/image-20230623161718401.png" alt="image-20230623161718401"></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p><img src="https://www.naste.top:9000/images/adapter.png" alt="img"></p><h2 id="目标接口"><a href="#目标接口" class="headerlink" title="目标接口"></a>目标接口</h2><blockquote><p><strong>系统原来的日志接口如下</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 系统原来的日志接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">LogFactory</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">debug</span><span class="params">(String tag,String message)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三方库接口及实现"><a href="#三方库接口及实现" class="headerlink" title="三方库接口及实现"></a>三方库接口及实现</h2><p>下面是第三方库提供的日志功能，但是其接口与原系统目前使用的不兼容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 新的日志系统接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">NewLogger</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">newDebug</span><span class="params">(<span class="type">int</span> priority, String message, Object... obj)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 新的日志系统接口实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NewLoggerImp</span> <span class="keyword">implements</span> <span class="title class_">NewLogger</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">newDebug</span><span class="params">(<span class="type">int</span> priority, String message, Object... obj)</span> &#123;</span><br><span class="line">        System.out.println(String.format(<span class="string">&quot;新的日志系统：logger记录:%s&quot;</span>, message));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="构建适配器类"><a href="#构建适配器类" class="headerlink" title="构建适配器类"></a>构建适配器类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 适配器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogAdapter</span> <span class="keyword">implements</span> <span class="title class_">LogFactory</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> NewLogger nbLogger;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LogAdapter</span><span class="params">(NewLogger nbLogger)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.nbLogger = nbLogger;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现老的日志接口，实现老日志接口中的方法，在该方法中使用新的日志系统进行日志打印</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">debug</span><span class="params">(String tag, String message)</span> &#123;</span><br><span class="line">        Objects.requireNonNull(nbLogger);</span><br><span class="line">        nbLogger.newDebug(<span class="number">1</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdapterClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//使用老的日志接口，但是new是适配器，并且将新的适配器类传入进去，然后调用的日志打印的方法就是信息日志系统进行打印</span></span><br><span class="line">        <span class="type">LogFactory</span> <span class="variable">logFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LogAdapter</span>(<span class="keyword">new</span> <span class="title class_">NewLoggerImp</span>());</span><br><span class="line">        logFactory.debug(<span class="string">&quot;Test&quot;</span>, <span class="string">&quot;我将使用牛逼logger打印log&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://www.naste.top:9000/images/image-20230623163404690.png" alt="image-20230623163404690"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>优点：</p><ol><li>提高代码复用性：适配器模式通过将一个类的接口转换成客户端所期望的接口，可以让原本不兼容的类能够协同工作，从而提高代码的复用性。</li><li>提高系统灵活性：适配器模式可以将不同的类的接口统一起来，从而使得系统更加灵活，能够适应各种变化。</li><li>符合开闭原则：适配器模式可以在不修改现有代码的情况下添加新功能，从而符合开闭原则。</li></ol><p>缺点：</p><ol><li>增加代码复杂度：适配器模式需要增加一个适配器类来实现接口转换，这会增加代码的复杂度。</li><li>降低代码可读性：适配器模式可能会让代码的逻辑变得更加复杂，降低代码的可读性和可维护性。</li><li>可能会影响系统性能：适配器模式需要进行额外的类型转换和接口转换，这可能会影响系统的性能。</li></ol><p>总之，适配器模式是一种非常有用的设计模式，它可以帮助我们将现有的代码与其他代码或系统集成起来，从而提高软件系统的灵活性和可维护性。但是，在使用适配器模式时，需要权衡其优缺点并进行适当的设计和实现。</p>]]></content>
    
    
    <summary type="html">设计模式-适配器模式</summary>
    
    
    
    <category term="Java" scheme="https://www.naste.top:1024/categories/Java/"/>
    
    
    <category term="Java" scheme="https://www.naste.top:1024/tags/Java/"/>
    
    <category term="设计模式" scheme="https://www.naste.top:1024/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="适配器模式" scheme="https://www.naste.top:1024/tags/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-责任链模式</title>
    <link href="https://www.naste.top:1024/posts/3066120463.html"/>
    <id>https://www.naste.top:1024/posts/3066120463.html</id>
    <published>2023-06-17T09:46:56.000Z</published>
    <updated>2023-06-18T07:27:36.615Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p>[TOC]</p><h1 id="上面是责任链模式（职责链模式）"><a href="#上面是责任链模式（职责链模式）" class="headerlink" title="上面是责任链模式（职责链模式）"></a>上面是责任链模式（职责链模式）</h1><p>在现实生活中，常常会出现这样的事例：一个请求有多个对象可以处理，但每个对象的处理条件或权限不同。例如，公司员工请假，可批假的领导有部门负责人、副总经理、总经理等，但每个领导能批准的天数不同，员工必须根据自己要请假的天数去找不同的领导签名，也就是说员工必须记住每个领导的姓名、电话和地址等信息，这增加了难度。这样的例子还有很多，如找领导出差报销、生活中的“击鼓传花”游戏等。</p><p>在计算机软硬件中也有相关例子，如总线网中数据报传送，每台计算机根据目标地址是否同自己的地址相同来决定是否接收；还有异常处理中，处理程序根据异常的类型决定自己是否处理该异常；还有 Struts2的拦截器、JSP和Servlet的 Filter 等，所有这些，如果用责任链模式都能很好解决。</p><p>责任链（Chain of Responsibility）模式的定义：为了避免请求发送者与多个请求处理者耦合在一起，将所有请求的处理者通过前一对象记住其下一个对象的引用而连成一条链；当有请求发生时，可将请求沿着这条链传递，直到有对象处理它为止。</p><p>在责任链模式中，客户只需要将请求发送到责任链上即可，无须关心请求的处理细节和请求的传递过程，所以责任链将请求的发送者和请求的处理者解耦了。</p><h1 id="责任链模式结构"><a href="#责任链模式结构" class="headerlink" title="责任链模式结构"></a>责任链模式结构</h1><p>职责链模式主要包含以下角色。</p><ol><li>抽象处理者（Handler）角色：定义一个处理请求的接口，包含抽象处理方法和一个后继连接。</li><li>具体处理者（Concrete Handler）角色：实现抽象处理者的处理方法，判断能否处理本次请求，如果可以处理请求则处理，否则将该请求转给它的后继者。</li><li>客户类（Client）角色：创建处理链，并向链头的具体处理者对象提交请求，它不关心处理细节和请求的传递过程。</li></ol><p><img src="https://www.naste.top:9000/images/v2-323352bbdc7d89ec9835819fc63e779c_1440w.webp" alt="img"></p><p><img src="https://www.naste.top:9000/images/v2-56e0265703ecd889cb2f4b14a414d5c9_1440w.jpeg" alt="img"></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>用责任链模式设计一个请假条审批模块,<strong>将所有具体处理者全部组成一个链路，让系统一路往下找能处理的方法进行处理</strong>。</p><p>分析：假如规定学生请假小于或等于 2 天，班主任可以批准；小于或等于 7 天，系主任可以批准；小于或等于 10 天，院长可以批准；其他情况不予批准；这个实例适合使用职责链模式实现。</p><p>首先，定义一个领导类（Leader），它是抽象处理者，包含了一个指向下一位领导的指针 next 和一个处理假条的抽象处理方法 handleRequest(int LeaveDays)；然后，定义班主任类（ClassAdviser）、系主任类（DepartmentHead）和院长类（Dean），它们是抽象处理者的子类，是具体处理者，必须根据自己的权力去实现父类的 handleRequest(int LeaveDays) 方法，如果无权处理就将假条交给下一位具体处理者，直到最后；客户类负责创建处理链，并将假条交给链头的具体处理者（班主任）。</p><h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><p><img src="https://www.naste.top:9000/images/v2-21e07beda83e24d59c462b40c0abd15f_1440w.webp" alt="img"></p><p><img src="https://www.naste.top:9000/images/v2-21e07beda83e24d59c462b40c0abd15f_1440w-1687072779373-6.webp" alt="img"></p><h2 id="Leader"><a href="#Leader" class="headerlink" title="Leader"></a>Leader</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象处理者：领导类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Leader</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Leader next;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNext</span><span class="params">(Leader next)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Leader <span class="title function_">getNext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理请求的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">handleRequest</span><span class="params">(<span class="type">int</span> LeaveDays)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ClassAdviser"><a href="#ClassAdviser" class="headerlink" title="ClassAdviser"></a>ClassAdviser</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体处理者1：班主任类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassAdviser</span> <span class="keyword">extends</span> <span class="title class_">Leader</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleRequest</span><span class="params">(<span class="type">int</span> LeaveDays)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (LeaveDays &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;班主任批准您请假&quot;</span> + LeaveDays + <span class="string">&quot;天。&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (getNext() != <span class="literal">null</span>) &#123;</span><br><span class="line">                getNext().handleRequest(LeaveDays);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;请假天数太多，没有人批准该假条！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="DepartmentHead"><a href="#DepartmentHead" class="headerlink" title="DepartmentHead"></a>DepartmentHead</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体处理者2：系主任类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DepartmentHead</span> <span class="keyword">extends</span> <span class="title class_">Leader</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleRequest</span><span class="params">(<span class="type">int</span> LeaveDays)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (LeaveDays &lt;= <span class="number">7</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;系主任批准您请假&quot;</span> + LeaveDays + <span class="string">&quot;天。&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (getNext() != <span class="literal">null</span>) &#123;</span><br><span class="line">                getNext().handleRequest(LeaveDays);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;请假天数太多，没有人批准该假条！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="DeanOfStudies"><a href="#DeanOfStudies" class="headerlink" title="DeanOfStudies"></a>DeanOfStudies</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体处理者3：院长类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeanOfStudies</span> <span class="keyword">extends</span> <span class="title class_">Leader</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleRequest</span><span class="params">(<span class="type">int</span> LeaveDays)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (LeaveDays &lt;= <span class="number">20</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;教务处长批准您请假&quot;</span> + LeaveDays + <span class="string">&quot;天。&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (getNext() != <span class="literal">null</span>) &#123;</span><br><span class="line">                getNext().handleRequest(LeaveDays);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;请假天数太多，没有人批准该假条！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="DeanOfStudies-1"><a href="#DeanOfStudies-1" class="headerlink" title="DeanOfStudies"></a>DeanOfStudies</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体处理者4：教务处长类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dean</span> <span class="keyword">extends</span> <span class="title class_">Leader</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleRequest</span><span class="params">(<span class="type">int</span> LeaveDays)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (LeaveDays &lt;= <span class="number">10</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;院长批准您请假&quot;</span> + LeaveDays + <span class="string">&quot;天。&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (getNext() != <span class="literal">null</span>) &#123;</span><br><span class="line">                getNext().handleRequest(LeaveDays);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;请假天数太多，没有人批准该假条！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LeaveApprovalTest"><a href="#LeaveApprovalTest" class="headerlink" title="LeaveApprovalTest"></a>LeaveApprovalTest</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将所有具体处理者全部组成一个链路，让系统一路往下找能处理的方法进行处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeaveApprovalTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//组装责任链</span></span><br><span class="line">        <span class="type">Leader</span> <span class="variable">teacher1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassAdviser</span>();</span><br><span class="line">        <span class="type">Leader</span> <span class="variable">teacher2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DepartmentHead</span>();</span><br><span class="line">        <span class="type">Leader</span> <span class="variable">teacher3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dean</span>();</span><br><span class="line">        Leader teacher4=<span class="keyword">new</span> <span class="title class_">DeanOfStudies</span>();</span><br><span class="line">        teacher1.setNext(teacher2);</span><br><span class="line">        teacher2.setNext(teacher3);</span><br><span class="line">        teacher3.setNext(teacher4);</span><br><span class="line">        <span class="comment">//提交请求</span></span><br><span class="line">        teacher1.handleRequest(<span class="number">8</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://www.naste.top:9000/images/image-20230618152446117.png" alt="image-20230618152446117"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>优点<ul><li>降低了对象之间的耦合度。该模式使得一个对象无须知道到底是哪一个对象处理其请求以及链的结构，发送者和接收者也无须拥有对方的明确信息。</li><li>增强了系统的可扩展性。可以根据需要增加新的请求处理类，满足开闭原则。</li><li>增强了给对象指派职责的灵活性。当工作流程发生变化，可以动态地改变链内的成员或者调动它们的次序，也可动态地新增或者删除责任。</li><li>责任链简化了对象之间的连接。每个对象只需保持一个指向其后继者的引用，不需保持其他所有处理者的引用，这避免了使用众多的 if 或者 if···else 语句。</li><li>责任分担。每个类只需要处理自己该处理的工作，不该处理的传递给下一个对象完成，明确各类的责任范围，符合类的单一职责原则。</li></ul></li><li>缺点<ul><li>不能保证每个请求一定被处理。由于一个请求没有明确的接收者，所以不能保证它一定会被处理，该请求可能一直传到链的末端都得不到处理。</li><li>对比较长的职责链，请求的处理可能涉及多个处理对象，系统性能将受到一定影响。</li><li>职责链建立的合理性要靠客户端来保证，增加了客户端的复杂性，可能会由于职责链的错误设置而导致系统出错，如可能会造成循环调用。</li></ul></li></ul>]]></content>
    
    
    <summary type="html">设计模式-责任链模式</summary>
    
    
    
    <category term="Java" scheme="https://www.naste.top:1024/categories/Java/"/>
    
    
    <category term="Java" scheme="https://www.naste.top:1024/tags/Java/"/>
    
    <category term="设计模式" scheme="https://www.naste.top:1024/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="责任链模式" scheme="https://www.naste.top:1024/tags/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-模板方法模式</title>
    <link href="https://www.naste.top:1024/posts/759022725.html"/>
    <id>https://www.naste.top:1024/posts/759022725.html</id>
    <published>2023-06-17T09:45:43.000Z</published>
    <updated>2023-06-18T06:45:32.569Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p>[TOC]</p><h1 id="什么是模板方法模式"><a href="#什么是模板方法模式" class="headerlink" title="什么是模板方法模式"></a>什么是模板方法模式</h1><p>模板方法模式（Template Method Pattern），又叫模板模式(Template Pattern)，在一个抽象类公开定义了执行它的方法的模板。它的子类可以按需要重写方法实现，但调用将以抽象类中定义的方式进行。</p><p>简单说，模板方法模式，定义一个操作中的算法的骨架，而将一些步骤延迟到子类中，使得子类可以不改变一个算法的结构，就可以重定义该算法的某些特定步骤，这种类型的设计模式属于行为型模式。</p><p>在模板方法模式中，有一个抽象父类，它定义了一组操作，这些操作是在算法中的不变部分。然后，每个子类都实现了这些操作中的一些或全部，以便根据需要进行定制。在子类中，可以使用父类中定义的操作来完成算法的一部分，也可以添加自己的实现来完成其他部分。</p><h1 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h1><p>对原理类图的说明：</p><ul><li>AbstractClass 抽象类， 类中实现了模板方法(template)，定义了算法的骨架，具体子类需要去实现 其它的抽象方法 operation2,3,4</li><li>ConcreteClass 实现抽象方法，假设是operation2,3,4, 以完成算法中特定子类的具体业务步骤</li></ul><p><img src="https://www.naste.top:9000/images/image-20230618142251707.png" alt="image-20230618142251707"></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>编写制作豆浆的程序，说明如下：</p><ul><li>制作豆浆的流程：选材—&gt;添加配料—&gt;浸泡—&gt;放到豆浆机打碎</li><li>通过添加不同的配料，可以制作出不同口味的豆浆</li><li>选材、浸泡和放到豆浆机打碎这几个步骤对于制作每种口味的豆浆都是一样的</li></ul><blockquote><p><strong>说明：因为模板方法模式，比较简单，很容易就想到这个方案，因此就直接使用，不再使用传统的方案来引出模板方法模式</strong></p></blockquote><h2 id="类图-1"><a href="#类图-1" class="headerlink" title="类图"></a>类图</h2><p><img src="https://www.naste.top:9000/images/image-20230618143104197.png" alt="image-20230618143104197"></p><h2 id="未使用模板方法模式的钩子方法"><a href="#未使用模板方法模式的钩子方法" class="headerlink" title="未使用模板方法模式的钩子方法"></a>未使用模板方法模式的钩子方法</h2><h3 id="SoyaMilk"><a href="#SoyaMilk" class="headerlink" title="SoyaMilk"></a>SoyaMilk</h3><blockquote><p><strong>抽象类，模板方法</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaofei.template;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象类，表示豆浆</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">SoyaMilk</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 模板方法：可以做成final，不让子类去覆盖</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">make</span><span class="params">()</span> &#123;</span><br><span class="line">        select();</span><br><span class="line">        addCondiment();</span><br><span class="line">        soak();</span><br><span class="line">        beat();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//选材料</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">select</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;第一步：选择新鲜的豆子&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加不同的配料：抽象方法，由子类具体实现</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">addCondiment</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//浸泡</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">soak</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;第三步：豆子和配料开始浸泡3H&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//榨汁</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">beat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;第四步：豆子和配料放入豆浆机榨汁&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="PeanutSoyaMilk"><a href="#PeanutSoyaMilk" class="headerlink" title="PeanutSoyaMilk"></a>PeanutSoyaMilk</h3><blockquote><p><strong>继承抽象方法和重写抽象方法中的方法</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象模板方法集成和重写</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PeanutSoyaMilk</span> <span class="keyword">extends</span> <span class="title class_">SoyaMilk</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">addCondiment</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;第二步：加入上好的花生&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ReadBeanSoyaMilk"><a href="#ReadBeanSoyaMilk" class="headerlink" title="ReadBeanSoyaMilk"></a>ReadBeanSoyaMilk</h3><blockquote><p><strong>继承抽象方法和重写抽象方法中的方法</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象模板方法集成和重写</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReadBeanSoyaMilk</span> <span class="keyword">extends</span> <span class="title class_">SoyaMilk</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">addCondiment</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;第二步：加入上好的红豆&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=======制作红豆豆浆=======&quot;</span>);</span><br><span class="line">        <span class="type">SoyaMilk</span> <span class="variable">redBeanSoyaMilk</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReadBeanSoyaMilk</span>();</span><br><span class="line">        redBeanSoyaMilk.make();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=======制作花生豆浆=======&quot;</span>);</span><br><span class="line">        <span class="type">SoyaMilk</span> <span class="variable">peanutSoyaMilk</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PeanutSoyaMilk</span>();</span><br><span class="line">        peanutSoyaMilk.make();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://www.naste.top:9000/images/image-20230618143758209.png" alt="image-20230618143758209"></p><h2 id="使用模板方法模式的钩子方法"><a href="#使用模板方法模式的钩子方法" class="headerlink" title="使用模板方法模式的钩子方法"></a>使用模板方法模式的钩子方法</h2><p>在模板方法模式的父类中，可以定义一个方法，它默认不做任何事，子类可以视情况要不要覆盖它，该方法称为“钩子”。还是用上面做豆浆的例子来讲解，比如，我们还希望制作纯豆浆，不添加任何的配料，请使用钩子方法对前面的模板方法进行改造。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// RedBeanSoyaMilk.java/PeanutSoyaMilk.java同上，略</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象类，表示豆浆，SoyaMilk</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">SoyaMilk</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//模板方法：可以做成final，不让子类去覆盖</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">make</span><span class="params">()</span> &#123;</span><br><span class="line">select();</span><br><span class="line"><span class="keyword">if</span>(customerWantCondiment()) &#123;</span><br><span class="line">addCondiment();</span><br><span class="line">&#125;</span><br><span class="line">soak();</span><br><span class="line">beat();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.选材料</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">select</span><span class="params">()</span> &#123; System.out.println(<span class="string">&quot;第一步：选择新鲜的豆子&quot;</span>); &#125;</span><br><span class="line"><span class="comment">//2.添加不同的配料：抽象方法，由子类具体实现</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">addCondiment</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">//3.浸泡</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">soak</span><span class="params">()</span> &#123; System.out.println(<span class="string">&quot;第三步：豆子和配料开始浸泡3H&quot;</span>); &#125;</span><br><span class="line"><span class="comment">//4.榨汁</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">beat</span><span class="params">()</span> &#123; System.out.println(<span class="string">&quot;第四步：豆子和配料放入豆浆机榨汁&quot;</span>); &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//钩子方法：决定是否需要添加配料</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">customerWantCondiment</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//默认情况下是要加配料的</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PureSoyaMilk</span> <span class="keyword">extends</span> <span class="title class_">SoyaMilk</span> &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">addCondiment</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// 添加配料的方法 空实现 即可</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">customerWantCondiment</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;=制作纯豆浆=&quot;</span>);</span><br><span class="line"><span class="type">SoyaMilk</span> <span class="variable">pureSoyMilk</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PureSoyaMilk</span>();</span><br><span class="line">pureSoyMilk.make();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>当多个类中，有多个方法都有相同的方法，此时可以使用模板方法模式。例如上面制作豆浆的过程，都需要选择材料、制作工具，制作时间，这些步骤都是相同的，只是加入的其他材料不一致，此时加入材料的方法就需要具体的类去实现了，而制作的步骤顺序都是一样的，此时，制作豆浆的这个方法就是模板方法，且是final不可以被子类重写修改的。</p><p>模板方法模式的优点是可以提高代码的可扩展性和可维护性。缺点是可能会导致代码变得复杂和难以理解</p><ul><li><p>基本思想是：算法只存在于一个地方，也就是在父类中，容易修改。需要修改算法时，只要修改父类的模板方法或者已经实现的某些步骤，子类就会继承这些修改</p></li><li><p>好处：</p><ul><li><p>实现了最大化代码复用。父类的模板方法和已实现的某些步骤会被子类继承而直接使用；</p></li><li><p>既统一了算法，也提供了很大的灵活性。父类的模板方法确保了算法的结构保持不变，同时由子类提供部分步骤的实现</p></li></ul></li><li>该模式的不足之处：每一个不同的实现都需要一个子类实现，导致类的个数增加，使得系统更加庞大</li></ul><blockquote><p><strong>注意：一般模板方法都加上 final 关键字， 防止子类重写模板方法</strong></p></blockquote><ul><li><p>模板方法模式使用场景：</p><ul><li><p>当要完成在某个过程，该过程要执行一系列步骤 ，这一系列的步骤基本相同，但其个别步骤在实现时可能不同，通常考虑用模板方法模式来处理</p></li><li><p>统计某一段代码的执行时间也可以用模板方法模式：在前面打印出代码执行前的时间，后面再打印出代码执行后的时间，中间部分就是不同的执行代码</p></li></ul></li></ul>]]></content>
    
    
    <summary type="html">设计模式-模板方法模式</summary>
    
    
    
    <category term="Java" scheme="https://www.naste.top:1024/categories/Java/"/>
    
    
    <category term="Java" scheme="https://www.naste.top:1024/tags/Java/"/>
    
    <category term="设计模式" scheme="https://www.naste.top:1024/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="模板方法模式" scheme="https://www.naste.top:1024/tags/%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-迭代器模式</title>
    <link href="https://www.naste.top:1024/posts/1151138150.html"/>
    <id>https://www.naste.top:1024/posts/1151138150.html</id>
    <published>2023-06-17T02:05:59.000Z</published>
    <updated>2023-06-17T09:29:33.822Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p>[TOC]</p><h1 id="什么是迭代器模式"><a href="#什么是迭代器模式" class="headerlink" title="什么是迭代器模式"></a>什么是迭代器模式</h1><p>迭代器模式是一种行为设计模式，能在不暴露集合底层表现形式（列表、栈和树等）的情况下便利集合中的所有元素</p><h1 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h1><ul><li>当需要为聚合对象提供多种遍历方式时</li><li>当需要为遍历不同的聚合结构提供一个统一的接口时</li></ul><h1 id="迭代器设计模式类图"><a href="#迭代器设计模式类图" class="headerlink" title="迭代器设计模式类图"></a>迭代器设计模式类图</h1><p><img src="https://www.naste.top:9000/images/image-20230617171322142.png" alt="image-20230617171322142"></p><h1 id="迭代器中的角色"><a href="#迭代器中的角色" class="headerlink" title="迭代器中的角色"></a>迭代器中的角色</h1><ul><li>Iterator（迭代器）：这个接口负责定义按顺序遍历元素的接口。其中hasNext负责判断是否还存在下一个元素，next方法用于获取该元素并将元素指针后移。</li><li>ConcreteIterator（具体的迭代器）：该类负责实现Iterator所定义的接口，同时包含遍历集合所必要的信息。在此示例中，BookShelf类的实例保存至bookShelf中，指向当前书的下标保存在index中。</li><li>Aggregate（集合）：实现该接口的类都需要实现获取Iterator的方法</li><li>ConcreteAggregate（具体的集合）：该类负责具体实现Aggregate所定义的方法。在该示例中由BookShelf负责承担此功能。</li><li></li></ul><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h2 id="未使用迭代器"><a href="#未使用迭代器" class="headerlink" title="未使用迭代器"></a>未使用迭代器</h2><p>在Java中想要遍历一个arr中的所有元素时，我们可以使用for循环来遍历整个列表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; items = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; items.size(); i++) &#123;</span><br><span class="line">    System.out.println(items.get(i));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这显然是一种很自然的做法，但是若此时用于存储元素的底层数据结构发生变化，我们就需要根据不同的数据结构实现不同的遍历方式。此时的我仅仅作为服务的调用者，这显然给我带来的不必要的负担。因为我只是想要遍历一遍所有元素，但是我却需要深入了解服务开发者所使用的数据结构，并实现不同的遍历逻辑。</p><p>有没有一种方式可以让服务开发者实现一个易调用的接口，我只需要调用一个方法就可以完成元素的遍历。将这种思想抽象起来，便得到了迭代器模式。</p><h2 id="使用迭代器"><a href="#使用迭代器" class="headerlink" title="使用迭代器"></a>使用迭代器</h2><h3 id="Iterator接口"><a href="#Iterator接口" class="headerlink" title="Iterator接口"></a>Iterator接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 迭代器接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Iterator</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否还有下一个元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回当前元素并将当前位置指针指向下一个元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> element</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    T <span class="title function_">next</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="BookShelfIterator"><a href="#BookShelfIterator" class="headerlink" title="BookShelfIterator"></a>BookShelfIterator</h3><blockquote><p><strong>迭代器接口实现</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaofei.iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookShelfIterator</span> <span class="keyword">implements</span> <span class="title class_">Iterator</span>&lt;Book&gt;&#123;</span><br><span class="line">    <span class="keyword">private</span> BookShelf bookShelf;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BookShelfIterator</span><span class="params">(BookShelf bookShelf)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bookShelf = bookShelf;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookShelf.getLength() &gt; index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> bookShelf.getBookAt(index);</span><br><span class="line">        index++;</span><br><span class="line">        <span class="keyword">return</span> book;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Aggrate"><a href="#Aggrate" class="headerlink" title="Aggrate"></a>Aggrate</h3><blockquote><p><strong>获取迭代器</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Aggregate</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取迭代器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Iterator</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Iterator&lt;T&gt; <span class="title function_">getIterator</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="BookShelf"><a href="#BookShelf" class="headerlink" title="BookShelf"></a>BookShelf</h3><blockquote><p><strong>获取迭代器接口实现和添加额外需要使用的方法</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaofei.iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookShelf</span> <span class="keyword">implements</span> <span class="title class_">Aggregate</span>&lt;Book&gt; &#123;</span><br><span class="line">    List&lt;Book&gt; bookList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Iterator&lt;Book&gt; <span class="title function_">getIterator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BookShelfIterator</span>(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getLength</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.bookList.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">appendBook</span><span class="params">(Book book)</span> &#123;</span><br><span class="line">        bookList.add(book);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">getBookAt</span><span class="params">(Integer position)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.bookList.get(position);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Book类"><a href="#Book类" class="headerlink" title="Book类"></a>Book类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 书类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String bookName;</span><br><span class="line">    <span class="keyword">private</span> Double price;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">BookShelf</span> <span class="variable">bookShelf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BookShelf</span>();</span><br><span class="line">    bookShelf.appendBook(<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;文城&quot;</span>, <span class="number">55.0</span>,<span class="string">&quot;余华&quot;</span>));</span><br><span class="line">    bookShelf.appendBook(<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;机器学习&quot;</span>, <span class="number">63.0</span>,<span class="string">&quot;周志华&quot;</span>));</span><br><span class="line">    bookShelf.appendBook(<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;统计学习方法&quot;</span>, <span class="number">82.0</span>,<span class="string">&quot;李航&quot;</span>));</span><br><span class="line"></span><br><span class="line">    Iterator&lt;Book&gt; iterator = bookShelf.getIterator();</span><br><span class="line">    <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">        <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">        System.out.println(<span class="string">&quot;book = &quot;</span> + book);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://www.naste.top:9000/images/image-20230617171542664.png" alt="image-20230617171542664"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>迭代器模式是一种行为设计模式，它让你能在不暴露集合底层表现形式(列表、栈和树等)的情况下遍历集合中所有的元素。迭代器模式将集合对象的遍历操作从集合类中拆分出来，放到迭代器类中，让两者的职责更加单一。</p><p>迭代器模式的主要思想是将集合的遍历行为抽取为单独的迭代器对象。除实现自身算法外，迭代器还封装了遍历操作的所有细节，比如当前位置和末尾剩余元素的数量、同时还有提供一个获取集合元素的基本方法。客户端可不断调用该方法直到它不返回任何内容 ( 已遍历所有元素 )、所有迭代器必须实现相同的接口 (只要有合适的迭代器，客户端代码就能兼容任何类型的集合或遍历算法)。</p>]]></content>
    
    
    <summary type="html">设计模式-迭代器模式</summary>
    
    
    
    <category term="Java" scheme="https://www.naste.top:1024/categories/Java/"/>
    
    
    <category term="Java" scheme="https://www.naste.top:1024/tags/Java/"/>
    
    <category term="设计模式" scheme="https://www.naste.top:1024/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="迭代器模式" scheme="https://www.naste.top:1024/tags/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Navicat重置试用时间</title>
    <link href="https://www.naste.top:1024/posts/1384618004.html"/>
    <id>https://www.naste.top:1024/posts/1384618004.html</id>
    <published>2023-06-07T08:17:31.000Z</published>
    <updated>2023-06-07T12:46:57.571Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p>[TOC]</p><h1 id="创建清理试用信息bat"><a href="#创建清理试用信息bat" class="headerlink" title="创建清理试用信息bat"></a>创建清理试用信息bat</h1><blockquote><p><strong>创建后缀为<code>.bat</code>格式文件</strong></p></blockquote><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> Delete HKEY_CURRENT_USER\Software\PremiumSoft\NavicatPremium\Registration[version and language]</span><br><span class="line"><span class="keyword">for</span> /f <span class="variable">%%i</span> <span class="keyword">in</span> (&#x27;&quot;REG QUERY &quot;HKEY_CURRENT_USER\Software\PremiumSoft\NavicatPremium&quot; /s | <span class="built_in">findstr</span> /L Registration&quot;&#x27;) <span class="keyword">do</span> (</span><br><span class="line">    reg delete <span class="variable">%%i</span> /va /f</span><br><span class="line">)</span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> Delete Info folder under HKEY_CURRENT_USER\Software\Classes\CLSID</span><br><span class="line"><span class="keyword">for</span> /f <span class="variable">%%i</span> <span class="keyword">in</span> (&#x27;&quot;REG QUERY &quot;HKEY_CURRENT_USER\Software\Classes\CLSID&quot; /s | <span class="built_in">findstr</span> /E Info&quot;&#x27;) <span class="keyword">do</span> (</span><br><span class="line">    reg delete <span class="variable">%%i</span> /va /f</span><br><span class="line">)</span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> Finish</span><br><span class="line"></span><br><span class="line"><span class="built_in">pause</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Navicat重置试用时间</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>设计模式-建造者模式</title>
    <link href="https://www.naste.top:1024/posts/709379917.html"/>
    <id>https://www.naste.top:1024/posts/709379917.html</id>
    <published>2023-06-07T07:55:57.000Z</published>
    <updated>2023-06-08T13:14:00.812Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p>[TOC]</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://zhuanlan.zhihu.com/p/143101326">https://zhuanlan.zhihu.com/p/143101326</a></li><li><a href="https://zhuanlan.zhihu.com/p/58093669">https://zhuanlan.zhihu.com/p/58093669</a></li></ul><h1 id="什么是建造者模式"><a href="#什么是建造者模式" class="headerlink" title="什么是建造者模式"></a>什么是建造者模式</h1><p>建造者模式是一种创建型设计模式，它可以将对象的构建与表示分离开来，以便相同的构建过程可以创建不同的表示形式。它允许您创建复杂的对象，同时对其构建过程进行细粒度的控制。</p><p>在该模式中，一个Director对象负责根据用户输入指示生成正确的产品。该模式通常用于处理复杂的对象，例如包含多个子组件以及需要执行许多步骤的对象。建造者模式根据建造过程不同分为标准建造者模式和流式建造者模式。在标准建造者模式中，我们使用多个方法来设置建造步骤，在流式建造者模式中，我们使用实现链式调用的单个方法来设置步骤。</p><h2 id="四个角色"><a href="#四个角色" class="headerlink" title="四个角色"></a>四个角色</h2><p><img src="https://www.naste.top:9000/images/image-20230608205738300.png" alt="image-20230608205738300"></p><p><strong>Product（产品角色）：</strong> 一个具体的产品对象。</p><p><strong>Builder（抽象建造者）：</strong> 创建一个Product对象的各个部件指定的抽象接口。</p><p><strong>ConcreteBuilder（具体建造者）：</strong> 实现抽象接口，构建和装配各个部件。</p><p><strong>Director（指挥者）：</strong> 构建一个使用Builder接口的对象。它主要是用于创建一个复杂的对象。它主要有两个作用，一是：隔离了客户与对象的生产过程，二是：负责控制产品对象的生产过程。</p><blockquote><p>拿其中两个套餐举例</p><p>套餐A:汉堡，薯条，大鸡腿<br>套餐B:汉堡，薯条，小鸡腿，小可乐，小披萨</p><p>其中薯条和汉堡可大可小，并且必须有，<br>其它的都为固定大小，但是你可以选择有或没有</p></blockquote><h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><blockquote><p><strong>当一个类的构造函数参数个数超过4个，而且这些参数有些是可选的参数，考虑使用构造者模式</strong></p></blockquote><p>这个就非常重要了，因为如果你学了个东西，都不知道用来解决什么问题，你说有什么用？理解使用场景的的重要性要远高于你是不是会实现这个模式，因为只要你知道什么问题可以使用builder模式来解决，那你即使不会写，也可以在调查相关资料后完成。<br>我不想说一些大而正确的术语来把你搞蒙，我们只针对具体的问题，至于延展性的思考，随着你知识的增长，逐渐会明白的。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>KFC套餐案例：假如目前KFC里面有很多个套餐</p><ul><li>在套餐里面有必点，也有选点，然后每个单品又有大小之分</li><li>必点：汉堡（hamburger），薯条（chips）</li><li>选点：鸡腿（chicken），可乐（cola），披萨（pizza）</li></ul><p>我们如何构成这么多套餐实例呢？</p><p>我们不使用建造者模式也能构建代码，但是建造者模式会让代码看上去更装逼，代码到后期更结构化更容易维护和拓展</p><p>首先构建这个实体类`KFC</p><h2 id="实体类KFC"><a href="#实体类KFC" class="headerlink" title="实体类KFC"></a>实体类KFC</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实体类`KFC</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KFC</span> &#123;</span><br><span class="line">    <span class="comment">//套餐必点</span></span><br><span class="line">    <span class="keyword">private</span> String hamburger;</span><br><span class="line">    <span class="keyword">private</span> String chips;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//套餐选点</span></span><br><span class="line">    <span class="keyword">private</span> String chicken;</span><br><span class="line">    <span class="keyword">private</span> String cola;</span><br><span class="line">    <span class="keyword">private</span> String pizza;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="非建造者模式代码"><a href="#非建造者模式代码" class="headerlink" title="非建造者模式代码"></a>非建造者模式代码</h2><p>我们的想法是不是折叠构造函数来创建实例，下面来尝试一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实体类`KFC</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KFC</span> &#123;</span><br><span class="line">    <span class="comment">//套餐必点</span></span><br><span class="line">    <span class="keyword">private</span> String hamburger;</span><br><span class="line">    <span class="keyword">private</span> String chips;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//套餐选点</span></span><br><span class="line">    <span class="keyword">private</span> String chicken;</span><br><span class="line">    <span class="keyword">private</span> String cola;</span><br><span class="line">    <span class="keyword">private</span> String pizza;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//必点套餐A</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">KFC</span><span class="params">(String hamburger, String chips)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(hamburger, chips, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//套餐B</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">KFC</span><span class="params">(String hamburger, String chips, String chicken)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(hamburger, chips, chicken, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//套餐C</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">KFC</span><span class="params">(String hamburger, String chips, String chicken, String cola)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(hamburger, chips, chicken, cola, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//......还有好多种组合方式，你会发现使用折叠构造函数的方法十分复杂</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//全选</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">KFC</span><span class="params">(String hamburger, String chips, String chicken, String cola, String pizza)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.hamburger = hamburger;</span><br><span class="line">        <span class="built_in">this</span>.chips = chips;</span><br><span class="line">        <span class="built_in">this</span>.chicken = chicken;</span><br><span class="line">        <span class="built_in">this</span>.cola = cola;</span><br><span class="line">        <span class="built_in">this</span>.pizza = pizza;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们会发现使用折叠构造函数的方式很复杂，很恶心，代码看都不想看</p><p>那么有人会想，我可以使用<code>set</code>方法来创建，我只要一个必点构造就好了，那继续模拟咯</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实体类`KFC</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KFC</span> &#123;</span><br><span class="line">    <span class="comment">//套餐必点</span></span><br><span class="line">    <span class="keyword">private</span> String hamburger;</span><br><span class="line">    <span class="keyword">private</span> String chips;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//套餐选点</span></span><br><span class="line">    <span class="keyword">private</span> String chicken;</span><br><span class="line">    <span class="keyword">private</span> String cola;</span><br><span class="line">    <span class="keyword">private</span> String pizza;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//必点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">KFC</span><span class="params">(String hamburger, String chips)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.hamburger = hamburger;</span><br><span class="line">        <span class="built_in">this</span>.chips = chips;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//set方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setChicken</span><span class="params">(String chicken)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.chicken = chicken;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCola</span><span class="params">(String cola)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.cola = cola;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPizza</span><span class="params">(String pizza)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.pizza = pizza;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//实例化对象，你会发现这种方式就友好很多</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">KFC</span> <span class="variable">kfc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">KFC</span>(<span class="string">&quot;大汉堡&quot;</span>, <span class="string">&quot;大薯条&quot;</span>);</span><br><span class="line">        <span class="comment">//加小份可乐</span></span><br><span class="line">        kfc.setCola(<span class="string">&quot;小可乐&quot;</span>);</span><br><span class="line">        <span class="comment">//加个鸡腿</span></span><br><span class="line">        kfc.setChicken(<span class="string">&quot;大鸡腿&quot;</span>);</span><br><span class="line">        System.out.println(kfc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你会发现使用<code>set</code>方式就友好了很多</p><p>这个虽然友好了很多，但是也有点小毛病，就是你<strong>set太随意了，我可能这个套餐里面没有这个单品，而使用set的人却不知道</strong>，造成错误的套餐出现！。</p><p>为了解决上面的两种问题：一种设计模式解决一类问题，所以<strong>建造者模式</strong>就出现了</p><h2 id="建造者模式代码"><a href="#建造者模式代码" class="headerlink" title="建造者模式代码"></a>建造者模式代码</h2><h3 id="产品"><a href="#产品" class="headerlink" title="产品"></a>产品</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * KFC产品</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KFC</span> &#123;</span><br><span class="line">    <span class="comment">//套餐必点</span></span><br><span class="line">    <span class="keyword">private</span> String hamburger;</span><br><span class="line">    <span class="keyword">private</span> String chips;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//套餐选点</span></span><br><span class="line">    <span class="keyword">private</span> String chicken;</span><br><span class="line">    <span class="keyword">private</span> String cola;</span><br><span class="line">    <span class="keyword">private</span> String pizza;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//必点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">KFC</span><span class="params">(String hamburger, String chips)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.hamburger = hamburger;</span><br><span class="line">        <span class="built_in">this</span>.chips = chips;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//set方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setChicken</span><span class="params">(String chicken)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.chicken = chicken;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCola</span><span class="params">(String cola)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.cola = cola;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPizza</span><span class="params">(String pizza)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.pizza = pizza;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;KFC&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;hamburger=&#x27;&quot;</span> + hamburger + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, chips=&#x27;&quot;</span> + chips + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, chicken=&#x27;&quot;</span> + chicken + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, cola=&#x27;&quot;</span> + cola + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, pizza=&#x27;&quot;</span> + pizza + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Builder"><a href="#Builder" class="headerlink" title="Builder"></a>Builder</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义一个接口，表明需要建造什么，得到什么</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Builder</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setChicken</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setCola</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setPizza</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    KFC <span class="title function_">getKFC</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="套餐A"><a href="#套餐A" class="headerlink" title="套餐A"></a>套餐A</h3><p>此时应该注意，这个时候还没有生产套餐，只是定义套餐</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 套餐A</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteBuilder1</span> <span class="keyword">implements</span> <span class="title class_">Builder</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> KFC kfc;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这一步非常重要</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ConcreteBuilder1</span><span class="params">(String hamburger, String chips)</span> &#123;</span><br><span class="line">        kfc = <span class="keyword">new</span> <span class="title class_">KFC</span>(hamburger, chips);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setChicken</span><span class="params">()</span> &#123;</span><br><span class="line">        kfc.setChicken(<span class="string">&quot;大鸡腿&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCola</span><span class="params">()</span> &#123;</span><br><span class="line">        kfc.setCola(<span class="literal">null</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;套餐A里面没有可乐&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPizza</span><span class="params">()</span> &#123;</span><br><span class="line">        kfc.setPizza(<span class="literal">null</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;套餐A里面没有披萨&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> KFC <span class="title function_">getKFC</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> kfc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="套餐B"><a href="#套餐B" class="headerlink" title="套餐B"></a>套餐B</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 套餐B</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteBuilder2</span> <span class="keyword">implements</span> <span class="title class_">Builder</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> KFC kfc;</span><br><span class="line">    <span class="comment">//这一步非常重要</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ConcreteBuilder2</span><span class="params">(String hamburger,String chips)</span>&#123;</span><br><span class="line">        kfc = <span class="keyword">new</span> <span class="title class_">KFC</span>(hamburger,chips);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setChicken</span><span class="params">()</span> &#123;</span><br><span class="line">        kfc.setChicken(<span class="string">&quot;小鸡腿&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCola</span><span class="params">()</span> &#123;</span><br><span class="line">        kfc.setCola(<span class="string">&quot;小可乐&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPizza</span><span class="params">()</span> &#123;</span><br><span class="line">        kfc.setPizza(<span class="string">&quot;小披萨&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> KFC <span class="title function_">getKFC</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> kfc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Director"><a href="#Director" class="headerlink" title="Director"></a>Director</h3><blockquote><p><strong>真正的执行者，这里把他当作服务员，此时你像服务员点餐</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义一个接口，表明需要建造什么，得到什么</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Builder</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setChicken</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setCola</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setPizza</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    KFC <span class="title function_">getKFC</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BuilderTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//套餐A</span></span><br><span class="line">        System.out.println(<span class="string">&quot;======套餐A======&quot;</span>);</span><br><span class="line">        <span class="type">Builder</span> <span class="variable">concreteBuilder1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcreteBuilder1</span>(<span class="string">&quot;大汉堡&quot;</span>, <span class="string">&quot;小薯条&quot;</span>);</span><br><span class="line">        <span class="type">KFC</span> <span class="variable">kfc1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Director</span>().build(concreteBuilder1);</span><br><span class="line">        System.out.println(kfc1);</span><br><span class="line">        <span class="comment">//套餐B</span></span><br><span class="line">        System.out.println(<span class="string">&quot;======套餐B======&quot;</span>);</span><br><span class="line">        <span class="type">Builder</span> <span class="variable">concreteBuilder2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcreteBuilder2</span>(<span class="string">&quot;小汉堡&quot;</span>, <span class="string">&quot;小薯条&quot;</span>);</span><br><span class="line">        <span class="type">KFC</span> <span class="variable">kfc2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Director</span>().build(concreteBuilder2);</span><br><span class="line">        System.out.println(kfc2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://www.naste.top:9000/images/image-20230608210618559.png" alt="image-20230608210618559"></p><p>到了这里你还是会觉得有点麻烦，你会发现，单品可有可无的选择上面你十分的被动，代码看上去也很怪，如果你下次想全部单品先选上，再去选套餐的时候，你又要新建一个新的指导者。</p><p>我觉得普通的建造者模式不适合参数的可有可无的选择，<strong>普通的建造者模式更侧重调控次序</strong>，在有些情况下需要简化系统结构</p><h2 id="简化版的建造者模式"><a href="#简化版的建造者模式" class="headerlink" title="简化版的建造者模式"></a>简化版的建造者模式</h2><h3 id="采用链式编程的方式"><a href="#采用链式编程的方式" class="headerlink" title="采用链式编程的方式"></a>采用链式编程的方式</h3><p>这种模式更加灵活，更加符合定义</p><p>既然Director是变化的，并且其实在生活中我们自己本身就是Director,所以这个时候我们可以<strong>把Director这个角色去掉</strong>，因为我们自身就是指导者</p><h3 id="产品-1"><a href="#产品-1" class="headerlink" title="产品"></a>产品</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实体类`KFC</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KFC</span> &#123;</span><br><span class="line">    <span class="comment">//套餐必点</span></span><br><span class="line">    <span class="keyword">private</span> String hamburger;</span><br><span class="line">    <span class="keyword">private</span> String chips;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//套餐选点</span></span><br><span class="line">    <span class="keyword">private</span> String chicken;</span><br><span class="line">    <span class="keyword">private</span> String cola;</span><br><span class="line">    <span class="keyword">private</span> String pizza;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">KFC</span><span class="params">(String hamburger,String chips)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.hamburger = hamburger;</span><br><span class="line">        <span class="built_in">this</span>.hamburger = chips;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setChicken</span><span class="params">(String chicken)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.chicken = chicken;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCola</span><span class="params">(String cola)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.cola = cola;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPizza</span><span class="params">(String pizza)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.pizza = pizza;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;KFC&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;hamburger=&#x27;&quot;</span> + hamburger + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, chips=&#x27;&quot;</span> + chips + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, chicken=&#x27;&quot;</span> + chicken + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, cola=&#x27;&quot;</span> + cola + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, pizza=&#x27;&quot;</span> + pizza + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="抽象建造者（Builder）"><a href="#抽象建造者（Builder）" class="headerlink" title="抽象建造者（Builder）"></a>抽象建造者（Builder）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义一个接口，表明需要建造什么，得到什么</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Builder</span> &#123;</span><br><span class="line">    <span class="keyword">abstract</span> Builder <span class="title function_">setChicken</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> Builder <span class="title function_">setCola</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> Builder <span class="title function_">setPizza</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> KFC <span class="title function_">getKFC</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="具体建造者-ConcreteBuilder"><a href="#具体建造者-ConcreteBuilder" class="headerlink" title="具体建造者(ConcreteBuilder)"></a>具体建造者(ConcreteBuilder)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteBuilder</span> <span class="keyword">extends</span> <span class="title class_">Builder</span> &#123;</span><br><span class="line">    KFC kfc;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ConcreteBuilder</span><span class="params">(String hamburger,String chips)</span>&#123;</span><br><span class="line">        kfc = <span class="keyword">new</span> <span class="title class_">KFC</span>(hamburger,chips);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    Builder <span class="title function_">setChicken</span><span class="params">()</span> &#123;</span><br><span class="line">        kfc.setChicken(<span class="string">&quot;鸡腿&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    Builder <span class="title function_">setCola</span><span class="params">()</span> &#123;</span><br><span class="line">        kfc.setCola(<span class="string">&quot;可乐&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    Builder <span class="title function_">setPizza</span><span class="params">()</span> &#123;</span><br><span class="line">        kfc.setPizza(<span class="string">&quot;披萨&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    KFC <span class="title function_">getKFC</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> kfc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BuilderTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">KFC</span> <span class="variable">kfc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcreteBuilder</span>(<span class="string">&quot;汉堡&quot;</span>, <span class="string">&quot;薯条&quot;</span>).setChicken().setCola().getKFC();</span><br><span class="line">        System.out.println(kfc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://www.naste.top:9000/images/image-20230608211039517.png" alt="image-20230608211039517"></p><p>如果不需要抽象建造者的角色来规定生产内容，那么代码到这里其实还有进一步的简化空间。</p><h2 id="使用静态内部类的方式"><a href="#使用静态内部类的方式" class="headerlink" title="使用静态内部类的方式"></a>使用静态内部类的方式</h2><blockquote><p><strong>进一步简化</strong></p></blockquote><h3 id="产品-2"><a href="#产品-2" class="headerlink" title="产品"></a>产品</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaofei.builder;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实体类`KFC</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KFC</span> &#123;</span><br><span class="line">    <span class="comment">//套餐必点</span></span><br><span class="line">    <span class="keyword">private</span> String hamburger;</span><br><span class="line">    <span class="keyword">private</span> String chips;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//套餐选点</span></span><br><span class="line">    <span class="keyword">private</span> String chicken;</span><br><span class="line">    <span class="keyword">private</span> String cola;</span><br><span class="line">    <span class="keyword">private</span> String pizza;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//一定要有一个带有Builder参数的建造者</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">KFC</span><span class="params">(Builder builder)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.hamburger = builder.hamburger;</span><br><span class="line">        <span class="built_in">this</span>.chips = builder.chips;</span><br><span class="line">        <span class="built_in">this</span>.chicken = builder.chicken;</span><br><span class="line">        <span class="built_in">this</span>.cola = builder.cola;</span><br><span class="line">        <span class="built_in">this</span>.pizza = builder.pizza;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注意必须为静态内部类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Builder</span> &#123;</span><br><span class="line">        <span class="comment">//套餐必点</span></span><br><span class="line">        <span class="keyword">private</span> String hamburger;</span><br><span class="line">        <span class="keyword">private</span> String chips;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//套餐选点</span></span><br><span class="line">        <span class="keyword">private</span> String chicken;</span><br><span class="line">        <span class="keyword">private</span> String cola;</span><br><span class="line">        <span class="keyword">private</span> String pizza;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Builder</span><span class="params">(String hamburger, String chips)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.hamburger = hamburger;</span><br><span class="line">            <span class="built_in">this</span>.chips = chips;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">setChicken</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.chicken = <span class="string">&quot;小鸡腿&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">setCola</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.cola = <span class="string">&quot;小可乐&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">setPizza</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.pizza = <span class="string">&quot;小披萨&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//生成一个产品</span></span><br><span class="line">        <span class="keyword">public</span> KFC <span class="title function_">getKFC</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">KFC</span>(<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;KFC&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;hamburger=&#x27;&quot;</span> + hamburger + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, chips=&#x27;&quot;</span> + chips + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, chicken=&#x27;&quot;</span> + chicken + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, cola=&#x27;&quot;</span> + cola + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, pizza=&#x27;&quot;</span> + pizza + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BuilderTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">KFC</span> <span class="variable">kfc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">KFC</span>.Builder(<span class="string">&quot;大汉堡&quot;</span>, <span class="string">&quot;小薯条&quot;</span>).setChicken().setCola().getKFC();</span><br><span class="line">        System.out.println(kfc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://www.naste.top:9000/images/image-20230608211250487.png" alt="image-20230608211250487"></p><h1 id="建造者模式和抽象工厂模式的区别"><a href="#建造者模式和抽象工厂模式的区别" class="headerlink" title="建造者模式和抽象工厂模式的区别"></a>建造者模式和抽象工厂模式的区别</h1><p>通过上面的代码，你发现普通的建造者模式和抽象工厂模式真的很像，在建造者模式中的builder角色很像超级工厂，然后contracterBuilder很像具体的工厂，都是规定了建造的内容</p><p>那么它们之间 有什么区别呢</p><ul><li>建造者模式有指导者这个角色，直接返回一个组装好的产品，而抽象工厂模式返回一系列相关的产品，这些产品位于不同的产品等级结构，构成了一个产品族</li><li>建造者模式更适合复杂的产品构建</li><li>可以将抽象工厂模式理解成汽车零件生产工厂，而建造者模式看出组装工厂</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>学习一类技巧是为了解决一类问题，学习设计模式主要是为了理解它的思想，将来遇到代码的编写，使用这种模式会更加的方式，而没有必要刻意的去使用，但是需要刻意的去练习，形成这种思想</p><p>优点：</p><ul><li>复杂产品的创建步骤分解在不同的方法中，这些方法可以调用顺序不同，结果不同，创建结果很清晰</li></ul><p>缺点：</p><ul><li>如果产品的内部变化复杂，可能会导致需要定义很多具体建造者来实现这种变化。</li></ul>]]></content>
    
    
    <summary type="html">设计模式-建造者模式</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>设计模式-单例模式</title>
    <link href="https://www.naste.top:1024/posts/1776793711.html"/>
    <id>https://www.naste.top:1024/posts/1776793711.html</id>
    <published>2023-06-07T06:24:15.000Z</published>
    <updated>2023-06-07T07:15:00.427Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p>[TOC]</p><h1 id="什么是单例模式"><a href="#什么是单例模式" class="headerlink" title="什么是单例模式"></a>什么是单例模式</h1><p>单例设计模式(Singleton Pattern)是一种常用的软件设计模式，它保证一个类只有一个实例，并提供一个全局访问点。这种模式在需要确保某个类只有一个实例的情况下非常有用，常用于管理共享资源或限制对象的创建。</p><h1 id="单例模式应用场景"><a href="#单例模式应用场景" class="headerlink" title="单例模式应用场景"></a>单例模式应用场景</h1><ol><li>配置管理：在应用程序中，可能需要使用一些全局的配置信息，例如数据库连接字符串、日志级别等。这些配置信息通常只需要一份，因此可以使用单例模式来实现。通过单例模式，我们可以在应用程序启动时创建一个唯一的实例，并在整个应用程序中共享这个实例。这样可以避免多个线程或进程同时访问和修改配置信息，从而保证了配置信息的一致性和可靠性。</li><li>日志记录：在应用程序中，可能需要使用一个全局的日志记录器，用于记录应用程序的运行情况和错误信息。同样地，只需要一份日志记录器即可，因此可以使用单例模式来实现。通过单例模式，我们可以在应用程序启动时创建一个唯一的实例，并在整个应用程序中共享这个实例。这样可以避免多个线程或进程同时访问和修改日志记录器，从而保证了日志记录的一致性和可靠性。</li><li>缓存管理：在应用程序中，可能需要使用一个全局的缓存系统，用于缓存一些数据以提高应用程序的性能。同样地，只需要一份缓存系统即可，因此可以使用单例模式来实现。通过单例模式，我们可以在应用程序启动时创建一个唯一的实例，并在整个应用程序中共享这个实例。这样可以避免多个线程或进程同时访问和修改缓存系统，从而保证了缓存系统的一致性和可靠性。</li><li>资源管理：在应用程序中，可能需要使用一些全局的资源，例如文件句柄、网络连接等。这些资源通常只需要一份，因此可以使用单例模式来实现。通过单例模式，我们可以在应用程序启动时创建一个唯一的实例，并在整个应用程序中共享这个实例。这样可以避免多个线程或进程同时访问和修改资源，从而保证了资源的一致性和可靠性。</li></ol><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h2 id="懒汉式单例模式（线程不安全）"><a href="#懒汉式单例模式（线程不安全）" class="headerlink" title="懒汉式单例模式（线程不安全）"></a>懒汉式单例模式（线程不安全）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 懒汉式单例模式（线程不安全）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LazySingleton</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建一个私有静态变量instance,用于存储单例对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LazySingleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将构造方法设为私有，防止外部创建新的实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">LazySingleton</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取单例实例的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> LazySingleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 如果实例还未创建，创建一个新实例返回</span></span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">LazySingleton</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="懒汉式单例模式（线程安全）"><a href="#懒汉式单例模式（线程安全）" class="headerlink" title="懒汉式单例模式（线程安全）"></a>懒汉式单例模式（线程安全）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 懒汉式单例模式（线程安全）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SafeLazySingleton</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建一个私有静态变量instance,用于存储单例对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SafeLazySingleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将构造方法设为私有，防止外部创建新的实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">SafeLazySingleton</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取单例实例的方法，使用 synchronized 修饰以保证线程安全</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> SafeLazySingleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 如果实例还未创建，创建一个新实例返回</span></span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">SafeLazySingleton</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="饿汉式单例模式"><a href="#饿汉式单例模式" class="headerlink" title="饿汉式单例模式"></a>饿汉式单例模式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 饿汉式单例模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HungrySingleton</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 类加载时就创建单例实例，使用 final 修饰以保证实例唯一性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">HungrySingleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HungrySingleton</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将构造方法设为私有，防止外部创建新的实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">HungrySingleton</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取单例实例的方法，直接返回预先创建的实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> HungrySingleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="双重检查锁单例模式"><a href="#双重检查锁单例模式" class="headerlink" title="双重检查锁单例模式"></a>双重检查锁单例模式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 双重检查锁单例模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DoubleCheckSingleton</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查实例是否已创建的 volatile 变量，可见性保证线程安全</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> DoubleCheckSingleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将构造方法设为私有，防止外部创建新的实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">DoubleCheckSingleton</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取单例实例的方法，使用双重检查锁保证线程安全和性能</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> DoubleCheckSingleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (DoubleCheckSingleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 如果实例还未创建，创建一个新实例返回</span></span><br><span class="line">                    instance = <span class="keyword">new</span> <span class="title class_">DoubleCheckSingleton</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="静态内部类单例模式"><a href="#静态内部类单例模式" class="headerlink" title="静态内部类单例模式"></a>静态内部类单例模式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 静态内部类单例模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StaticInnerClassSingleton</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 私有构造函数，避免类在外部被实例化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">StaticInnerClassSingleton</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 静态内部类持有单例实例，类加载时不会进行初始化。</span></span><br><span class="line"><span class="comment">     * 直到第一次获取实例时才创建，并确保实例只被初始化一次。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">StaticInnerClassSingleton</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StaticInnerClassSingleton</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回唯一实例的方法，使用静态内部类中的INSTANCE进行实例的获取。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> StaticInnerClassSingleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Singleton.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="枚举单例模式"><a href="#枚举单例模式" class="headerlink" title="枚举单例模式"></a>枚举单例模式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 枚举单例模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">EnumSingleton</span> &#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">    <span class="type">int</span> value;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义构造函数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">EnumSingleton</span><span class="params">()</span> &#123;</span><br><span class="line">        value = <span class="number">1</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;INSTANCE now created!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaofei.singleton;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单例模式测试</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingletonTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lazySingletonTest</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;懒汉式单例模式（线程不安全）&quot;</span>);</span><br><span class="line">        <span class="type">LazySingleton</span> <span class="variable">instance</span> <span class="operator">=</span> LazySingleton.getInstance();</span><br><span class="line">        System.out.println(instance);</span><br><span class="line">        System.out.println(<span class="string">&quot;懒汉式单例模式（线程不安全）\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">safeLazySingleton</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;懒汉式单例模式（线程安全）&quot;</span>);</span><br><span class="line">        <span class="type">SafeLazySingleton</span> <span class="variable">instance</span> <span class="operator">=</span> SafeLazySingleton.getInstance();</span><br><span class="line">        System.out.println(instance);</span><br><span class="line">        System.out.println(<span class="string">&quot;懒汉式单例模式（线程安全）\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hungrySingleton</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;饿汉式单例模式&quot;</span>);</span><br><span class="line">        <span class="type">HungrySingleton</span> <span class="variable">instance</span> <span class="operator">=</span> HungrySingleton.getInstance();</span><br><span class="line">        System.out.println(instance);</span><br><span class="line">        System.out.println(<span class="string">&quot;饿汉式单例模式\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doubleCheckSingleton</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;双重检查锁单例模式&quot;</span>);</span><br><span class="line">        <span class="type">DoubleCheckSingleton</span> <span class="variable">instance</span> <span class="operator">=</span> DoubleCheckSingleton.getInstance();</span><br><span class="line">        System.out.println(instance);</span><br><span class="line">        System.out.println(<span class="string">&quot;双重检查锁单例模式\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">staticInnerClassSingleton</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;静态内部类单例模式&quot;</span>);</span><br><span class="line">        <span class="type">StaticInnerClassSingleton</span> <span class="variable">instance</span> <span class="operator">=</span> StaticInnerClassSingleton.getInstance();</span><br><span class="line">        System.out.println(instance);</span><br><span class="line">        System.out.println(<span class="string">&quot;静态内部类单例模式\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">enumSingleton</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;枚举单例模式&quot;</span>);</span><br><span class="line">        <span class="type">EnumSingleton</span> <span class="variable">singleton</span> <span class="operator">=</span> EnumSingleton.INSTANCE;</span><br><span class="line">        System.out.println(singleton.getValue());</span><br><span class="line">        singleton.setValue(<span class="number">2</span>);</span><br><span class="line">        System.out.println(singleton.getValue());</span><br><span class="line">        System.out.println(<span class="string">&quot;枚举单例模式\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://www.naste.top:9000/images/image-20230607151223998.png" alt="image-20230607151223998"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>懒汉式单例模式(线程不安全): <ul><li>优点：实现简单，性能好。 </li><li>缺点：线程不安全，需要在多线程环境下进行同步处理。</li></ul></li><li>懒汉式单例模式(线程安全): <ul><li>优点：线程安全，不需要额外的同步处理。</li><li>缺点：实现相对复杂，性能略差于饿汉式单例模式。</li></ul></li><li>饿汉式单例模式： <ul><li>优点：线程安全，性能好。 </li><li>缺点：创建实例时会耗费一定的时间和资源。</li></ul></li><li>双重检查锁单例模： <ul><li>优点：线程安全，性能好。 </li><li>缺点：实现相对复杂。</li></ul></li><li>静态内部类单例模式： <ul><li>优点：线程安全，性能好。 </li><li>缺点：实现相对复杂。</li></ul></li><li>枚举单例模式： <ul><li>优点：线程安全，性能好。 </li><li>缺点：枚举类型本身不能被修改，因此如果需要扩展功能则需要修改枚举类型。</li></ul></li></ul><p>综上所述，不同的单例模式适用于不同的场景。根据实际的需求选择合适的单例模式可以提高程序的效率，并保证单例实例的唯一性。</p>]]></content>
    
    
    <summary type="html">设计模式-单例模式</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>设计模式-代理模式</title>
    <link href="https://www.naste.top:1024/posts/3822496321.html"/>
    <id>https://www.naste.top:1024/posts/3822496321.html</id>
    <published>2023-06-05T07:06:05.000Z</published>
    <updated>2023-06-06T08:57:28.492Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p>[TOC]</p><h1 id="什么是代理模式"><a href="#什么是代理模式" class="headerlink" title="什么是代理模式"></a>什么是代理模式</h1><p>代理设计模式是一种结构型设计模式，它允许你控制对一个对象的访问。该模式通过在客户端和目标对象之间创建一个代理来实现这一目的。代理可以提供额外的功能，例如安全性、缓存、日志记录等。代理可以在运行时动态地添加或删除功能，从而使系统更加灵活。</p><p>代理模式通常包括以下几个角色：</p><ol><li>抽象角色：定义了代理接口，并提供了一些基本的方法。</li><li>委托角色：实现了抽象角色中定义的方法，并提供了与目标对象相同的接口。</li><li>目标角色：被代理的对象，也就是需要被保护或者控制访问的对象。</li></ol><p>代理模式可以分为静态代理和动态代理两种类型。静态代理是在编译时生成代理类，而动态代理是在运行时动态生成代理类。</p><h1 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h1><ol><li>远程方法调用(Remote Method Invocation,RMI):在分布式系统中，客户端可以通过代理对象来调用远程对象的方法。</li><li>动态代理：动态代理可以在运行时生成代理对象，从而实现更灵活的代码重用和扩展。</li><li>缓存：代理可以用于缓存数据，以提高性能并减少对数据库或其他存储系统的访问。</li><li>安全控制：代理可以用于实现安全控制，例如，一个代理服务器可以检查客户端的身份验证信息，以确保只有授权的用户才能访问受保护的资源。</li><li>日志记录：代理可以用于记录系统的行为，例如，代理服务器可以记录所有被代理对象的方法调用。</li><li>对象池：代理可以用于管理对象池，例如，代理服务器可以维护一组对象的池，并在需要时从池中获取对象而不是每次都创建新的对象。</li><li>延迟加载：代理可以用于延迟加载资源，例如，当需要使用某个资源时才加载它，而不是在程序启动时就加载。</li><li>命令注入：代理可以用于注入命令，例如，在一个系统中，客户端可以通过代理对象来执行特定的命令。</li><li>智能指针：智能指针是一种基于代理模式实现的指针类型，它可以自动管理内存并避免内存泄漏。</li><li>装饰器模式：装饰器模式也可以通过代理来实现，例如，一个装饰器可以包装一个对象并添加额外的功能。</li><li>买火车票不一定到火车站买，也可以去代售点。</li><li>银行卡和支票都是真实钱的代理对象。</li></ol><h1 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h1><p>静态代理是一种在<code>代码编写期</code>进行代理类和被代理类的关联的代理方式。</p><p>具体实现是创建一个代理类，通常需要实现与被代理类相同的接口或继承被代理类。</p><p>房东接口类：Landlord1Service，注意，静态代理实现它的真实对象只能有一个，多个的话，代理对象不能确定哪个对象需要被代理，会导致报错，JDK动态代理没这个问题。</p><h2 id="代码结构"><a href="#代码结构" class="headerlink" title="代码结构"></a>代码结构</h2><p><img src="https://www.naste.top:9000/images/image-20230606163813219.png" alt="image-20230606163813219"></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="房东接口"><a href="#房东接口" class="headerlink" title="房东接口"></a>房东接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 房东</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Landlord1Service</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 出租</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money 金额</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">rent</span><span class="params">(Integer money)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="租客"><a href="#租客" class="headerlink" title="租客"></a>租客</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 租客</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TenantImpl</span> <span class="keyword">implements</span> <span class="title class_">Landlord1Service</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rent</span><span class="params">(Integer money)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;租下&quot;</span> + money + <span class="string">&quot;元一个月的房子&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="中介"><a href="#中介" class="headerlink" title="中介"></a>中介</h3><blockquote><p><strong>中介这个时候就相当于代理</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 中介</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Created by njy on 2023/5/30</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyImpl</span> <span class="keyword">implements</span> <span class="title class_">Landlord1Service</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 房东有很多套房子，不想亲自出马了，于是找来了中介</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Landlord1Service target;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 优点就是在不改变原来的实现类的情况下对方法实现了增强</span></span><br><span class="line"><span class="comment">     * 缺点是如果原来的接口新增了方法，那么这里也要对应实现新的方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money 金额</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rent</span><span class="params">(Integer money)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[静态代理]交中介费&quot;</span>);</span><br><span class="line">        target.rent(money);</span><br><span class="line">        System.out.println(<span class="string">&quot;[静态代理]中介负责维修管理&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestProxy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 租客</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TenantImpl tenant;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 中介-代理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProxyImpl proxy;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.静态代理</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">TestStatic</span><span class="params">()</span> &#123;</span><br><span class="line">        tenant.rent(<span class="number">1000</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line">        proxy.rent(<span class="number">2000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://www.naste.top:9000/images/image-20230606163616461.png" alt="image-20230606163616461"></p><h3 id="静态代理应用场景"><a href="#静态代理应用场景" class="headerlink" title="静态代理应用场景"></a>静态代理应用场景</h3><p>适用场景：</p><ol><li>当代理对象只有一个时，可以使用静态代理</li><li>当被代理的类的接口比较稳定时，可以使用静态代理</li><li>当需要为多个被代理的类提供代理时，会导致代理类过多，不方便管理和维护，所以不建议使用静态代理。</li></ol><h1 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h1><p>JDK动态代理是一种比较常见的代理方式，它是在程序运行时动态生成代理类，也就是说我们在编写代码时并不知道具体代理的是什么类，而是在程序运行时动态生成。</p><h2 id="代码结构-1"><a href="#代码结构-1" class="headerlink" title="代码结构"></a>代码结构</h2><p><img src="https://www.naste.top:9000/images/image-20230606164651902.png" alt="image-20230606164651902"></p><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><h3 id="房东接口-1"><a href="#房东接口-1" class="headerlink" title="房东接口"></a>房东接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 房东</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Landlord2Service</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 出租</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">rent</span><span class="params">(Integer money)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="租客1"><a href="#租客1" class="headerlink" title="租客1"></a>租客1</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 租客1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teant1Impl</span> <span class="keyword">implements</span> <span class="title class_">Landlord2Service</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rent</span><span class="params">(Integer money)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;tenant1租下&quot;</span> + money + <span class="string">&quot;元一个月的房子&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="租客2"><a href="#租客2" class="headerlink" title="租客2"></a>租客2</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 租客2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tenant2Impl</span> <span class="keyword">implements</span> <span class="title class_">Landlord2Service</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rent</span><span class="params">(Integer money)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;tenant2租下&quot;</span> + money + <span class="string">&quot;元一个月的房子&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="中介-1"><a href="#中介-1" class="headerlink" title="中介"></a>中介</h3><blockquote><p><strong>中介—动态代理类</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JDK动态代理：就是把代理抽象了一下</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDKProxy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JDKProxy</span><span class="params">(Object target)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 给目标对象生成代理对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 代理生成的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getProxyInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(target.getClass().getClassLoader(),</span><br><span class="line">                target.getClass().getInterfaces(),</span><br><span class="line">                <span class="comment">//这里是要实现jdk代理InvocationHandler的接口，lambda表达式</span></span><br><span class="line">                (proxy, method, args) -&gt; &#123;</span><br><span class="line">                    <span class="comment">//执行对象方法</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;[JDK动态代理]交中介费&quot;</span>);</span><br><span class="line">                    method.invoke(target, args);</span><br><span class="line">                    System.out.println(<span class="string">&quot;[JDK动态代理]中介负责维修管理&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.xiaofei.proxy.jdkProxy.JDKProxy;</span><br><span class="line"><span class="keyword">import</span> com.xiaofei.proxy.jdkProxy.Landlord2Service;</span><br><span class="line"><span class="keyword">import</span> com.xiaofei.proxy.jdkProxy.Teant1Impl;</span><br><span class="line"><span class="keyword">import</span> com.xiaofei.proxy.jdkProxy.Tenant2Impl;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JDK动态代理测试</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDKProxyTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Teant1Impl teant1;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Tenant2Impl tenant2;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.JDK动态代理</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">TestJDK</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Landlord2Service</span> <span class="variable">proxyInstance1</span> <span class="operator">=</span> (Landlord2Service) <span class="keyword">new</span> <span class="title class_">JDKProxy</span>(teant1).getProxyInstance();</span><br><span class="line">        proxyInstance1.rent(<span class="number">2500</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="type">Landlord2Service</span> <span class="variable">proxyInstance2</span> <span class="operator">=</span> (Landlord2Service) <span class="keyword">new</span> <span class="title class_">JDKProxy</span>(tenant2).getProxyInstance();</span><br><span class="line">        proxyInstance2.rent(<span class="number">2500</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://www.naste.top:9000/images/image-20230606164538352.png" alt="image-20230606164538352"></p><h3 id="JDK动态代理应用场景"><a href="#JDK动态代理应用场景" class="headerlink" title="JDK动态代理应用场景"></a>JDK动态代理应用场景</h3><ol><li>对象必须实现一个或多个接口</li><li>代理类的代理方法不需要额外的逻辑</li></ol><h1 id="Cglib代理"><a href="#Cglib代理" class="headerlink" title="Cglib代理"></a>Cglib代理</h1><p>CGLIB代理是在运行时动态生成代理类的方式，它使用的库是cglib，和JDK代理相比，它不是动态的生成一个实现了接口的代理类，而是直接在内存中构建一个被代理类的子类，并重写父类的方法来进行代理。</p><h2 id="代码结构-2"><a href="#代码结构-2" class="headerlink" title="代码结构"></a>代码结构</h2><h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><h3 id="房东"><a href="#房东" class="headerlink" title="房东"></a>房东</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 房东</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Landlord3Service</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 出租房屋</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rent</span><span class="params">(Integer money)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;租下&quot;</span> + money + <span class="string">&quot;元一个月的房子&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Cglib代理-1"><a href="#Cglib代理-1" class="headerlink" title="Cglib代理"></a>Cglib代理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.cglib.proxy.Enhancer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cglib.proxy.MethodInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cglib.proxy.MethodProxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JDKProxy：cglib子类代理工厂</span></span><br><span class="line"><span class="comment"> * 1.代理的类不能为final</span></span><br><span class="line"><span class="comment"> * 2.目标对象的方法如果为final/static，那么就不会被拦截，也不会执行目标对象的业务方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CglibProxy</span> <span class="keyword">implements</span> <span class="title class_">MethodInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 目标对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CglibProxy</span><span class="params">(Object target)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getProxyInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1.工具类</span></span><br><span class="line">        <span class="type">Enhancer</span> <span class="variable">en</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Enhancer</span>();</span><br><span class="line">        <span class="comment">//2.设置父类</span></span><br><span class="line">        en.setSuperclass(target.getClass());</span><br><span class="line">        <span class="comment">//3.设置回调函数</span></span><br><span class="line">        en.setCallback(<span class="built_in">this</span>);</span><br><span class="line">        <span class="comment">//4.创建子类（代理对象）</span></span><br><span class="line">        <span class="keyword">return</span> en.create();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">intercept</span><span class="params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[Cglib代理]交中介费&quot;</span>);</span><br><span class="line">        method.invoke(target, objects);</span><br><span class="line">        System.out.println(<span class="string">&quot;[Cglib代理]中介负责维修管理&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.xiaofei.proxy.cglib.CglibProxy;</span><br><span class="line"><span class="keyword">import</span> com.xiaofei.proxy.cglib.Landlord3Service;</span><br><span class="line"><span class="keyword">import</span> lombok.RequiredArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * CglibProxy测试</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CglibProxyTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Landlord3Service landlord3Service;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Cglib代理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">TestCglib</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Landlord3Service</span> <span class="variable">proxyInstance</span> <span class="operator">=</span> (Landlord3Service) <span class="keyword">new</span> <span class="title class_">CglibProxy</span>(landlord3Service).getProxyInstance();</span><br><span class="line">        proxyInstance.rent(<span class="number">3000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://www.naste.top:9000/images/image-20230606165551152.png" alt="image-20230606165551152"></p><h2 id="Cglib代理应用场景"><a href="#Cglib代理应用场景" class="headerlink" title="Cglib代理应用场景"></a>Cglib代理应用场景</h2><ol><li>被代理的类没有实现接口或者无法实现接口</li><li>代理类的代理方法需要进行额外的逻辑，如事务处理等。</li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><strong>优点：</strong></p><ol><li>代理模式可以隐藏真是对象的实现细节，使客户端无需知晓真实对象的工作方式和结构。</li><li>通过代理类来间接访问真实类，可以在不修改真实类的情况下，对其进行扩展、优化或添加安全措施。</li><li>代理模式实现起来简单，易于扩展和维护，符合面向对象设计原则中的开闭原则。</li></ol><p><strong>缺点：</strong></p><ol><li>代理模式可能会引入额外的复杂性和间接性，增加程序设计和维护的难度。</li><li>对象代理可能会降低系统性能，特别是在处理大数据量或频繁调用的情况下，因为代理需要额外的计算和网络通信开销。</li></ol>]]></content>
    
    
    <summary type="html">设计模式-代理模式</summary>
    
    
    
    <category term="Java" scheme="https://www.naste.top:1024/categories/Java/"/>
    
    
    <category term="Java" scheme="https://www.naste.top:1024/tags/Java/"/>
    
    <category term="设计模式" scheme="https://www.naste.top:1024/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="代理模式" scheme="https://www.naste.top:1024/tags/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-工厂模式</title>
    <link href="https://www.naste.top:1024/posts/3439274786.html"/>
    <id>https://www.naste.top:1024/posts/3439274786.html</id>
    <published>2023-05-31T03:40:08.000Z</published>
    <updated>2023-06-07T07:54:42.405Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p>[TOC]</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><p>廖雪峰的官方网站：<a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1281319170474017">https://www.liaoxuefeng.com/wiki/1252599548343744/1281319170474017</a></p><p>博客文档：</p><ul><li><a href="https://blog.csdn.net/weixin_45433817/article/details/130934548">https://blog.csdn.net/weixin_45433817/article/details/130934548</a></li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p><a href="https://gitee.com/xiao-i-fei/xiaofei-design-mode">https://gitee.com/xiao-i-fei/xiaofei-design-mode</a></p><p><a href="https://github.com/xiao-i-fei/xiaofei-design-mode">https://github.com/xiao-i-fei/xiaofei-design-mode</a></p><h1 id="什么是工厂模式"><a href="#什么是工厂模式" class="headerlink" title="什么是工厂模式"></a>什么是工厂模式</h1><blockquote><p><strong>工厂设计模式的目的是使得创建对象和使用对象是分离的，调用者只管获取对象获取对象，无需知道对象是怎么创建的,工厂模式是一种创建型设计模式，它用于解耦对象的创建和使用。通常情况下，我们创建对象时需要使用<code>new操作符</code>，但是使用new操作符创建对象会使代码具有<code>耦合性</code>。工厂模式通过提供一个公共的接口，使得我们可以在<code>不暴露对象创建逻辑的情况下</code>创建对象。</strong></p></blockquote><h1 id="工厂模式的分类"><a href="#工厂模式的分类" class="headerlink" title="工厂模式的分类"></a>工厂模式的分类</h1><p>工厂模式分为三种类型：</p><ul><li>简单工厂</li><li>方法工厂</li><li>抽象工厂</li></ul><p>其本质就是对获取对象过程的抽象</p><h1 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h1><h2 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h2><blockquote><p>你需要一辆汽车，可以直接从工厂里提货，而不用关心它具体是怎么实现的</p><p>Hibernate换数据库只需要换方言和驱动就可以</p></blockquote><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><blockquote><p>日志记录器：记录可能记录到本地硬盘、系统事件、远程服务器等，用户可以选择记录日志到什么地方。</p><p>数据库访问，当用户不知道最后系统采用哪一类数据库，以及数据库可能有变化时。</p><p>设计一个连接服务器的框架，需要三个协议，”POP3”、”IMAP”、”HTTP”，可以把这三个作为产品类，共同实现一个接口</p></blockquote><h1 id="工厂模式实现"><a href="#工厂模式实现" class="headerlink" title="工厂模式实现"></a>工厂模式实现</h1><h2 id="传统模式"><a href="#传统模式" class="headerlink" title="传统模式"></a>传统模式</h2><p>在介绍工厂模式之前先来看看传统模式，以卖包子为例，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//简单的制作流程</span></span><br><span class="line"><span class="keyword">public</span> BaoZi <span class="title function_">createBaoZi</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">BaoZi</span> <span class="variable">baozi</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BaoZiImpl</span>();</span><br><span class="line">    <span class="comment">//准备材料</span></span><br><span class="line">    baozi.prepare();</span><br><span class="line">    <span class="comment">//制作包子</span></span><br><span class="line">    baozi.make();</span><br><span class="line">    <span class="comment">//蒸包子</span></span><br><span class="line">    baozi.braise();</span><br><span class="line">    <span class="keyword">return</span> baozi;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>包子肯定有很多种类吧，那我们可以直接在上述代码中添加根据包子的种类生成不同类型的对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 包子肯定有不同的馅：酸菜、豆沙、猪肉，那么他的材料、售价等方式也不同</span></span><br><span class="line"><span class="comment"> * 我们可以直接在上述代码中，添加根据包子的不同种类生成不同的对象。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> BaoZi <span class="title function_">createBaoZi</span><span class="params">(String type)</span> &#123;</span><br><span class="line">    <span class="type">BaoZi</span> <span class="variable">baoZi</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;suancai&quot;</span>:</span><br><span class="line">            baoZi = <span class="keyword">new</span> <span class="title class_">SuanCaiBaoZi</span>();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;dousha&quot;</span>:</span><br><span class="line">            baoZi = <span class="keyword">new</span> <span class="title class_">DouShaBaoZi</span>();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;pork&quot;</span>:</span><br><span class="line">            baoZi = <span class="keyword">new</span> <span class="title class_">PorkBaoZi</span>();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Invalid BaoZi Type&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//准备材料</span></span><br><span class="line">    baoZi.prepare();</span><br><span class="line">    <span class="comment">//制作包子</span></span><br><span class="line">    baoZi.make();</span><br><span class="line">    <span class="comment">//蒸包子</span></span><br><span class="line">    baoZi.braise();</span><br><span class="line">    <span class="keyword">return</span> baoZi;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://www.naste.top:9000/images/image-20230531172315922.png" alt="image-20230531172315922"></p><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.传统模式</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">traditonal</span><span class="params">()</span>&#123;</span><br><span class="line">    SaleBaoZi saleBaoZi=<span class="keyword">new</span> <span class="title class_">SaleBaoZi</span>();</span><br><span class="line">    <span class="comment">//以猪肉包为例</span></span><br><span class="line">    saleBaoZi.createBaoZi(<span class="string">&quot;pork&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h2><blockquote><p><strong>简单工程根据客户端的需求创建具体的实例，这种模式对调用者<code>隐藏了实例创建的过程</code>，也使得创建过程更加容易维护。</strong></p></blockquote><p>还是以卖包子为例，简单工厂模式实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 2.简单工厂方法:希望能够创建一个对象，但创建过程比较复杂，希望对外隐藏这些细节</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleFactory</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> BaoZi <span class="title function_">createBaoZi</span><span class="params">(String type)</span>&#123;</span><br><span class="line"> </span><br><span class="line">        BaoZi baoZi=<span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">switch</span> (type)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;suancai&quot;</span>:</span><br><span class="line">                baoZi=<span class="keyword">new</span> <span class="title class_">SuanCaiBaoZi</span>(<span class="string">&quot;酸菜包&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;dousha&quot;</span>:</span><br><span class="line">                baoZi=<span class="keyword">new</span> <span class="title class_">DouShaBaoZi</span>(<span class="string">&quot;豆沙包&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;lajioa&quot;</span>:</span><br><span class="line">                baoZi=<span class="keyword">new</span> <span class="title class_">PorkBaoZi</span>(<span class="string">&quot;猪肉包&quot;</span>);</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;beef&quot;</span>:</span><br><span class="line">                <span class="comment">//老板拓展业务了，新加了一个牛肉包类型的包子，那对于简单工厂模式而言，</span></span><br><span class="line">                <span class="comment">//于是就得修改源代码，那么就违反了ocp原则，假如新增100个？</span></span><br><span class="line">                baoZi=<span class="keyword">new</span> <span class="title class_">BeefBaoZi</span>(<span class="string">&quot;牛肉包&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Invalid BaoZi Type&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> baoZi;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时类图如下：</p><p><img src="https://www.naste.top:9000/images/image-20230531172545428.png" alt="image-20230531172545428"></p><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2.简单工厂模式</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">simpleFactory</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//以猪肉包为例</span></span><br><span class="line">    <span class="type">BaoZi</span> <span class="variable">pork</span> <span class="operator">=</span> SimpleFactory.createBaoZi(<span class="string">&quot;pork&quot;</span>);</span><br><span class="line">    pork.prepare();</span><br><span class="line">    pork.make();</span><br><span class="line">    pork.braise();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p> 相比传统模式，从类图上就可以看出来，在sale和baozi中间又<code>加了一层</code></p><p> 通过封装SimpleFactory这个类，我们将sale和baozi进行了解耦合。</p></blockquote><h2 id="方法工厂模式"><a href="#方法工厂模式" class="headerlink" title="方法工厂模式"></a>方法工厂模式</h2><p>简单工厂模式下，如果老板拓展业务了，加了一个牛肉种类的包子，就得在源码基础上修改，那么这就违背了<code>开闭原则（ocp）</code>，即对<code>扩展开放，对修改关闭</code>。于是，为了解决这个问题，就又了工厂方法模式。</p><blockquote><p><strong>工厂方法模式是一种更加抽象的工厂模式，它将工厂的职责抽象为接口，由具体的工厂实现创建具体的对象。工厂方法模式弱化了工厂的实现，使得<code>每个工厂只负责一个产品的创建。</code></strong></p></blockquote><p>抽象工厂MeAbStractFactory：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MeAbstractFactory</span> &#123;</span><br><span class="line">    BaoZi <span class="title function_">createBaoZi</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DouShaFactory：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DouShaFactory</span> <span class="keyword">implements</span> <span class="title class_">MeAbstractFactory</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> BaoZi <span class="title function_">createBaoZi</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DouShaBaoZi</span>(<span class="string">&quot;豆沙包&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SuanCaiFactory：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SuanCaiFactory</span> <span class="keyword">implements</span> <span class="title class_">MeAbstractFactory</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> BaoZi <span class="title function_">createBaoZi</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PorkBaoZi</span>(<span class="string">&quot;酸菜包&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>LaJiaoFactory：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SuanCaiFactory</span> <span class="keyword">implements</span> <span class="title class_">MeAbstractFactory</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> BaoZi <span class="title function_">createBaoZi</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PorkBaoZi</span>(<span class="string">&quot;辣椒包&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时的类图如下：</p><p><img src="https://www.naste.top:9000/images/image-20230531173424995.png" alt="image-20230531173424995"></p><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">methodFactory</span><span class="params">()</span>&#123;</span><br><span class="line">    MeAbstractFactory factory=<span class="keyword">new</span> <span class="title class_">PorkFactory</span>();</span><br><span class="line">    <span class="type">BaoZi</span> <span class="variable">pork</span> <span class="operator">=</span> factory.createBaoZi();</span><br><span class="line">    pork.prepare();</span><br><span class="line">    pork.make();</span><br><span class="line">    pork.braise();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>之前的SimpleFactory在createBaoZi中直接就new出来了，但在方法工厂中，我们将createBaoZi这个动作推迟到了MeAbStactFactory的子类（XXFactory）中才完成。好处就是，比如后期要卖个羊肉包，我们直接编写个羊肉包类，然后实现MeAbstractFactory类就，实现它自己的功能，这样完全不用修改原来的代码了，也就解决了违反OCP原则的问题。</p></blockquote><h2 id="抽象工厂"><a href="#抽象工厂" class="headerlink" title="抽象工厂"></a>抽象工厂</h2><blockquote><p>抽象工厂模式是基于工厂方法模式的基础上进行的。在这种模式中，每一个工厂不再只负责一个产品的创建，而是负责<code>一组产品的</code>创建。抽象工厂模式将每个产品组都提取为一个接口，每个工厂都负责一个产品组。</p></blockquote><p>假如老板的生意做大了，在北京开了个分店，并且不止卖包子，还卖蛋糕，那么该怎么拓展呢，很简单，只需要在抽象工厂类中新增创建蛋糕的抽象方法就行，如下：</p><p>AbstractFactory：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AbstractFactory</span> &#123;</span><br><span class="line">    <span class="comment">//制作包子</span></span><br><span class="line">    BaoZi <span class="title function_">createBaoZi</span><span class="params">(String type)</span>;</span><br><span class="line">    <span class="comment">//制作蛋糕</span></span><br><span class="line">    Cake <span class="title function_">createCake</span><span class="params">(String type)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BJFactory：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//北京分店</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BJFactory</span> <span class="keyword">implements</span> <span class="title class_">AbstractFactory</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> BaoZi <span class="title function_">createBaoZi</span><span class="params">(String type)</span> &#123;</span><br><span class="line">        BaoZi baoZi=<span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">switch</span> (type)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;suancai&quot;</span>:</span><br><span class="line">                baoZi=<span class="keyword">new</span> <span class="title class_">BJSuanCaiBao</span>(<span class="string">&quot;北京酸菜包&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;lajioa&quot;</span>:</span><br><span class="line">                baoZi=<span class="keyword">new</span> <span class="title class_">BJLaJiaoBao</span>(<span class="string">&quot;北京辣椒包&quot;</span>);</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> baoZi;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Cake <span class="title function_">createCake</span><span class="params">(String type)</span> &#123;</span><br><span class="line">        Cake cake=<span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">switch</span> (type)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;apple&quot;</span>:</span><br><span class="line">                cake=<span class="keyword">new</span> <span class="title class_">BJAppleCake</span>(<span class="string">&quot;北京苹果蛋糕&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;pear&quot;</span>:</span><br><span class="line">                cake=<span class="keyword">new</span> <span class="title class_">BJPearCake</span>(<span class="string">&quot;北京梨味蛋糕&quot;</span>);</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cake;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>可以看到，抽象工厂仅仅是在工厂方法模式下新增了一些接口，只是工厂模式的一个拓展，当抽象工厂只有一个产品体系的话就会退化成工厂模式，所以两者本质上没有太大的区别。</p></blockquote><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">abstractFactory</span><span class="params">()</span>&#123;</span><br><span class="line">    AbstractFactory factory=<span class="keyword">new</span> <span class="title class_">BJFactory</span>();</span><br><span class="line">    <span class="type">Cake</span> <span class="variable">apple</span> <span class="operator">=</span> factory.createCake(<span class="string">&quot;apple&quot;</span>);</span><br><span class="line">    <span class="type">BaoZi</span> <span class="variable">pork</span> <span class="operator">=</span> factory.createBaoZi(<span class="string">&quot;pork&quot;</span>);</span><br><span class="line"></span><br><span class="line">    apple.prepare();</span><br><span class="line">    apple.make();</span><br><span class="line">    apple.bake();</span><br><span class="line">    apple.sale();</span><br><span class="line"></span><br><span class="line">    pork.prepare();</span><br><span class="line">    pork.make();</span><br><span class="line">    pork.braise();</span><br><span class="line">    pork.sale();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="简单工厂模式-1"><a href="#简单工厂模式-1" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h2><ul><li><p>优点：</p><ul><li>简单工厂模式实现简单，易于理解和使用；</li><li>可以对对象的创建进行集中管理，客户端和具体实现解耦。</li></ul></li><li>缺点：<ul><li>工厂类负责创建所有对象，如果需要添加新类型的产品，则需要修改工厂类的代码，这违反了开闭原则；</li><li>工厂类职责过重，导致单一职责原则被破坏。</li></ul></li><li>适用场景：<ul><li>工厂类负责创建的对象较少，客户端不需要知道对象的创建过程；</li><li>客户端需要根据传递的参数来获取对应的对象。</li></ul></li></ul><h2 id="方法工厂模式-1"><a href="#方法工厂模式-1" class="headerlink" title="方法工厂模式"></a>方法工厂模式</h2><ul><li><p>优点： </p><ul><li>方法工厂模式具有良好的可扩展性，如果需要添加新类型的产品，只需要添加对应的工厂方法即可；</li><li>与简单工厂模式相比，方法工厂模式更符合开闭原则和单一职责原则。</li></ul></li><li>缺点：<ul><li>需要客户端自行选择使用哪个工厂方法，不能像简单工厂模式那样直接传参获取对应对象，因此对客户端的编写有一定要求。</li></ul></li><li>适用场景：<ul><li>应用中需要创建的对象较少，但是需要具备良好的可扩展性；</li><li>客户端可以自行选择创建哪种对象。</li></ul></li></ul><h2 id="抽象工厂-1"><a href="#抽象工厂-1" class="headerlink" title="抽象工厂"></a>抽象工厂</h2><ul><li><p>优点：</p><ul><li>抽象工厂模式可以创建多个产品族的产品，这些产品之间有相互依赖或约束关系，有助于保持系统的一致性和稳定性；</li><li>客户端与具体产品解耦，通过产品族的方式进行管理。</li></ul></li><li>缺点：<ul><li>抽象工厂模式增加了系统的抽象性和理解难度，不易于理解和修改；</li><li>新增产品族时需要修改工厂接口、工厂实现类和产品类，增加了系统的复杂性。</li></ul></li><li>适用场景：<ul><li>系统需要一系列相互依赖或约束的产品；</li><li>客户端不需要知道具体产品的创建过程，只需要知道产品族即可。</li></ul></li></ul>]]></content>
    
    
    <summary type="html">设计模式-工厂模式</summary>
    
    
    
    
    <category term="Java" scheme="https://www.naste.top:1024/tags/Java/"/>
    
    <category term="设计模式" scheme="https://www.naste.top:1024/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="工厂模式" scheme="https://www.naste.top:1024/tags/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
</feed>
